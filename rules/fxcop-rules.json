[
  {
    "id": "CA1000",
    "message": "Do not declare static members on generic types",
    "description": "When a static member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. In these two cases, the syntax for specifying the type argument is different and easily confused.",
    "details": {
      "typeName": "DoNotDeclareStaticMembersOnGenericTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible generic type contains a static (Shared in Visual Basic) member.",
      "description": "When a static member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. The syntax for specifying the type argument in these two cases is different and easily confused, as the following calls demonstrate:\nGenerally, both of the prior declarations should be avoided so that the type argument does not have to be specified when the member is called. This results in a syntax for calling members in generics that is no different from the syntax for non-generics. For more information, see CA1004: Generic methods should provide type parameter.",
      "hotToFix": "To fix a violation of this rule, remove the static member or change it to an instance member.",
      "whenToSuppress": "Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182139.aspx"
    }
  },
  {
    "id": "CA1001",
    "message": "Types that own disposable fields should be disposable",
    "description": "A class declares and implements an instance field that is a System.IDisposable type, and the class does not implement IDisposable. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface.",
    "details": {
      "typeName": "TypesThatOwnDisposableFieldsShouldBeDisposable",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking - If the type is not visible outside the assembly. Breaking - If the type is visible outside the assembly.",
      "cause": "A class declares and implements an instance field that is a System.IDisposable type and the class does not implement IDisposable.",
      "description": "A class implements the IDisposable interface to dispose of unmanaged resources that it owns. An instance field that is an IDisposable type indicates that the field owns an unmanaged resource. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface. If the class does not directly own any unmanaged resources, it should not implement a finalizer.",
      "hotToFix": "To fix a violation of this rule, implement IDisposable and from the IDisposable.Dispose method call the Dispose method of the field.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182172.aspx"
    }
  },
  {
    "id": "CA1002",
    "message": "Do not expose generic lists",
    "description": "System.Collections.Generic.List\u003c(Of \u003c(T\u003e)\u003e) is a generic collection that is designed for performance, not inheritance. Therefore, List does not contain any virtual members. The generic collections that are designed for inheritance should be exposed instead.",
    "details": {
      "typeName": "DoNotExposeGenericLists",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A type contains an externally visible member that is a System.Collections.Generic.List\u003cT\u003e type, returns a System.Collections.Generic.List\u003cT\u003e type, or whose signature includes a System.Collections.Generic.List\u003cT\u003e parameter.",
      "description": "System.Collections.Generic.List\u003cT\u003e is a generic collection that is designed for performance and not inheritance. System.Collections.Generic.List\u003cT\u003e does not contain virtual members that make it easier to change the behavior of an inherited class. The following generic collections are designed for inheritance and should be exposed instead of System.Collections.Generic.List\u003cT\u003e.\nSystem.Collections.ObjectModel.Collection\u003cT\u003e System.Collections.ObjectModel.ReadOnlyCollection\u003cT\u003e System.Collections.ObjectModel.KeyedCollection\u003cTKey, TItem\u003e",
      "hotToFix": "To fix a violation of this rule, change the System.Collections.Generic.List\u003cT\u003e type to one of the generic collections that is designed for inheritance.",
      "whenToSuppress": "Do not suppress a warning from this rule unless the assembly that raises this warning is not meant to be a reusable library. For example, it would be safe to suppress this warning in a performance tuned application where a performance benefit was gained from the use of generic lists.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182142.aspx"
    }
  },
  {
    "id": "CA1003",
    "message": "Use generic event handler instances",
    "description": "A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets Microsoft .NET Framework 2.0.",
    "details": {
      "typeName": "UseGenericEventHandlerInstances",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets .NET Framework 2.0.",
      "description": "Before .NET Framework 2.0, in order to pass custom information to the event handler, a new delegate had to be declared that specified a class that was derived from the System.EventArgs class. This is no longer true in .NET Framework 2.0, which introduced the System.EventHandler\u003cTEventArgs\u003e delegate. This generic delegate allows any class that is derived from EventArgs to be used together with the event handler.",
      "hotToFix": "To fix a violation of this rule, remove the delegate and replace its use by using the System.EventHandler\u003cTEventArgs\u003e delegate. If the delegate is autogenerated by the Visual Basic compiler, change the syntax of the event declaration to use the System.EventHandler\u003cTEventArgs\u003e delegate.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182178.aspx"
    }
  },
  {
    "id": "CA1004",
    "message": "Generic methods should provide type parameter",
    "description": "Inference is how the type argument of a generic method is determined by the type of argument that is passed to the method, instead of by the explicit specification of the type argument. To enable inference, the parameter signature of a generic method must include a parameter that is of the same type as the type parameter for the method. In this case, the type argument does not have to be specified. When using inference for all type parameters, the syntax for calling generic and non-generic instance methods is identical; this simplifies the usability of generic methods.",
    "details": {
      "typeName": "GenericMethodsShouldProvideTypeParameter",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The parameter signature of an externally visible generic method does not contain types that correspond to all the type parameters of the method.",
      "description": "Inference is how the type argument of a generic method is determined by the type of argument that is passed to the method, instead of by the explicit specification of the type argument. To enable inference, the parameter signature of a generic method must include a parameter that is of the same type as the type parameter for the method. In this case, the type argument does not have to be specified. When you use inference for all type parameters, the syntax for calling generic and nongeneric instance methods is identical. This simplifies the usability of generic methods.",
      "hotToFix": "To fix a violation of this rule, change the design so that the parameter signature contains the same type for each type parameter of the method.",
      "whenToSuppress": "Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182150.aspx"
    }
  },
  {
    "id": "CA1005",
    "message": "Avoid excessive parameters on generic types",
    "description": "The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents. It is usually obvious with one type parameter, as in List\u003cT\u003e, and in certain cases that have two type parameters, as in Dictionary\u003cTKey, TValue\u003e. However, if more than two type parameters exist, the difficulty becomes too great for most users.",
    "details": {
      "typeName": "AvoidExcessiveParametersOnGenericTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible generic type has more than two type parameters.",
      "description": "The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents. It is usually obvious with one type parameter, as in List\u003cT\u003e, and in certain cases with two type parameters, as in Dictionary\u003cTKey, TValue\u003e. If more than two type parameters exist, the difficulty becomes too great for most users (for example, TooManyTypeParameters\u003cT, K, V\u003e in C# or TooManyTypeParameters(Of T, K, V) in Visual Basic).",
      "hotToFix": "To fix a violation of this rule, change the design to use no more than two type parameters.",
      "whenToSuppress": "Do not suppress a warning from this rule unless the design absolutely requires more than two type parameters. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182129.aspx"
    }
  },
  {
    "id": "CA1006",
    "message": "Do not nest generic types in member signatures",
    "description": "A nested type argument is a type argument that is also a generic type. To call a member whose signature contains a nested type argument, the user must instantiate one generic type and pass this type to the constructor of a second generic type. The required procedure and syntax are complex and should be avoided.",
    "details": {
      "typeName": "DoNotNestGenericTypesInMemberSignatures",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible member has a signature that contains a nested type argument.",
      "description": "A nested type argument is a type argument that is also a generic type. To call a member whose signature contains a nested type argument, the user must instantiate one generic type and pass this type to the constructor of a second generic type. The required procedure and syntax are complex and should be avoided.",
      "hotToFix": "To fix a violation of this rule, change the design to remove the nested type argument.",
      "whenToSuppress": "Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182144.aspx"
    }
  },
  {
    "id": "CA1007",
    "message": "Use generics where appropriate",
    "description": "An externally visible method contains a reference parameter of type System.Object. Use of a generic method enables all types, subject to constraints, to be passed to the method without first casting the type to the reference parameter type.",
    "details": {
      "typeName": "UseGenericsWhereAppropriate",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible method contains a reference parameter of type System.Object, and the containing assembly targets .NET Framework 2.0.",
      "description": "A reference parameter is a parameter that is modified by using the ref (ByRef in Visual Basic) keyword. The argument type that is supplied for a reference parameter must exactly match the reference parameter type. To use a type that is derived from the reference parameter type, the type must first be cast and assigned to a variable of the reference parameter type. Use of a generic method allows all types, subject to constraints, to be passed to the method without first casting the type to the reference parameter type.",
      "hotToFix": "To fix a violation of this rule, make the method generic and replace the Object parameter by using a type parameter.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182179.aspx"
    }
  },
  {
    "id": "CA1008",
    "message": "Enums should have zero value",
    "description": "The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be \"None\" to indicate that no values have been set in the enumeration.",
    "details": {
      "typeName": "EnumsShouldHaveZeroValue",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking - When you are prompted to add a None value to a non-flag enumeration.Breaking - When you are prompted to rename or remove any enumeration values.",
      "cause": "An enumeration without an applied System.FlagsAttribute does not define a member that has a value of zero; or an enumeration that has an applied FlagsAttribute defines a member that has a value of zero but its name is not \u0027None\u0027, or the enumeration defines multiple zero-valued members.",
      "description": "The default value of an uninitialized enumeration, just like other value types, is zero. A non-flags−attributed enumeration should define a member that has the value of zero so that the default value is a valid value of the enumeration. If appropriate, name the member \u0027None\u0027. Otherwise, assign zero to the most frequently used member. Note that, by default, if the value of the first enumeration member is not set in the declaration, its value is zero.\nIf an enumeration that has the FlagsAttribute applied defines a zero-valued member, its name should be \u0027None\u0027 to indicate that no values have been set in the enumeration. Using a zero-valued member for any other purpose is contrary to the use of the FlagsAttribute in that the AND and OR bitwise operators are useless with the member. This implies that only one member should be assigned the value zero. Note that if multiple members that have the value zero occur in a flags-attributed enumeration, Enum.ToString() returns incorrect results for members that are not zero.",
      "hotToFix": "To fix a violation of this rule for non-flags−attributed enumerations, define a member that has the value of zero; this is a non-breaking change. For flags-attributed enumerations that define a zero-valued member, name this member \u0027None\u0027 and delete any other members that have a value of zero; this is a breaking change.",
      "whenToSuppress": "Do not suppress a warning from this rule except for flags-attributed enumerations that have previously shipped.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182149.aspx"
    }
  },
  {
    "id": "CA1009",
    "message": "Declare event handlers correctly",
    "description": "Event handler methods take two parameters. The first is of type System.Object and is named \"sender\". This is the object that raised the event. The second parameter is of type System.EventArgs and is named \"e\". This is the data that is associated with the event. Event handler methods should not return a value; in the C# programming language, this is indicated by the return type void.",
    "details": {
      "typeName": "DeclareEventHandlersCorrectly",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A delegate that handles a public or protected event does not have the correct signature, return type, or parameter names.",
      "description": "Event handler methods take two parameters. The first is of type System.Object and is named \u0027sender\u0027. This is the object that raised the event. The second parameter is of type System.EventArgs and is named \u0027e\u0027. This is the data that is associated with the event. For example, if the event is raised whenever a file is opened, the event data typically contains the name of the file.\nEvent handler methods should not return a value. In the C# programming language, this is indicated by the return type void. An event handler can invoke multiple methods in multiple objects. If the methods were allowed to return a value, multiple return values would occur for each event, and only the value of the last method that was invoked would be available.",
      "hotToFix": "To fix a violation of this rule, correct the signature, return type, or parameter names of the delegate. For details, see the following example.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182133.aspx"
    }
  },
  {
    "id": "CA1010",
    "message": "Collections should implement generic interface",
    "description": "To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types.",
    "details": {
      "typeName": "CollectionsShouldImplementGenericInterface",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "An externally visible type implements the System.Collections.IEnumerable interface but does not implement the System.Collections.Generic.IEnumerable\u003cT\u003e interface, and the containing assembly targets .NET Framework 2.0. This rule ignores types that implement System.Collections.IDictionary.",
      "description": "To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types such as the following:\nSystem.Collections.Generic.List\u003cT\u003e System.Collections.Generic.Queue\u003cT\u003e System.Collections.Generic.Stack\u003cT\u003e",
      "hotToFix": "To fix a violation of this rule, implement one of the following generic collection interfaces:\nSystem.Collections.Generic.IEnumerable\u003cT\u003e System.Collections.Generic.ICollection\u003cT\u003e System.Collections.Generic.IList\u003cT\u003e",
      "whenToSuppress": "It is safe to suppress a warning from this rule; however, the collection will have a more limited use.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182132.aspx"
    }
  },
  {
    "id": "CA1011",
    "message": "Consider passing base types as parameters",
    "description": "When a base type is specified as a parameter in a method declaration, any type that is derived from the base type can be passed as the corresponding argument to the method. If the additional functionality that is provided by the derived parameter type is not required, use of the base type enables wider use of the method.",
    "details": {
      "typeName": "ConsiderPassingBaseTypesAsParameters",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A method declaration includes a formal parameter that is a derived type, and the method calls only members of the base type of the parameter.",
      "description": "When a base type is specified as a parameter in a method declaration, any type that is derived from the base type can be passed as the corresponding argument to the method. When the argument is used inside the method body, the specific method that is executed depends on the type of the argument. If the additional functionality that is provided by the derived type is not required, use of the base type allows wider use of the method.",
      "hotToFix": "To fix a violation of this rule, change the type of the parameter to its base type.",
      "whenToSuppress": "It is safe to suppress a warning from this rule\nif the method requires the specific functionality that is provided by the derived type - or - to enforce that only the derived type, or a more derived type, is passed to the method.\nIn these cases, the code will be more robust because of the strong type checking that is provided by the compiler and runtime.",
      "url": "http://msdn.microsoft.com/en-us/library/3hk32yyz.aspx"
    }
  },
  {
    "id": "CA1012",
    "message": "Abstract types should not have constructors",
    "description": "Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.",
    "details": {
      "typeName": "AbstractTypesShouldNotHaveConstructors",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A public type is abstract and has a public constructor.",
      "description": "Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.",
      "hotToFix": "To fix a violation of this rule, either make the constructor protected or do not declare the type as abstract.",
      "whenToSuppress": "Do not suppress a warning from this rule. The abstract type has a public constructor.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182126.aspx"
    }
  },
  {
    "id": "CA1013",
    "message": "Overload operator equals on overloading add and subtract",
    "description": "A public or protected type implements the addition or subtraction operators without implementing the equality operator.",
    "details": {
      "typeName": "OverloadOperatorEqualsOnOverloadingAddAndSubtract",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A public or protected type implements the addition or subtraction operators without implementing the equality operator.",
      "description": "When instances of a type can be combined by using operations such as addition and subtraction, you should almost always define equality to return true for any two instances that have the same constituent values.\nYou cannot use the default equality operator in an overloaded implementation of the equality operator. Doing so will cause a stack overflow. To implement the equality operator, use the Object.Equals method in your implementation. See the following example.",
      "hotToFix": "To fix a violation of this rule, implement the equality operator so that it is mathematically consistent with the addition and subtraction operators.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the default implementation of the equality operator provides the correct behavior for the type.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182164.aspx"
    }
  },
  {
    "id": "CA1014",
    "message": "Mark assemblies with CLSCompliantAttribute",
    "description": "The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance by using CLSCompliantAttribute . If this attribute is not present on an assembly, the assembly is not compliant.",
    "details": {
      "typeName": "MarkAssembliesWithClsCompliant",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "An assembly does not have the System.CLSCompliantAttribute attribute applied to it.",
      "description": "The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance with CLSCompliantAttribute. If the attribute is not present on an assembly, the assembly is not compliant.\nIt is possible for a CLS-compliant assembly to contain types or type members that are not compliant.",
      "hotToFix": "To fix a violation of this rule, add the attribute to the assembly. Instead of marking the whole assembly as noncompliant, you should determine which type or type members are not compliant and mark these elements as such. If possible, you should provide a CLS-compliant alternative for noncompliant members so that the widest possible audience can access all the functionality of your assembly.",
      "whenToSuppress": "Do not suppress a warning from this rule. If you do not want the assembly to be compliant, apply the attribute and set its value to false.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182156.aspx"
    }
  },
  {
    "id": "CA1016",
    "message": "Mark assemblies with AssemblyVersionAttribute",
    "description": "The .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.",
    "details": {
      "typeName": "MarkAssembliesWithAssemblyVersion",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "The assembly does not have a version number.",
      "description": "The identity of an assembly is composed of the following information:\nAssembly name Version number Culture Public key (for strongly named assemblies).\nThe .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.",
      "hotToFix": "To fix a violation of this rule, add a version number to the assembly by using the System.Reflection.AssemblyVersionAttribute attribute. See the following example.",
      "whenToSuppress": "Do not suppress a warning from this rule for assemblies that are used by third parties, or in a production environment.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182155.aspx"
    }
  },
  {
    "id": "CA1017",
    "message": "Mark assemblies with ComVisibleAttribute",
    "description": "ComVisibleAttribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for the whole assembly and then overridden for individual types and type members. If this attribute is not present, the contents of the assembly are visible to COM clients.",
    "details": {
      "typeName": "MarkAssembliesWithComVisible",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "An assembly does not have the System.Runtime.InteropServices.ComVisibleAttribute attribute applied to it.",
      "description": "The ComVisibleAttribute attribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for a whole assembly and then overridden for individual types and type members. If the attribute is not present, the contents of the assembly are visible to COM clients.",
      "hotToFix": "To fix a violation of this rule, add the attribute to the assembly. If you do not want the assembly to be visible to COM clients, apply the attribute and set its value to false.",
      "whenToSuppress": "Do not suppress a warning from this rule. If you want the assembly to be visible, apply the attribute and set its value to true.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182157.aspx"
    }
  },
  {
    "id": "CA1018",
    "message": "Mark attributes with AttributeUsageAttribute",
    "description": "When you define a custom attribute, mark it by using AttributeUsageAttribute to indicate where in the source code the custom attribute can be applied. The meaning and intended usage of an attribute will determine its valid locations in code.",
    "details": {
      "typeName": "MarkAttributesWithAttributeUsage",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The System.AttributeUsageAttribute attribute is not present on the custom attribute.",
      "description": "When you define a custom attribute, mark it by using AttributeUsageAttribute to indicate where in the source code the custom attribute can be applied. The meaning and intended usage of an attribute will determine its valid locations in code. For example, you might define an attribute that identifies the person who is responsible for maintaining and enhancing each type in a library, and that responsibility is always assigned at the type level. In this case, compilers should enable the attribute on classes, enumerations, and interfaces, but should not enable it on methods, events, or properties. Organizational policies and procedures would dictate whether the attribute should be enabled on assemblies.\nThe System.AttributeTargets enumeration defines the targets that you can specify for a custom attribute. If you omit AttributeUsageAttribute, your custom attribute will be valid for all targets, as defined by the All value of AttributeTargets enumeration.",
      "hotToFix": "To fix a violation of this rule, specify targets for the attribute by using AttributeUsageAttribute. See the following example.",
      "whenToSuppress": "You should fix a violation of this rule instead of excluding the message. Even if the attribute inherits AttributeUsageAttribute, the attribute should be present to simplify code maintenance.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182158.aspx"
    }
  },
  {
    "id": "CA1019",
    "message": "Define accessors for attribute arguments",
    "description": "Attributes can define mandatory arguments that must be specified when you apply the attribute to a target. These are also known as positional arguments because they are supplied to attribute constructors as positional parameters. For every mandatory argument, the attribute should also provide a corresponding read-only property so that the value of the argument can be retrieved at execution time. Attributes can also define optional arguments, which are also known as named arguments. These arguments are supplied to attribute constructors by name and should have a corresponding read/write property.",
    "details": {
      "typeName": "DefineAccessorsForAttributeArguments",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "In its constructor, an attribute defines arguments that do not have corresponding properties.",
      "description": "Attributes can define mandatory arguments that must be specified when you apply the attribute to a target. These are also known as positional arguments because they are supplied to attribute constructors as positional parameters. For every mandatory argument, the attribute should also provide a corresponding read-only property so that the value of the argument can be retrieved at execution time. This rule checks that for each constructor parameter, you have defined the corresponding property.\nAttributes can also define optional arguments, which are also known as named arguments. These arguments are supplied to attribute constructors by name and should have a corresponding read/write property.\nFor mandatory and optional arguments, the corresponding properties and constructor parameters should use the same name but different casing. Properties use Pascal casing, and parameters use camel casing.",
      "hotToFix": "To fix a violation of this rule, add a read-only property for each constructor parameter that does not have one.",
      "whenToSuppress": "Suppress a warning from this rule if you do not want the value of the mandatory argument to be retrievable.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182136.aspx"
    }
  },
  {
    "id": "CA1020",
    "message": "Avoid namespaces with few types",
    "description": "Make sure that each of your namespaces has a logical organization, and that a valid reason exists for putting types in a sparsely populated namespace.",
    "details": {
      "typeName": "AvoidNamespacesWithFewTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A namespace other than the global namespace contains fewer than five types.",
      "description": "Make sure that each of your namespaces has a logical organization, and that a valid reason exists to put types in a sparsely populated namespace. Namespaces should contain types that are used together in most scenarios. When their applications are mutually exclusive, types should be located in separate namespaces. For example, the System.Web.UI namespace contains types that are used in Web applications, and the System.Windows.Forms namespace contains types that are used in Windows-based applications. Even though both namespaces have types that control aspects of the user interface, these types are not designed for use in the same application. Therefore, they are located in separate namespaces. Careful namespace organization can also be helpful because it increases the discoverability of a feature. By examining the namespace hierarchy, library consumers should be able to locate the types that implement a feature.",
      "hotToFix": "To fix a violation of this rule, try to combine namespaces that contain just a few types into a single namespace.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the namespace does not contain types that are used with the types in your other namespaces.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182130.aspx"
    }
  },
  {
    "id": "CA1021",
    "message": "Avoid out parameters",
    "description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between out and ref parameters is not widely understood.",
    "details": {
      "typeName": "AvoidOutParameters",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected method in a public type has an out parameter.",
      "description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between out and ref parameters is not widely understood.\nWhen a reference type is passed \"by reference,\" the method intends to use the parameter to return a different instance of the object. Passing a reference type by reference is also known as using a double pointer, pointer to a pointer, or double indirection. By using the default calling convention, which is pass \"by value,\" a parameter that takes a reference type already receives a pointer to the object. The pointer, not the object to which it points, is passed by value. Pass by value means that the method cannot change the pointer to have it point to a new instance of the reference type. However, it can change the contents of the object to which it points. For most applications this is sufficient and yields the desired behavior.\nIf a method must return a different instance, use the return value of the method to accomplish this. See the System.String class for a variety of methods that operate on strings and return a new instance of a string. When this model is used, the caller must decide whether the original object is preserved.\nAlthough return values are commonplace and heavily used, the correct application of out and ref parameters requires intermediate design and coding skills. Library architects who design for a general audience should not expect users to master working with out or ref parameters.",
      "hotToFix": "To fix a violation of this rule that is caused by a value type, have the method return the object as its return value. If the method must return multiple values, redesign it to return a single instance of an object that holds the values.\nTo fix a violation of this rule that is caused by a reference type, make sure that the desired behavior is to return a new instance of the reference. If it is, the method should use its return value to do this.",
      "whenToSuppress": "It is safe to suppress a warning from this rule. However, this design could cause usability issues.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182131.aspx"
    }
  },
  {
    "id": "CA1023",
    "message": "Indexers should not be multidimensional",
    "description": "Indexers (that is, indexed properties) should use a single index. Multidimensional indexers can significantly reduce the usability of the library.",
    "details": {
      "typeName": "IndexersShouldNotBeMultidimensional",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected type contains a public or protected indexer that uses more than one index.",
      "description": "Indexers, that is, indexed properties, should use a single index. Multi-dimensional indexers can significantly reduce the usability of the library. If the design requires multiple indexes, reconsider whether the type represents a logical data store. If not, use a method.",
      "hotToFix": "To fix a violation of this rule, change the design to use a lone integer or string index, or use a method instead of the indexer.",
      "whenToSuppress": "Suppress a warning from this rule only after carefully considering the need for the nonstandard indexer.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182152.aspx"
    }
  },
  {
    "id": "CA1024",
    "message": "Use properties where appropriate",
    "description": "A public or protected method has a name that starts with \"Get\", takes no parameters, and returns a value that is not an array. The method might be a good candidate to become a property.",
    "details": {
      "typeName": "UsePropertiesWhereAppropriate",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected method has a name that starts with Get, takes no parameters, and returns a value that is not an array.",
      "description": "In most cases, properties represent data and methods perform actions. Properties are accessed like fields, which makes them easier to use. A method is a good candidate to become a property if one of these conditions is present:\nTakes no arguments and returns the state information of an object. Accepts a single argument to set some part of the state of an object.\nProperties should behave as if they are fields; if the method cannot, it should not be changed to a property. Methods are better than properties in the following situations:\nThe method performs a time-consuming operation. The method is perceivably slower than the time that is required to set or get the value of a field. The method performs a conversion. Accessing a field does not return a converted version of the data that it stores. The Get method has an observable side effect. Retrieving the value of a field does not produce any side effects. The order of execution is important. Setting the value of a field does not rely on the occurrence of other operations. Calling the method two times in succession creates different results. The method is static but returns an object that can be changed by the caller. Retrieving the value of a field does not allow the caller to change the data that is stored by the field. The method returns an array.",
      "hotToFix": "To fix a violation of this rule, change the method to a property.",
      "whenToSuppress": "Suppress a warning from this rule if the method meets at least one of the previously listed criteria.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182181.aspx"
    }
  },
  {
    "id": "CA1025",
    "message": "Replace repetitive arguments with params array",
    "description": "Use a parameter array instead of repeated arguments when the exact number of arguments is unknown and when the variable arguments are the same type or can be passed as the same type.",
    "details": {
      "typeName": "ReplaceRepetitiveArgumentsWithParamsArray",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A public or protected method in a public type has more than three parameters, and its last three parameters are the same type.",
      "description": "Use a parameter array instead of repeated arguments when the exact number of arguments is unknown and the variable arguments are the same type, or can be passed as the same type. For example, the WriteLine method provides a general-purpose overload that uses a parameter array to accept any number of Object arguments.",
      "hotToFix": "To fix a violation of this rule, replace the repeated arguments with a parameter array.",
      "whenToSuppress": "It is always safe to suppress a warning from this rule; however, this design might cause usability issues.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182167.aspx"
    }
  },
  {
    "id": "CA1026",
    "message": "Default parameters should not be used",
    "description": "Methods that use default parameters are allowed under the CLS; however, the CLS lets compilers ignore the values that are assigned to these parameters. To maintain the behavior that you want across programming languages, methods that use default parameters should be replaced by method overloads that provide the default parameters.",
    "details": {
      "typeName": "DefaultParametersShouldNotBeUsed",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible type contains an externally visible method that uses a default parameter.",
      "description": "Methods that use default parameters are allowed under the Common Language Specification (CLS); however, the CLS allows compilers to ignore the values that are assigned to these parameters. Code that is written for compilers that ignore default parameter values must explicitly provide arguments for each default parameter. To maintain the behavior that you want across programming languages, methods that use default parameters should be replaced with method overloads that provide the default parameters.\nThe compiler ignores the values of default parameters for Managed Extension for C++ when it accesses managed code. The Visual Basic compiler supports methods that have default parameters that use the Optional (Visual Basic) keyword.",
      "hotToFix": "To fix a violation of this rule, replace the method that uses default parameters with method overloads that supply the default parameters.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182135.aspx"
    }
  },
  {
    "id": "CA1027",
    "message": "Mark enums with FlagsAttribute",
    "description": "An enumeration is a value type that defines a set of related named constants. Apply FlagsAttribute to an enumeration when its named constants can be meaningfully combined.",
    "details": {
      "typeName": "MarkEnumsWithFlags",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "The values of a public enumeration are powers of two or are combinations of other values that are defined in the enumeration, and the System.FlagsAttribute attribute is not present. To reduce false positives, this rule does not report a violation for enumerations that have contiguous values.",
      "description": "An enumeration is a value type that defines a set of related named constants. Apply FlagsAttribute to an enumeration when its named constants can be meaningfully combined. For example, consider an enumeration of the days of the week in an application that keeps track of which day\u0027s resources are available. If the availability of each resource is encoded by using the enumeration that has FlagsAttribute present, any combination of days can be represented. Without the attribute, only one day of the week can be represented.\nFor fields that store combinable enumerations, the individual enumeration values are treated as groups of bits in the field. Therefore, such fields are sometimes referred to as bit fields. To combine enumeration values for storage in a bit field, use the Boolean conditional operators. To test a bit field to determine whether a specific enumeration value is present, use the Boolean logical operators. For a bit field to store and retrieve combined enumeration values correctly, each value that is defined in the enumeration must be a power of two. Unless this is so, the Boolean logical operators will not be able to extract the individual enumeration values that are stored in the field.",
      "hotToFix": "To fix a violation of this rule, add FlagsAttribute to the enumeration.",
      "whenToSuppress": "Suppress a warning from this rule if you do not want the enumeration values to be combinable.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182159.aspx"
    }
  },
  {
    "id": "CA1028",
    "message": "Enum storage should be Int32",
    "description": "An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios.",
    "details": {
      "typeName": "EnumStorageShouldBeInt32",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The underlying type of a public enumeration is not System.Int32.",
      "description": "An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Even though you can change this underlying type, it is not necessary or recommended for most scenarios. Note that no significant performance gain is achieved by using a data type that is smaller than Int32. If you cannot use the default data type, you should use one of the Common Language System (CLS)-compliant integral types, Byte, Int16, Int32, or Int64 to make sure that all values of the enumeration can be represented in CLS-compliant programming languages.",
      "hotToFix": "To fix a violation of this rule, unless size or compatibility issues exist, use Int32. For situations where Int32 is not large enough to hold the values, use Int64. If backward compatibility requires a smaller data type, use Byte or Int16.",
      "whenToSuppress": "Suppress a warning from this rule only if backward compatibility issues require it. In applications, failure to comply with this rule usually does not cause problems. In libraries, where language interoperability is required, failure to comply with this rule might adversely affect your users.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182147.aspx"
    }
  },
  {
    "id": "CA1030",
    "message": "Use events where appropriate",
    "description": "This rule detects methods that have names that ordinarily would be used for events. If a method is called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.",
    "details": {
      "typeName": "UseEventsWhereAppropriate",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A public, protected, or private method name begins with one of the following:\nAddOn RemoveOn Fire Raise",
      "description": "This rule detects methods that have names that ordinarily would be used for events. Events follow the Observer or Publish-Subscribe design pattern; they are used when a state change in one object must be communicated to other objects. If a method gets called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.\nSome common examples of events are found in user interface applications where a user action such as clicking a button causes a segment of code to execute. The .NET Framework event model is not limited to user interfaces; it should be used anywhere you must communicate state changes to one or more objects.",
      "hotToFix": "If the method is called when the state of an object changes, you should consider changing the design to use the .NET Framework event model.",
      "whenToSuppress": "Suppress a warning from this rule if the method does not work with the .NET Framework event model.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182177.aspx"
    }
  },
  {
    "id": "CA1031",
    "message": "Do not catch general exception types",
    "description": "General exceptions should not be caught. Catch a more specific exception, or rethrow the general exception as the last statement in the catch block.",
    "details": {
      "typeName": "DoNotCatchGeneralExceptionTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A general exception such as System.Exception or System.SystemException is caught in a catch statement, or a general catch clause such as catch() is used.",
      "description": "General exceptions should not be caught.",
      "hotToFix": "To fix a violation of this rule, catch a more specific exception, or rethrow the general exception as the last statement in the catch block.",
      "whenToSuppress": "Do not suppress a warning from this rule. Catching general exception types can hide run-time problems from the library user and can make debugging more difficult.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182137.aspx"
    }
  },
  {
    "id": "CA1032",
    "message": "Implement standard exception constructors",
    "description": "Failure to provide the full set of constructors can make it difficult to correctly handle exceptions.",
    "details": {
      "typeName": "ImplementStandardExceptionConstructors",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A type extends System.Exception and does not declare all the required constructors.",
      "description": "Exception types must implement the following constructors:\npublic NewException() public NewException(string) public NewException(string, Exception) protected or private NewException(SerializationInfo, StreamingContext)\nFailure to provide the full set of constructors can make it difficult to correctly handle exceptions. For example, the constructor that has the signature NewException(string, Exception) is used to create exceptions that are caused by other exceptions. Without this constructor you cannot create and throw an instance of your custom exception that contains an inner (nested) exception, which is what managed code should do in such a situation. The first three exception constructors are public by convention. The fourth constructor is protected in unsealed classes, and private in sealed classes. For more information, see CA2229: Implement serialization constructors",
      "hotToFix": "To fix a violation of this rule, add the missing constructors to the exception, and make sure that they have the correct accessibility.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the violation is caused by using a different access level for the public constructors.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182151.aspx"
    }
  },
  {
    "id": "CA1033",
    "message": "Interface methods should be callable by child types",
    "description": "An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.",
    "details": {
      "typeName": "InterfaceMethodsShouldBeCallableByChildTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.",
      "description": "Consider a base type that explicitly implements a public interface method. A type that derives from the base type can access the inherited interface method only through a reference to the current instance (this in C#) that is cast to the interface. If the derived type re-implements (explicitly) the inherited interface method, the base implementation can no longer be accessed. The call through the current instance reference will invoke the derived implementation; this causes recursion and an eventual stack overflow.\nThis rule does not report a violation for an explicit implementation of IDisposable.Dispose when an externally visible Close() or System.IDisposable.Dispose(Boolean) method is provided.",
      "hotToFix": "To fix a violation of this rule, implement a new method that exposes the same functionality and is visible to derived types or change to a nonexplicit implementation. If a breaking change is acceptable, an alternative is to make the type sealed.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if an externally visible method is provided that has the same functionality but a different name than the explicitly implemented method.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182153.aspx"
    }
  },
  {
    "id": "CA1034",
    "message": "Nested types should not be visible",
    "description": "A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.",
    "details": {
      "typeName": "NestedTypesShouldNotBeVisible",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible type contains an externally visible type declaration. Nested enumerations and protected types are exempt from this rule.",
      "description": "A nested type is a type declared within the scope of another type. Nested types are useful for encapsulating private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.\nDo not use externally visible nested types for logical grouping or to avoid name collisions; instead, use namespaces.\nNested types include the notion of member accessibility, which some programmers do not understand clearly.\nProtected types can be used in subclasses and nested types in advance customization scenarios.",
      "hotToFix": "If you do not intend the nested type to be externally visible, change the type\u0027s accessibility. Otherwise, remove the nested type from its parent. If the purpose of the nesting is to categorize the nested type, use a namespace to create the hierarchy instead.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182162.aspx"
    }
  },
  {
    "id": "CA1035",
    "message": "ICollection implementations have strongly typed members",
    "description": "This rule requires ICollection implementations to provide strongly typed members so that users are not required to cast arguments to the Object type when they use the functionality that is provided by the interface. This rule assumes that the type that implements ICollection does so to manage a collection of instances of a type that is stronger than Object.",
    "details": {
      "typeName": "ICollectionImplementationsHaveStronglyTypedMembers",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected type implements System.Collections.ICollection but does not provide a strongly typed method for ICollection.CopyTo. The strongly typed version of CopyTo must accept two parameters and cannot have a System.Array or an array of System.Object as its first parameter.",
      "description": "This rule requires ICollection implementations to provide strongly typed members so that users are not required to cast arguments to the Object type when they use the functionality that is provided by the interface. This rule assumes that the type that implements ICollection does so to manage a collection of instances of a type that is stronger than Object.\nICollection implements the System.Collections.IEnumerable interface. If the objects in the collection extend System.ValueType, you must provide a strongly typed member for GetEnumerator to avoid the decrease in performance that is caused by boxing. This is not required when the objects of the collection are a reference type.\nTo implement a strongly typed version of an interface member, implement the interface members explicitly by using names in the form InterfaceName.InterfaceMemberName, such as CopyTo. The explicit interface members use the data types that are declared by the interface. Implement the strongly typed members by using the interface member name, such as CopyTo. Declare the strongly typed members as public, and declare parameters and return values to be of the strong type that is managed by the collection. The strong types replace weaker types such as Object and Array that are declared by the interface.",
      "hotToFix": "To fix a violation of this rule, implement the interface member explicitly (declare it as CopyTo). Add the public strongly typed member, declared as CopyTo, and have it take a strongly typed array as its first parameter.",
      "whenToSuppress": "Suppress a warning from this rule if you implement a new object-based collection, such as a binary tree, where types that extend the new collection determine the strong type. These types should comply with this rule and expose strongly typed members.",
      "url": "http://msdn.microsoft.com/en-us/library/49stb304.aspx"
    }
  },
  {
    "id": "CA1036",
    "message": "Override methods on comparable types",
    "description": "A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, or greater than.",
    "details": {
      "typeName": "OverrideMethodsOnComparableTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A public or protected type implements the System.IComparable interface and does not override Object.Equals or does not overload the language-specific operator for equality, inequality, less than, or greater than. The rule does not report a violation if the type inherits only an implementation of the interface.",
      "description": "Types that define a custom sort order implement the IComparable interface. The CompareTo method returns an integer value that indicates the correct sort order for two instances of the type. This rule identifies types that set a sort order; this implies that the ordinary meaning of equality, inequality, less than, and greater than do not apply. When you provide an implementation of IComparable, you must usually also override Equals so that it returns values that are consistent with CompareTo. If you override Equals and are coding in a language that supports operator overloads, you should also provide operators that are consistent with Equals.",
      "hotToFix": "To fix a violation of this rule, override Equals. If your programming language supports operator overloading, supply the following operators:\nop_Equality op_Inequality op_LessThan op_GreaterThan\nIn C#, the tokens that are used to represent these operators are as follows: \u003d\u003d, !\u003d, \u003c, and \u003e.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the violation is caused by missing operators and your programming language does not support operator overloading, as is the case with Visual Basic .NET. It is also safe to suppress a warning for from this rule when it fires on equality operators other than op_Equality if you determine that implementing the operators does not make sense in your application context. However, you should always over op_Equality and the \u003d\u003d operator if you override Object.Equals.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182163.aspx"
    }
  },
  {
    "id": "CA1038",
    "message": "Enumerators should be strongly typed",
    "description": "This rule requires IEnumerator implementations to also provide a strongly typed version of the Current property so that users are not required to cast the return value to the strong type when they use the functionality that is provided by the interface.",
    "details": {
      "typeName": "EnumeratorsShouldBeStronglyTyped",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected type implements System.Collections.IEnumerator but does not provide a strongly typed version of the IEnumerator.Current property. Types that are derived from the following types are exempt from this rule:\nSystem.Collections.CollectionBase System.Collections.DictionaryBase System.Collections.ReadOnlyCollectionBase",
      "description": "This rule requires IEnumerator implementations to also provide a strongly typed version of the Current property so that users are not required to cast the return value to the strong type when they use the functionality that is provided by the interface. This rule assumes that the type that implements IEnumerator contains a collection of instances of a type that is stronger than Object.",
      "hotToFix": "To fix a violation of this rule, implement the interface property explicitly (declare it as IEnumerator.Current). Add a public strongly typed version of the property, declared as Current, and have it return a strongly typed object.",
      "whenToSuppress": "Suppress a warning from this rule when you implement an object-based enumerator for use with an object-based collection, such as a binary tree. Types that extend the new collection will define the strongly typed enumerator and expose the strongly typed property.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182148.aspx"
    }
  },
  {
    "id": "CA1039",
    "message": "Lists are strongly typed",
    "description": "This rule requires IList implementations to provide strongly typed members so that users are not required to cast arguments to the System.Object type when they use the functionality that is provided by the interface.",
    "details": {
      "typeName": "ListsAreStronglyTyped",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The public or protected type implements System.Collections.IList but does not provide a strongly typed method for one or more of the following:\nIList.Item IList.Add IList.Contains IList.IndexOf IList.Insert IList.Remove",
      "description": "This rule requires IList implementations to provide strongly typed members so that users are not required to cast arguments to the System.Object type when they use the functionality that is provided by the interface. The IList interface is implemented by collections of objects that can be accessed by index. This rule assumes that the type that implements IList does this to manage a collection of instances of a type that is stronger than Object.\nIList implements the System.Collections.ICollection and System.Collections.IEnumerable interfaces. If you implement IList, you must provide the required strongly typed members for ICollection. If the objects in the collection extend System.ValueType, you must provide a strongly typed member for GetEnumerator to avoid the decrease in performance that is caused by boxing; this is not required when the objects of the collection are a reference type.\nTo comply with this rule, implement the interface members explicitly by using names in the form InterfaceName.InterfaceMemberName, such as Add. The explicit interface members use the data types that are declared by the interface. Implement the strongly typed members by using the interface member name, such as Add. Declare the strongly typed members as public, and declare parameters and return values to be of the strong type that is managed by the collection. The strong types replace weaker types such as Object and Array that are declared by the interface.",
      "hotToFix": "To fix a violation of this rule, explicitly implement IList members and provide strongly typed alternatives for the members that were noted previously. For code that correctly implements the IList interface and provides the required strongly typed members, see the following example.",
      "whenToSuppress": "Suppress a warning from this rule when you implement a new object-based collection, such as a linked list, where types that extend the new collection determine the strong type. These types should comply with this rule and expose strongly typed members.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182154.aspx"
    }
  },
  {
    "id": "CA1040",
    "message": "Avoid empty interfaces",
    "description": "Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members; therefore, it does not define a contract that can be implemented.",
    "details": {
      "typeName": "AvoidEmptyInterfaces",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The interface does not declare any members or implement two or more other interfaces.",
      "description": "Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members. Therefore, it does not define a contract that can be implemented.\nIf your design includes empty interfaces that types are expected to implement, you are probably using an interface as a marker or a way to identify a group of types. If this identification will occur at run time, the correct way to accomplish this is to use a custom attribute. Use the presence or absence of the attribute, or the properties of the attribute, to identify the target types. If the identification must occur at compile time, then it is acceptable to use an empty interface.",
      "hotToFix": "Remove the interface or add members to it. If the empty interface is being used to label a set of types, replace the interface with a custom attribute.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the interface is used to identify a set of types at compile time.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182128.aspx"
    }
  },
  {
    "id": "CA1041",
    "message": "Provide ObsoleteAttribute message",
    "description": "A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified. When a type or member that is marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member.",
    "details": {
      "typeName": "ProvideObsoleteAttributeMessage",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified.",
      "description": "ObsoleteAttribute is used to mark deprecated library types and members. Library consumers should avoid the use of any type or member that is marked obsolete. This is because it might not be supported and will eventually be removed from later versions of the library. When a type or member marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member. This information generally includes how long the obsolete type or member will be supported by the library designers and the preferred replacement to use.",
      "hotToFix": "To fix a violation of this rule, add the message parameter to the ObsoleteAttribute constructor.",
      "whenToSuppress": "Do not suppress a warning from this rule because the Message property provides critical information about the obsolete type or member.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182166.aspx"
    }
  },
  {
    "id": "CA1043",
    "message": "Use integral or string argument for indexers",
    "description": "Indexers (that is, indexed properties) should use integral or string types for the index. These types are typically used for indexing data structures and they increase the usability of the library. Use of the Object type should be restricted to those cases where the specific integral or string type cannot be specified at design time.",
    "details": {
      "typeName": "UseIntegralOrStringArgumentForIndexers",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected type contains a public or protected indexer that uses an index type other than System.Int32, System.Int64, System.Object, or System.String.",
      "description": "Indexers, that is, indexed properties, should use integer or string types for the index. These types are typically used for indexing data structures and increase the usability of the library. Use of the Object type should be restricted to those cases where the specific integer or string type cannot be specified at design time. If the design requires other types for the index, reconsider whether the type represents a logical data store. If it does not represent a logical data store, use a method.",
      "hotToFix": "To fix a violation of this rule, change the index to an integer or string type, or use a method instead of the indexer.",
      "whenToSuppress": "Suppress a warning from this rule only after carefully considering the need for the nonstandard indexer.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182180.aspx"
    }
  },
  {
    "id": "CA1044",
    "message": "Properties should not be write only",
    "description": "Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value, and then preventing the user from viewing that value, does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.",
    "details": {
      "typeName": "PropertiesShouldNotBeWriteOnly",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The public or protected property has a set accessor but does not have a get accessor.",
      "description": "Get accessors provide read access to a property and set accessors provide write access. Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value and then preventing the user from viewing the value does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.",
      "hotToFix": "To fix a violation of this rule, add a get accessor to the property. Alternatively, if the behavior of a write-only property is necessary, consider converting this property to a method.",
      "whenToSuppress": "It is strongly recommended that you do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182165.aspx"
    }
  },
  {
    "id": "CA1045",
    "message": "Do not pass types by reference",
    "description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Library architects who design for a general audience should not expect users to master working with out or ref parameters.",
    "details": {
      "typeName": "DoNotPassTypesByReference",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected method in a public type has a ref parameter that takes a primitive type, a reference type, or a value type that is not one of the built-in types.",
      "description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Also, the difference between out and ref parameters is not widely understood.\nWhen a reference type is passed \"by reference,\" the method intends to use the parameter to return a different instance of the object. (Passing a reference type by reference is also known as using a double pointer, pointer to a pointer, or double indirection.) Using the default calling convention, which is pass \"by value,\" a parameter that takes a reference type already receives a pointer to the object. The pointer, not the object to which it points, is passed by value. Passing by value means that the method cannot change the pointer to have it point to a new instance of the reference type, but can change the contents of the object to which it points. For most applications this is sufficient and yields the behavior that you want.\nIf a method must return a different instance, use the return value of the method to accomplish this. See the System.String class for a variety of methods that operate on strings and return a new instance of a string. By using this model, it is left to the caller to decide whether the original object is preserved.\nAlthough return values are commonplace and heavily used, the correct application of out and ref parameters requires intermediate design and coding skills. Library architects who design for a general audience should not expect users to master working with out or ref parameters.",
      "hotToFix": "To fix a violation of this rule that is caused by a value type, have the method return the object as its return value. If the method must return multiple values, redesign it to return a single instance of an object that holds the values.\nTo fix a violation of this rule that is caused by a reference type, make sure that the behavior that you want is to return a new instance of the reference. If it is, the method should use its return value to do this.",
      "whenToSuppress": "It is safe to suppress a warning from this rule; however, this design could cause usability issues.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182146.aspx"
    }
  },
  {
    "id": "CA1046",
    "message": "Do not overload operator equals on reference types",
    "description": "For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object.",
    "details": {
      "typeName": "DoNotOverloadOperatorEqualsOnReferenceTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or nested public reference type overloads the equality operator.",
      "description": "For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object.",
      "hotToFix": "To fix a violation of this rule, remove the implementation of the equality operator.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the reference type behaves like a built-in value type. If it is meaningful to do addition or subtraction on instances of the type, it is probably correct to implement the equality operator and suppress the violation.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182145.aspx"
    }
  },
  {
    "id": "CA1047",
    "message": "Do not declare protected members in sealed types",
    "description": "Types declare protected members so that inheriting types can access or override the member. By definition, sealed types cannot be inherited, which means that protected methods on sealed types cannot be called.",
    "details": {
      "typeName": "DoNotDeclareProtectedMembersInSealedTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A public type is sealed (NotInheritable in Visual basic) and declares a protected member or a protected nested type. This rule does not report violations for Finalize methods, which must follow this pattern.",
      "description": "Types declare protected members so that inheriting types can access or override the member. By definition, you cannot inherit from a sealed type, which means that protected methods on sealed types cannot be called.\nThe C# compiler issues a warning for this error.",
      "hotToFix": "To fix a violation of this rule, change the access level of the member to private, or make the type inheritable.",
      "whenToSuppress": "Do not suppress a warning from this rule. Leaving the type in its current state can cause maintenance issues and does not provide any benefits.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182138.aspx"
    }
  },
  {
    "id": "CA1048",
    "message": "Do not declare virtual members in sealed types",
    "description": "Types declare methods as virtual so that inheriting types can override the implementation of the virtual method. By definition, a sealed type cannot be inherited. This makes a virtual method on a sealed type meaningless.",
    "details": {
      "typeName": "DoNotDeclareVirtualMembersInSealedTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public type is sealed and declares a method that is both virtual (Overridable in Visual Basic) and not final. This rule does not report violations for delegate types, which must follow this pattern.",
      "description": "Types declare methods as virtual so that inheriting types can override the implementation of the virtual method. By definition, you cannot inherit from a sealed type, making a virtual method on a sealed type meaningless.\nThe Visual Basic .NET and C# compilers do not allow types to violate this rule.",
      "hotToFix": "To fix a violation of this rule, make the method non-virtual or make the type inheritable.",
      "whenToSuppress": "Do not suppress a warning from this rule. Leaving the type in its current state can cause maintenance issues and does not provide any benefits.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182140.aspx"
    }
  },
  {
    "id": "CA1049",
    "message": "Types that own native resources should be disposable",
    "description": "Types that allocate unmanaged resources should implement IDisposable to enable callers to release those resources on demand and to shorten the lifetimes of the objects that hold the resources.",
    "details": {
      "typeName": "TypesThatOwnNativeResourcesShouldBeDisposable",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A type references a System.IntPtr field, a System.UIntPtr field, or a System.Runtime.InteropServices.HandleRef field, but does not implement System.IDisposable.",
      "description": "This rule assumes that IntPtr, UIntPtr, and HandleRef fields store pointers to unmanaged resources. Types that allocate unmanaged resources should implement IDisposable to let callers to release those resources on demand and shorten the lifetimes of the objects that hold the resources.\nThe recommended design pattern to clean up unmanaged resources is to provide both an implicit and an explicit means to free those resources by using the Object.Finalize method and the IDisposable.Dispose method, respectively. The garbage collector calls the Finalize method of an object at some indeterminate time after the object is determined to be no longer reachable. After Finalize is called, an additional garbage collection is required to free the object. The Dispose method allows the caller to explicitly release resources on demand, earlier than the resources would be released if left to the garbage collector. After it cleans up the unmanaged resources, Dispose should call the GC.SuppressFinalize method to let the garbage collector know that Finalize no longer has to be called; this eliminates the need for the additional garbage collection and shortens the lifetime of the object.",
      "hotToFix": "To fix a violation of this rule, implement IDisposable.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the type does not reference an unmanaged resource. Otherwise, do not suppress a warning from this rule because failure to implement IDisposable can cause unmanaged resources to become unavailable or underused.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182173.aspx"
    }
  },
  {
    "id": "CA1050",
    "message": "Declare types in namespaces",
    "description": "Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.",
    "details": {
      "typeName": "DeclareTypesInNamespaces",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected type is defined outside the scope of a named namespace.",
      "description": "Types are declared in namespaces to prevent name collisions, and as a way to organize related types in an object hierarchy. Types that are outside any named namespace are in a global namespace that cannot be referenced in code.",
      "hotToFix": "To fix a violation of this rule, place the type in a namespace.",
      "whenToSuppress": "Although you never have to suppress a warning from this rule, it is safe to do this when the assembly will never be used together with other assemblies.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182134.aspx"
    }
  },
  {
    "id": "CA1051",
    "message": "Do not declare visible instance fields",
    "description": "The primary use of a field should be as an implementation detail. Fields should be private or internal and should be exposed by using properties.",
    "details": {
      "typeName": "DoNotDeclareVisibleInstanceFields",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible type has an externally visible instance field.",
      "description": "The primary use of a field should be as an implementation detail. Fields should be private or internal and should be exposed by using properties. It is as easy to access a property as it is to access a field, and the code in the accessors of a property can change as the features of the type expand without introducing breaking changes. Properties that just return the value of a private or internal field are optimized to perform on par with accessing a field; very little performance gain is associated with the use of externally visible fields over properties.\nExternally visible refers to public, protected, and protected internal (Public, Protected, and Protected Friend in Visual Basic) accessibility levels.",
      "hotToFix": "To fix a violation of this rule, make the field private or internal and expose it by using an externally visible property.",
      "whenToSuppress": "Do not suppress a warning from this rule. Externally visible fields do not provide any benefits that are unavailable to properties. Additionally, public fields cannot be protected by Link Demands. See CA2112: Secured types should not expose fields.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182141.aspx"
    }
  },
  {
    "id": "CA1052",
    "message": "Static holder types should be sealed",
    "description": "A public or protected type contains only static members and is not declared by using the sealed (C# Reference) (NotInheritable) modifier. A type that is not meant to be inherited should be marked by using the sealed modifier to prevent its use as a base type.",
    "details": {
      "typeName": "StaticHolderTypesShouldBeSealed",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or protected type contains only static members and is not declared with the sealed (C# Reference) (NotInheritable (Visual Basic)) modifier.",
      "description": "This rule assumes that a type that contains only static members is not designed to be inherited, because the type does not provide any functionality that can be overridden in a derived type. A type that is not meant to be inherited should be marked with the sealed modifier to prohibit its use as a base type.",
      "hotToFix": "To fix a violation of this rule, mark the type as sealed. If you are targeting .NET Framework 2.0 or earlier, a better approach is to mark the type as static. In this manner, you avoid having to declare a private constructor to prevent the class from being created.",
      "whenToSuppress": "Suppress a warning from this rule only if the type is designed to be inherited. The absence of the sealed modifier suggests that the type is useful as a base type.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182168.aspx"
    }
  },
  {
    "id": "CA1053",
    "message": "Static holder types should not have constructors",
    "description": "A public or nested public type declares only static members and has a public or protected default constructor. The constructor is unnecessary because calling static members does not require an instance of the type. The string overload should call the uniform resource identifier (URI) overload by using the string argument for safety and security.",
    "details": {
      "typeName": "StaticHolderTypesShouldNotHaveConstructors",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A public or nested public type declares only static members and has a public or protected default constructor.",
      "description": "The constructor is unnecessary because calling static members does not require an instance of the type. Also, because the type does not have non-static members, creating an instance does not provide access to any of the type\u0027s members.",
      "hotToFix": "To fix a violation of this rule, remove the default constructor or make it private.",
      "whenToSuppress": "Do not suppress a warning from this rule. The presence of the constructor suggests that the type is not a static type.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182169.aspx"
    }
  },
  {
    "id": "CA1054",
    "message": "URI parameters should not be strings",
    "description": "If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the URI class, which provides these services in a safe and secure manner.",
    "details": {
      "typeName": "UriParametersShouldNotBeStrings",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A type declares a method with a string parameter whose name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\" and the type does not declare a corresponding overload that takes a System.Uri parameter.",
      "description": "This rule splits the parameter name into tokens based on the camel casing convention and checks whether each token equals \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\". If there is a match, the rule assumes that the parameter represents a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the Uri class, which provides these services in a safe and secure manner.",
      "hotToFix": "To fix a violation of this rule, change the parameter to a Uri type; this is a breaking change. Alternately, provide an overload of the method which takes a Uri parameter; this is a nonbreaking change.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the parameter does not represent a URI.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182174.aspx"
    }
  },
  {
    "id": "CA1055",
    "message": "URI return values should not be strings",
    "description": "This rule assumes that the method returns a URI. A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",
    "details": {
      "typeName": "UriReturnValuesShouldNotBeStrings",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "The name of a method contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\", and the method returns a string.",
      "description": "This rule splits the method name into tokens based on the Pascal casing convention and checks whether each token equals \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\". If there is a match, the rule assumes that the method returns a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",
      "hotToFix": "To fix a violation of this rule, change the return type to a Uri.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the return value does not represent a URI.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182176.aspx"
    }
  },
  {
    "id": "CA1056",
    "message": "URI properties should not be strings",
    "description": "This rule assumes that the property represents a Uniform Resource Identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",
    "details": {
      "typeName": "UriPropertiesShouldNotBeStrings",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A type declares a string property whose name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\".",
      "description": "This rule splits the property name into tokens based on the Pascal casing convention and checks whether each token equals \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\". If there is a match, the rule assumes that the property represents a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",
      "hotToFix": "To fix a violation of this rule, change the property to a Uri type.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the property does not represent a URI.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182175.aspx"
    }
  },
  {
    "id": "CA1057",
    "message": "String URI overloads call System.Uri overloads",
    "description": "A type declares method overloads that differ only by the replacement of a string parameter with a System.Uri parameter. The overload that takes the string parameter does not call the overload that takes the URI parameter.",
    "details": {
      "typeName": "StringUriOverloadsCallSystemUriOverloads",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "A type declares method overloads that differ only by the replacement of a string parameter with a System.Uri parameter, and the overload that takes the string parameter does not call the overload that takes the Uri parameter.",
      "description": "Because the overloads differ only by the string/Uri parameter, the string is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The Uri class provides these services in a safe and secure manner. To reap the benefits of the Uri class, the string overload should call the Uri overload using the string argument.",
      "hotToFix": "Re-implement the method that uses the string representation of the URI so that it creates an instance of the Uri class using the string argument, and then passes the Uri object to the overload that has the Uri parameter.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the string parameter does not represent a URI.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182170.aspx"
    }
  },
  {
    "id": "CA1058",
    "message": "Types should not extend certain base types",
    "description": "An externally visible type extends certain base types. Use one of the alternatives.",
    "details": {
      "typeName": "TypesShouldNotExtendCertainBaseTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible type extends certain base types. Currently, this rule reports types that derive from the following types:\nSystem.ApplicationException System.Xml.XmlDocument System.Collections.CollectionBase System.Collections.DictionaryBase System.Collections.Queue System.Collections.ReadOnlyCollectionBase System.Collections.SortedList System.Collections.Stack",
      "description": "For .NET Framework version 1, it was recommended to derive new exceptions from ApplicationException. The recommendation has changed and new exceptions should derive from System.Exception or one of its subclasses in the System namespace.\nDo not create a subclass of XmlDocument if you want to create an XML view of an underlying object model or data source.",
      "hotToFix": "To fix a violation of this rule, derive the type from a different base type or a generic collection.",
      "whenToSuppress": "Do not suppress a warning from this rule for violations about ApplicationException. It is safe to suppress a warning from this rule for violations about XmlDocument. It is safe to suppress a warning about a non-generic collection if the code was released previously.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182171.aspx"
    }
  },
  {
    "id": "CA1059",
    "message": "Members should not expose certain concrete types",
    "description": "A concrete type is a type that has a complete implementation and therefore can be instantiated. To enable widespread use of the member, replace the concrete type by using the suggested interface.",
    "details": {
      "typeName": "MembersShouldNotExposeCertainConcreteTypes",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "An externally visible member is a certain concrete type or exposes certain concrete types through one of its parameters or return value. Currently, this rule reports exposure of the following concrete types:\nA type derived from System.Xml.XmlNode.",
      "description": "A concrete type is a type that has a complete implementation and therefore can be instantiated. To allow widespread use of the member, replace the concrete type with the suggested interface. This allows the member to accept any type that implements the interface or be used where a type that implements the interface is expected.\nThe following table lists the targeted concrete types and their suggested replacements.",
      "hotToFix": "To fix a violation of this rule, change the concrete type to the suggested interface.",
      "whenToSuppress": "It is safe to suppress a message from this rule if the specific functionality provided by the concrete type is required.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182160.aspx"
    }
  },
  {
    "id": "CA1060",
    "message": "Move P/Invokes to NativeMethods class",
    "description": "Platform Invocation methods, such as those that are marked by using the System.Runtime.InteropServices.DllImportAttribute attribute, or methods that are defined by using the Declare keyword in Visual Basic, access unmanaged code. These methods should be of the NativeMethods, SafeNativeMethods, or UnsafeNativeMethods class.",
    "details": {
      "typeName": "MovePInvokesToNativeMethodsClass",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A method uses Platform Invocation Services to access unmanaged code and is not a member of one of the NativeMethods classes.",
      "description": "Platform Invocation methods, such as those that are marked by using the System.Runtime.InteropServices.DllImportAttribute attribute, or methods that are defined by using the Declare keyword in Visual Basic, access unmanaged code. These methods should be in one of the following classes:\nNativeMethods - This class does not suppress stack walks for unmanaged code permission. (System.Security.SuppressUnmanagedCodeSecurityAttribute must not be applied to this class.) This class is for methods that can be used anywhere because a stack walk will be performed. SafeNativeMethods - This class suppresses stack walks for unmanaged code permission. (System.Security.SuppressUnmanagedCodeSecurityAttribute is applied to this class.) This class is for methods that are safe for anyone to call. Callers of these methods are not required to perform a full security review to make sure that the usage is secure because the methods are harmless for any caller. UnsafeNativeMethods - This class suppresses stack walks for unmanaged code permission. (System.Security.SuppressUnmanagedCodeSecurityAttribute is applied to this class.) This class is for methods that are potentially dangerous. Any caller of these methods must perform a full security review to make sure that the usage is secure because no stack walk will be performed.\nThese classes are declared as internal (Friend, in Visual Basic) and declare a private constructor to prevent new instances from being created. The methods in these classes should be static and internal (Shared and Friend in Visual Basic).",
      "hotToFix": "To fix a violation of this rule, move the method to the appropriate NativeMethods class. For most applications, moving P/Invokes to a new class that is named NativeMethods is enough.\nHowever, if you are developing libraries for use in other applications, you should consider defining two other classes that are called SafeNativeMethods and UnsafeNativeMethods. These classes resemble the NativeMethods class; however, they are marked by using a special attribute called SuppressUnmanagedCodeSecurityAttribute. When this attribute is applied, the runtime does not perform a full stack walk to make sure that all callers have the UnmanagedCode permission. The runtime ordinarily checks for this permission at startup. Because the check is not performed, it can greatly improve performance for calls to these unmanaged methods, It also enables code that has limited permissions to call these methods.\nHowever, you should use this attribute with great care. It can have serious security implications if it is implemented incorrectly..\nFor information about how to implement the methods, see the NativeMethods Example, SafeNativeMethods Example, and UnsafeNativeMethods Example.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182161.aspx"
    }
  },
  {
    "id": "CA1061",
    "message": "Do not hide base class methods",
    "description": "A method in a base type is hidden by an identically named method in a derived type, when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method.",
    "details": {
      "typeName": "DoNotHideBaseClassMethods",
      "category": "Microsoft.Design",
      "breakingChange": "Breaking",
      "cause": "A derived type declares a method with the same name and with the same number of parameters as one of its base methods; one or more of the parameters is a base type of the corresponding parameter in the base method; and any remaining parameters have types that are identical to the corresponding parameters in the base method.",
      "description": "A method in a base type is hidden by an identically named method in a derived type when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method.",
      "hotToFix": "To fix a violation of this rule, remove or rename the method, or change the parameter signature so that the method does not hide the base method.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182143.aspx"
    }
  },
  {
    "id": "CA1062",
    "message": "Validate arguments of public methods",
    "description": "All reference arguments that are passed to externally visible methods should be checked against null.",
    "details": {
      "typeName": "ValidateArgumentsOfPublicMethods",
      "category": "Microsoft.Design",
      "breakingChange": "Non Breaking",
      "cause": "An externally visible method dereferences one of its reference arguments without verifying whether that argument is null (Nothing in Visual Basic).",
      "description": "All reference arguments that are passed to externally visible methods should be checked against null. If appropriate, throw a ArgumentNullException when the argument is null.\nIf a method can be called from an unknown assembly because it is declared public or protected, you should validate all parameters of the method. If the method is designed to be called only by known assemblies, you should make the method internal and apply the InternalsVisibleToAttribute attribute to the assembly that contains the method.",
      "hotToFix": "To fix a violation of this rule, validate each reference argument against null.",
      "whenToSuppress": "You can suppress a warning from this rule if you are sure that the dereferenced parameter has been validated by another method call in the function.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182182.aspx"
    }
  },
  {
    "id": "CA1063",
    "message": "Implement IDisposable correctly",
    "description": "All IDisposable types should implement the Dispose pattern correctly.",
    "details": {
      "typeName": "ImplementIDisposableCorrectly",
      "category": "Microsoft.Design",
      "breakingChange": "Non-breaking",
      "cause": "IDisposable is not implemented correctly. Some reasons for this problem are listed here:\nIDisposable is re-implemented in the class. Finalize is re-overridden. Dispose is overridden. Dispose() is not public, sealed, or named Dispose. Dispose(bool) is not protected, virtual, or unsealed. In unsealed types, Dispose() must call Dispose(true). For unsealed types, the Finalize implementation does not call either or both Dispose(bool) or the case class finalizer.\nViolation of any one of these patterns will trigger this warning.\nEvery unsealed root IDisposable type must provide its own protected virtual void Dispose(bool) method. Dispose() should call Dipose(true) and Finalize should call Dispose(false). If you are creating an unsealed root IDisposable type, you must define Dispose(bool) and call it. For more information, see Cleaning Up Unmanaged Resources in the Framework Design Guidelines section of the .NET Framework documentation.",
      "description": "All IDisposable types should implement the Dispose pattern correctly.",
      "hotToFix": "Examine your code and determine which of the following resolutions will fix this violation.\nRemove IDisposable from the list of interfaces that are implemented by {0} and override the base class Dispose implementation instead. Remove the finalizer from type {0}, override Dispose(bool disposing), and put the finalization logic in the code path where \u0027disposing\u0027 is false. Remove {0}, override Dispose(bool disposing), and put the dispose logic in the code path where \u0027disposing\u0027 is true. Ensure that {0} is declared as public and sealed. Rename {0} to \u0027Dispose\u0027 and make sure that it is declared as public and sealed. Make sure that {0} is declared as protected, virtual, and unsealed. Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance (\u0027this\u0027 or \u0027Me\u0027 in Visual Basic), and then returns. Modify {0} so that it calls Dispose(false) and then returns. If you are writing an unsealed root IDisposable class, make sure that the implementation of IDisposable follows the pattern that is described earlier in this section.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms244737.aspx"
    }
  },
  {
    "id": "CA1064",
    "message": "Exceptions should be public",
    "description": "An internal exception is visible only inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from T:System.Exception, T:System.SystemException, or T:System.ApplicationException, the external code will not have sufficient information to know what to do with the exception.",
    "details": {
      "typeName": "ExceptionsShouldBePublic",
      "category": "Microsoft.Design",
      "breakingChange": "Non Breaking",
      "cause": "A non-public exception derives directly from Exception, SystemException, or ApplicationException.",
      "description": "An internal exception is only visible inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from Exception, SystemException, or ApplicationException, the external code will not have sufficient information to know what to do with the exception.\nBut, if the code has a public exception that later is used as the base for a internal exception, it is reasonable to assume the code further out will be able to do something intelligent with the base exception. The public exception will have more information than what is provided by T:System.Exception, T:System.SystemException, or T:System.ApplicationException.",
      "hotToFix": "Make the exception public, or derive the internal exception from a public exception that is not Exception, SystemException, or ApplicationException.",
      "whenToSuppress": "Suppress a message from this rule if you are sure in all cases that the private exception will be caught within its own internal scope.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264484.aspx"
    }
  },
  {
    "id": "CA1065",
    "message": "Do not raise exceptions in unexpected locations",
    "description": "A method that is not expected to throw exceptions throws an exception.",
    "details": {
      "typeName": "DoNotRaiseExceptionsInUnexpectedLocations",
      "category": "Microsoft.Design",
      "breakingChange": "Non Breaking",
      "cause": "A method that is not expected to throw exceptions throws an exception.",
      "description": "Methods that are not expected to throw exceptions can be categorized as follows:\nProperty Get Methods Event Accessor Methods Equals Methods GetHashCode Methods ToString Methods Static Constructors Finalizers Dispose Methods Equality Operators Implicit Cast Operators\nThe following sections discuss these method types.",
      "hotToFix": "For property getters, either change the logic so that it no longer has to throw an exception, or change the property into a method.\nFor all other method types listed previously, change the logic so that it no longer must throw an exception.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the violation was caused by an exception declaration instead of a thrown exception.",
      "url": "http://msdn.microsoft.com/en-us/library/bb386039.aspx"
    }
  },
  {
    "id": "CA1300",
    "message": "Specify MessageBoxOptions",
    "description": "To correctly display a message box for cultures that use a right-to-left reading order, the RightAlign and RtlReading members of the MessageBoxOptions enumeration must be passed to the Show method.",
    "details": {
      "typeName": "SpecifyMessageBoxOptions",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A method calls an overload of the MessageBox.Show method that does not take a System.Windows.Forms.MessageBoxOptions argument.",
      "description": "To display a message box correctly for cultures that use a right-to-left reading order, the RightAlign and RtlReading members of the MessageBoxOptions enumeration must be passed to the Show method. Examine the Control.RightToLeft property of the containing control to determine whether to use a right-to-left reading order.",
      "hotToFix": "To fix a violation of this rule, call an overload of the Show method that takes a MessageBoxOptions argument.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the code library will not be localized for a culture that uses a right-to-left reading order.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182191.aspx"
    }
  },
  {
    "id": "CA1301",
    "message": "Avoid duplicate accelerators",
    "description": "An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined.",
    "details": {
      "typeName": "AvoidDuplicateAccelerators",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A type extends System.Windows.Forms.Control and contains two or more top level controls that have identical access keys that are stored in a resource file.",
      "description": "An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined. The user might not be able to access the intended control by using the access key and a control other than the one that is intended might be enabled.\nThe current implementation of this rule ignores menu items. However, menu items in the same submenu should not have identical access keys.",
      "hotToFix": "To fix a violation of this rule, define unique access keys for all controls.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182185.aspx"
    }
  },
  {
    "id": "CA1302",
    "message": "Do not hardcode locale specific strings",
    "description": "The System.Environment.SpecialFolder enumeration contains members that refer to special system folders. The locations of these folders can have different values on different operating systems; the user can change some of the locations; and the locations are localized. The Environment.GetFolderPath method returns the locations that are associated with the Environment.SpecialFolder enumeration, localized and appropriate for the currently running computer.",
    "details": {
      "typeName": "DoNotHardcodeLocaleSpecificStrings",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A method uses a string literal that represents part of the path of certain system folders.",
      "description": "The System.Environment.SpecialFolder enumeration contains members that refer to special system folders. The locations of these folders can have different values on different operating systems, the user can change some of the locations, and the locations are localized. An example of a special folder is the System folder, which is \"C:\\WINDOWS\\system32\" on Windows XP but \"C:\\WINNT\\system32\" on Windows 2000. The Environment.GetFolderPath method returns the locations that are associated with the Environment.SpecialFolder enumeration. The locations that are returned by GetFolderPath are localized and appropriate for the currently running computer.\nThis rule tokenizes the folder paths that are retrieved by using the GetFolderPath method into separate directory levels. Each string literal is compared to the tokens. If a match is found, it is assumed that the method is building a string that refers to the system location that is associated with the token. For portability and localizability, use the GetFolderPath method to retrieve the locations of the special system folders instead of using string literals.",
      "hotToFix": "To fix a violation of this rule, retrieve the location by using the GetFolderPath method.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the string literal is not used to refer to one of the system locations that is associated with the Environment.SpecialFolder enumeration.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182186.aspx"
    }
  },
  {
    "id": "CA1303",
    "message": "Do not pass literals as localized parameters",
    "description": "An externally visible method passes a string literal as a parameter to a constructor or method in the .NET Framework class library, and that string should be localizable.",
    "details": {
      "typeName": "DoNotPassLiteralsAsLocalizedParameters",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non Breaking",
      "cause": "A method passes a string literal as a parameter to a constructor or method in the .NET Framework class library and that string should be localizable.\nThis warning is raised when a literal string is passed as a value to a parameter or property and one or more of the following cases is true:\nThe LocalizableAttribute attribute of the parameter or property is set to true. The parameter or property name contains \"Text\", \"Message\", or \"Caption\". The name of the string parameter that is passed to a Console.Write or Console.WriteLine method is either \"value\" or \"format\".",
      "description": "String literals that are embedded in source code are difficult to localize.",
      "hotToFix": "To fix a violation of this rule, replace the string literal with a string retrieved through an instance of the ResourceManager class.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the code library will not be localized, or if the string is not exposed to the end user or a developer using the code library.\nUsers can eliminate noise against methods which should not be passed localized strings by either renaming the parameter or property named, or by marking these items as conditional.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182187.aspx"
    }
  },
  {
    "id": "CA1304",
    "message": "Specify CultureInfo",
    "description": "A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.",
    "details": {
      "typeName": "SpecifyCultureInfo",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. This rule ignores calls to the following methods:\nActivator.CreateInstance ResourceManager.GetObject ResourceManager.GetString",
      "description": "When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. Also, .NET Framework members choose default culture and formatting based on assumptions that might not be correct for your code. To ensure the code works as expected for your scenarios, you should supply culture-specific information according to the following guidelines:\nIf the value will be displayed to the user, use the current culture. See CultureInfo.CurrentCulture. If the value will be stored and accessed by software, that is, persisted to a file or database, use the invariant culture. See CultureInfo.InvariantCulture. If you do not know the destination of the value, have the data consumer or provider specify the culture.\nNote that CultureInfo.CurrentUICulture is used only to retrieve localized resources by using an instance of the System.Resources.ResourceManager class.\nEven if the default behavior of the overloaded member is appropriate for your needs, it is better to explicitly call the culture-specific overload so that your code is self-documenting and more easily maintained.",
      "hotToFix": "To fix a violation of this rule, use the overload that takes a CultureInfo or IFormatProvider and specify the argument according to the guidelines that were listed earlier.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when it is certain that the default culture/format provider is the correct choice, and where code maintainability is not an important development priority.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182189.aspx"
    }
  },
  {
    "id": "CA1305",
    "message": "Specify IFormatProvider",
    "description": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.",
    "details": {
      "typeName": "SpecifyIFormatProvider",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the IFormatProvider parameter and additionally the following methods:\nActivator.CreateInstance ResourceManager.GetObject ResourceManager.GetString",
      "description": "When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. Also, .NET Framework members choose default culture and formatting based on assumptions that might not be correct for your code. To make sure that the code works as expected for your scenarios, you should supply culture-specific information according to the following guidelines:\nIf the value will be displayed to the user, use the current culture. See CultureInfo.CurrentCulture. If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See CultureInfo.InvariantCulture. If you do not know the destination of the value, have the data consumer or provider specify the culture.\nNote that CultureInfo.CurrentUICulture is used only to retrieve localized resources by using an instance of the System.Resources.ResourceManager class.\nEven if the default behavior of the overloaded member is appropriate for your needs, it is better to explicitly call the culture-specific overload so that your code is self-documenting and more easily maintained.",
      "hotToFix": "To fix a violation of this rule, use the overload that takes a CultureInfo or IFormatProvider and specify the argument according to the guidelines that were listed earlier.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when it is certain that the default culture/format provider is the correct choice and where code maintainability is not an important development priority.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182190.aspx"
    }
  },
  {
    "id": "CA1306",
    "message": "Set locale for data types",
    "description": "The locale determines culture-specific presentation elements for data, such as formatting that is used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should explicitly set the locale.",
    "details": {
      "typeName": "SetLocaleForDataTypes",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A method or constructor created one or more System.Data.DataTable or System.Data.DataSet instances and did not explicitly set the locale property (DataTable.Locale or DataSet.Locale).",
      "description": "The locale determines culture-specific presentation elements for data, such as formatting used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should set the locale explicitly. By default, the locale for these types is the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant culture (CultureInfo.InvariantCulture). When data is shared across cultures, using the default locale can cause the contents of the DataTable or DataSet to be presented or interpreted incorrectly.",
      "hotToFix": "To fix a violation of this rule, explicitly set the locale for the DataTable or DataSet.",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the library or application is for a limited local audience, the data is not shared, or the default setting yields the desired behavior in all supported scenarios.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182188.aspx"
    }
  },
  {
    "id": "CA1307",
    "message": "Specify StringComparison",
    "description": "A string comparison operation uses a method overload that does not set a StringComparison parameter.",
    "details": {
      "typeName": "SpecifyStringComparison",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A string comparison operation uses a method overload that does not set a StringComparison parameter.",
      "description": "Many string operations, most important the Compare and Equals methods, provide an overload that accepts a StringComparison enumeration value as a parameter.\nWhenever an overload exists that takes a StringComparison parameter, it should be used instead of an overload that does not take this parameter. By explicitly setting this parameter, your code is often made clearer and easier to maintain.",
      "hotToFix": "To fix a violation of this rule, change string comparison methods to overloads that accept the StringComparison enumeration as a parameter. For example: change String.Compare(str1, str2) to String.Compare(str1, str2, StringComparison.Ordinal).",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the library or application is intended for a limited local audience and will therefore not be localized.",
      "url": "http://msdn.microsoft.com/en-us/library/bb386080.aspx"
    }
  },
  {
    "id": "CA1308",
    "message": "Normalize strings to uppercase",
    "description": "Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase.",
    "details": {
      "typeName": "NormalizeStringsToUppercase",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "An operation normalizes a string to lowercase.",
      "description": "Strings should be normalized to uppercase. A small group of characters, when they are converted to lowercase, cannot make a round trip. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters.",
      "hotToFix": "Change operations that convert strings to lowercase so that the strings are converted to uppercase instead. For example, change String.ToLower(CultureInfo.InvariantCulture) to String.ToUpper(CultureInfo.InvariantCulture).",
      "whenToSuppress": "It is safe to suppress a warning message when you are not making security decision based on the result (for example, when you are displaying it in the UI).",
      "url": "http://msdn.microsoft.com/en-us/library/bb386042.aspx"
    }
  },
  {
    "id": "CA1309",
    "message": "Use ordinal StringComparison",
    "description": "A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable.",
    "details": {
      "typeName": "UseOrdinalStringComparison",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase.",
      "description": "Many string operations, most important the String.Compare and String.Equals methods, now provide an overload that accepts a StringComparision enumeration value as a parameter.\nWhen you specify either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, the string comparison will be nonlinguistic. That is, the features that are specific to the natural language are ignored when comparison decisions are made. This means the decisions are based on simple byte comparisons and ignore casing or equivalence tables that are parameterized by culture. As a result, by explicitly setting the parameter to either the StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, increases correctness, and becomes more reliable.",
      "hotToFix": "To fix a violation of this rule, change the string comparison method to an overload that accepts the System.StringComparison enumeration as a parameter, and specify either Ordinal or OrdinalIgnoreCase. For example, change String.Compare(str1, str2) to String.Compare(str1, str2, StringComparison.Ordinal).",
      "whenToSuppress": "It is safe to suppress a warning from this rule when the library or application is intended for a limited local audience or when the semantics of the current culture should be used.",
      "url": "http://msdn.microsoft.com/en-us/library/bb385972.aspx"
    }
  },
  {
    "id": "CA1400",
    "message": "P/Invoke entry points should exist",
    "description": "A public or protected method is marked by using the System.Runtime.InteropServices.DllImportAttribute attribute. Either the unmanaged library could not be located or the method could not be matched to a function in the library.",
    "details": {
      "typeName": "PInvokeEntryPointsShouldExist",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Non-breaking",
      "cause": "A public or protected method is marked with the System.Runtime.InteropServices.DllImportAttribute. Either the unmanaged library could not be located or the method could not be matched to a function in the library. If the rule cannot find the method name exactly as it is specified, it looks for ANSI or wide-character versions of the method by suffixing the method name with \u0027A\u0027 or \u0027W\u0027. If no match is found, the rule attempts to locate a function by using the __stdcall name format (_MyMethod@12, where 12 represents the length of the arguments). If no match is found, and the method name starts with \u0027#\u0027, the rule searches for the function as an ordinal reference instead of a name reference.",
      "description": "No compile-time check is available to make sure that methods that are marked with DllImportAttribute are located in the referenced unmanaged DLL. If no function that has the specified name is in the library, or the arguments to the method do not match the function arguments, the common language runtime throws an exception.",
      "hotToFix": "To fix a violation of this rule, correct the method that has the DllImportAttribute attribute. Make sure that the unmanaged library exists and is in the same directory as the assembly that contains the method. If the library is present and correctly referenced, verify that the method name, return type, and argument signature match the library function.",
      "whenToSuppress": "Do not suppress a warning from this rule when the unmanaged library is in the same directory as the managed assembly that references it. It might be safe to suppress a warning from this rule in the case where the unmanaged library could not be located.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182208.aspx"
    }
  },
  {
    "id": "CA1401",
    "message": "P/Invokes should not be visible",
    "description": "A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed.",
    "details": {
      "typeName": "PInvokesShouldNotBeVisible",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic).",
      "description": "Methods that are marked with the DllImportAttribute attribute (or methods that are defined by using the Declare keyword in Visual Basic) use Platform Invocation Services to access unmanaged code. Such methods should not be exposed. By keeping these methods private or internal, you make sure that your library cannot be used to breach security by allowing callers access to unmanaged APIs that they could not call otherwise.",
      "hotToFix": "To fix a violation of this rule, change the access level of the method.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182209.aspx"
    }
  },
  {
    "id": "CA1402",
    "message": "Avoid overloads in COM visible interfaces",
    "description": "When overloaded methods are exposed to COM clients, only the first method overload retains its name. Subsequent overloads are uniquely renamed by appending to the name an underscore character (_) and an integer that corresponds to the order of declaration of the overload.",
    "details": {
      "typeName": "AvoidOverloadsInComVisibleInterfaces",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A Component Object Model (COM) visible interface declares overloaded methods.",
      "description": "When overloaded methods are exposed to COM clients, only the first method overload retains its name. Subsequent overloads are uniquely renamed by appending to the name an underscore character \u0027_\u0027 and an integer that corresponds to the order of declaration of the overload. For example, consider the following methods.\nThese methods are exposed to COM clients as the following.\nVisual Basic 6 COM clients cannot implement interface methods by using an underscore in the name.",
      "hotToFix": "To fix a violation of this rule, rename the overloaded methods so that the names are unique. Alternatively, make the interface invisible to COM by changing the accessibility to internal (Friend in Visual Basic) or by applying the System.Runtime.InteropServices.ComVisibleAttribute attribute set to false.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182197.aspx"
    }
  },
  {
    "id": "CA1403",
    "message": "Auto layout types should not be COM visible",
    "description": "A COM-visible value type is marked by using the System.Runtime.InteropServices.StructLayoutAttribute attribute set to LayoutKind.Auto. The layout of these types can change between versions of the .NET Framework, which will break COM clients that expect a specific layout.",
    "details": {
      "typeName": "AutoLayoutTypesShouldNotBeComVisible",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A Component Object Model (COM) visible value type is marked with the System.Runtime.InteropServices.StructLayoutAttribute attribute set to LayoutKind.Auto.",
      "description": "Auto layout types are managed by the common language runtime. The layout of these types can change between versions of the .NET Framework, which will break COM clients that expect a specific layout. Note that if the StructLayoutAttribute attribute is not specified, the C#, Visual Basic, and C++ compilers specify the Sequential layout for value types.\nUnless marked otherwise, all public nongeneric types are visible to COM; all nonpublic and generic types are invisible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the System.Runtime.InteropServices.ComVisibleAttribute set to false and the type must be marked with the ComVisibleAttribute set to true.",
      "hotToFix": "To fix a violation of this rule, change the value of the StructLayoutAttribute attribute to Explicit or Sequential, or make the type invisible to COM.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182194.aspx"
    }
  },
  {
    "id": "CA1404",
    "message": "Call GetLastError immediately after P/Invoke",
    "description": "A call is made to the Marshal.GetLastWin32Error method or the equivalent Win32 GetLastError function, and the immediately previous call is not to an operating system invoke method.",
    "details": {
      "typeName": "CallGetLastErrorImmediatelyAfterPInvoke",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Non-breaking",
      "cause": "A call is made to the Marshal.GetLastWin32Error method or the equivalent Win32 GetLastError function, and the call that comes immediately before is not to a platform invoke method.",
      "description": "A platform invoke method accesses unmanaged code and is defined by using the Declare keyword in Visual Basic or the System.Runtime.InteropServices.DllImportAttribute attribute. Generally, upon failure, unmanaged functions call the Win32 SetLastError function to set an error code that is associated with the failure. The caller of the failed function calls the Win32 GetLastError function to retrieve the error code and determine the cause of the failure. The error code is maintained on a per-thread basis and is overwritten by the next call to SetLastError. After a call to a failed platform invoke method, managed code can retrieve the error code by calling the GetLastWin32Error method. Because the error code can be overwritten by internal calls from other managed class library methods, the GetLastError or GetLastWin32Error method should be called immediately after the platform invoke method call.\nThe rule ignores calls to the following managed members when they occur between the call to the platform invoke method and the call to GetLastWin32Error. These members do not change the error code and are useful for determining the success of some platform invoke method calls.\nIntPtr.Zero IntPtr.Equality IntPtr.Inequality SafeHandle.IsInvalid",
      "hotToFix": "To fix a violation of this rule, move the call to GetLastWin32Error so that it immediately follows the call to the platform invoke method.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the code between the platform invoke method call and the GetLastWin32Error method call cannot explicitly or implicitly cause the error code to change.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182199.aspx"
    }
  },
  {
    "id": "CA1405",
    "message": "COM visible type base types should be COM visible",
    "description": "A COM-visible type derives from a type that is not COM-visible.",
    "details": {
      "typeName": "ComVisibleTypeBaseTypesShouldBeComVisible",
      "category": "Microsoft.Interoperability",
      "breakingChange": "DependsOnFix",
      "cause": "A Component Object Model (COM) visible type derives from a type that is not COM visible.",
      "description": "When a COM visible type adds members in a new version, it must abide by strict guidelines to avoid breaking COM clients that bind to the current version. A type that is invisible to COM presumes it does not have to follow these COM versioning rules when it adds new members. However, if a COM visible type derives from the COM invisible type and exposes a class interface of ClassInterfaceType.AutoDual or AutoDispatch (the default), all public members of the base type (unless they are specifically marked as COM invisible, which would be redundant) are exposed to COM. If the base type adds new members in a subsequent version, any COM clients that bind to the class interface of the derived type might break. COM visible types should derive only from COM visible types to reduce the chance of breaking COM clients.",
      "hotToFix": "To fix a violation of this rule, make the base types COM visible or the derived type COM invisible.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182202.aspx"
    }
  },
  {
    "id": "CA1406",
    "message": "Avoid Int64 arguments for Visual Basic 6 clients",
    "description": "Visual Basic 6 COM clients cannot access 64-bit integers.",
    "details": {
      "typeName": "AvoidInt64ArgumentsForVB6Clients",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A type that is specifically marked as visible to Component Object Model (COM) declares a member that takes a System.Int64 argument.",
      "description": "Visual Basic 6 COM clients cannot access 64-bit integers.\nBy default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the System.Runtime.InteropServices.ComVisibleAttribute set to false and the type must be marked with the ComVisibleAttribute set to true.",
      "hotToFix": "To fix a violation of this rule for a parameter whose value can always be expressed as a 32-bit integral, change the parameter type to System.Int32. If the value of the parameter might be larger than can be expressed as a 32-bit integral, change the parameter type to System.Decimal. Note that both System.Single and System.Double lose precision at the upper ranges of the Int64 data type. If the member is not meant to be visible to COM, mark it with the ComVisibleAttribute set to false.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if it is certain that Visual Basic 6 COM clients will not access the type.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182195.aspx"
    }
  },
  {
    "id": "CA1407",
    "message": "Avoid static members in COM visible types",
    "description": "COM does not support static methods.",
    "details": {
      "typeName": "AvoidStaticMembersInComVisibleTypes",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Non-breaking",
      "cause": "A type that is specifically marked as visible to Component Object Model (COM) contains a public static method.",
      "description": "COM does not support static methods.\nThis rule ignores property and event accessors, operator overloading methods, or methods that are marked by using either the System.Runtime.InteropServices.ComRegisterFunctionAttribute attribute or the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute.\nBy default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types.\nFor this rule to occur, an assembly-level ComVisibleAttribute must be set to false and the class- ComVisibleAttribute must be set to true, as the following code shows.",
      "hotToFix": "To fix a violation of this rule, change the design to use an instance method that provides the same functionality as the static method.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if a COM client does not require access to the functionality that is provided by the static method.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182198.aspx"
    }
  },
  {
    "id": "CA1408",
    "message": "Do not use AutoDual ClassInterfaceType",
    "description": "Types that use a dual interface enable clients to bind to a specific interface layout. Any changes in a future version to the layout of the type or any base types will break COM clients that bind to the interface. By default, if the ClassInterfaceAttribute attribute is not specified, a dispatch-only interface is used.",
    "details": {
      "typeName": "DoNotUseAutoDualClassInterfaceType",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A Component Object Model (COM) visible type is marked with the ClassInterfaceAttribute attribute set to the AutoDual value of ClassInterfaceType.",
      "description": "Types that use a dual interface enable clients to bind to a specific interface layout. Any changes in a future version to the layout of the type or any base types will break COM clients that bind to the interface. By default, if the ClassInterfaceAttribute attribute is not specified, a dispatch-only interface is used.\nUnless marked otherwise, all public nongeneric types are visible to COM; all nonpublic and generic types are invisible to COM.",
      "hotToFix": "To fix a violation of this rule, change the value of the ClassInterfaceAttribute attribute to the None value of ClassInterfaceType and explicitly define the interface.",
      "whenToSuppress": "Do not suppress a warning from this rule unless it is certain that the layout of the type and its base types will not change in a future version.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182205.aspx"
    }
  },
  {
    "id": "CA1409",
    "message": "Com visible types should be creatable",
    "description": "A reference type that is specifically marked as visible to COM contains a public parameterized constructor but does not contain a public default (parameterless) constructor. A type without a public default constructor is not creatable by COM clients.",
    "details": {
      "typeName": "ComVisibleTypesShouldBeCreatable",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Non-breaking",
      "cause": "A reference type that is specifically marked as visible to Component Object Model (COM) contains a public parameterized constructor but does not contain a public default (parameterless) constructor.",
      "description": "A type without a public default constructor cannot be created by COM clients. However, the type can still be accessed by COM clients if another means is available to create the type and pass it to the client (for example, through the return value of a method call).\nThe rule ignores types that are derived from System.Delegate.\nBy default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types.",
      "hotToFix": "To fix a violation of this rule, add a public default constructor or remove the System.Runtime.InteropServices.ComVisibleAttribute from the type.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if other ways are provided to create and pass the object to the COM client.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182203.aspx"
    }
  },
  {
    "id": "CA1410",
    "message": "COM registration methods should be matched",
    "description": "A type declares a method that is marked by using the System.Runtime.InteropServices.ComRegisterFunctionAttribute attribute but does not declare a method marked by using the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute, or vice versa.",
    "details": {
      "typeName": "ComRegistrationMethodsShouldBeMatched",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Non-breaking",
      "cause": "A type declares a method that is marked with the System.Runtime.InteropServices.ComRegisterFunctionAttribute attribute but does not declare a method that is marked with the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute, or vice versa.",
      "description": "For Component Object Model (COM) clients to create a .NET Framework type, the type must first be registered. If it is available, a method that is marked with the ComRegisterFunctionAttribute attribute is called during the registration process to run user-specified code. A corresponding method that is marked with the ComUnregisterFunctionAttribute attribute is called during the unregistration process to reverse the operations of the registration method.",
      "hotToFix": "To fix a violation of this rule, add the corresponding registration or unregistration method.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182200.aspx"
    }
  },
  {
    "id": "CA1411",
    "message": "COM registration methods should not be visible",
    "description": "A method marked by using the System.Runtime.InteropServices.ComRegisterFunctionAttribute attribute or the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute is externally visible.",
    "details": {
      "typeName": "ComRegistrationMethodsShouldNotBeVisible",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A method that is marked with the System.Runtime.InteropServices.ComRegisterFunctionAttribute or the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute is externally visible.",
      "description": "When an assembly is registered with Component Object Model (COM), entries are added to the registry for each COM-visible type in the assembly. Methods that are marked with the ComRegisterFunctionAttribute and ComUnregisterFunctionAttribute attributes are called during the registration and unregistration processes, respectively, to run user code that is specific to the registration/unregistration of these types. This code should not be called outside these processes.",
      "hotToFix": "To fix a violation of this rule, change the accessibility of the method to private or internal (Friend in Visual Basic).",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182201.aspx"
    }
  },
  {
    "id": "CA1412",
    "message": "Mark ComSource Interfaces as IDispatch",
    "description": "A type is marked by using the System.Runtime.InteropServices.ComSourceInterfacesAttribute attribute, and at least one of the specified interfaces is not marked by using the System.Runtime.InteropServices.InterfaceTypeAttribute attribute set to ComInterfaceType.InterfaceIsIDispatch.",
    "details": {
      "typeName": "MarkComSourceInterfacesAsIDispatch",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A type is marked with the ComSourceInterfacesAttribute attribute and at least one specified interface is not marked with the InterfaceTypeAttribute attribute set to the InterfaceIsDispatch value.",
      "description": "ComSourceInterfacesAttribute is used to identify the event interfaces that a class exposes to Component Object Model (COM) clients. These interfaces must be exposed as InterfaceIsIDispatch to enable Visual Basic 6 COM clients to receive event notifications. By default, if an interface is not marked with the InterfaceTypeAttribute attribute, it is exposed as a dual interface.",
      "hotToFix": "To fix a violation of this rule, add or modify the InterfaceTypeAttribute attribute so that its value is set to InterfaceIsIDispatch for all interfaces that are specified with the ComSourceInterfacesAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182207.aspx"
    }
  },
  {
    "id": "CA1413",
    "message": "Avoid non-public fields in COM visible value types",
    "description": "Nonpublic instance fields of COM-visible value types are visible to COM clients. Review the content of the fields for information that should not be exposed, or that will have unintended design or security effects.",
    "details": {
      "typeName": "AvoidNonpublicFieldsInComVisibleValueTypes",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A value type that is specifically marked as visible to Component Object Model (COM) declares a nonpublic instance field.",
      "description": "Nonpublic instance fields of COM-visible value types are visible to COM clients. Review the content of the field for information that should not be exposed, or that will have an unintended design or security effect.\nBy default, all public value types are visible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated. The containing assembly must be marked with the System.Runtime.InteropServices.ComVisibleAttribute set to false and the type must be marked with the ComVisibleAttribute set to true.",
      "hotToFix": "To fix a violation of this rule and keep the field hidden, change the value type to a reference type or remove the ComVisibleAttribute attribute from the type.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if public exposure of the field is acceptable.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182196.aspx"
    }
  },
  {
    "id": "CA1414",
    "message": "Mark boolean P/Invoke arguments with MarshalAs",
    "description": "The Boolean data type has multiple representations in unmanaged code.",
    "details": {
      "typeName": "MarkBooleanPInvokeArgumentsWithMarshalAs",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Breaking",
      "cause": "A platform invoke method declaration includes a System.Boolean parameter or return value but the System.Runtime.InteropServices.MarshalAsAttribute attribute is not applied to the parameter or return value.",
      "description": "A platform invoke method accesses unmanaged code and is defined by using the Declare keyword in Visual Basic or the System.Runtime.InteropServices.DllImportAttribute. MarshalAsAttribute specifies the marshaling behavior that is used to convert data types between managed and unmanaged code. Many simple data types, such as System.Byte and System.Int32, have a single representation in unmanaged code and do not require specification of their marshaling behavior; the common language runtime automatically supplies the correct behavior.\nThe Boolean data type has multiple representations in unmanaged code. When the MarshalAsAttribute is not specified, the default marshaling behavior for the Boolean data type is UnmanagedType.Bool. This is a 32-bit integer, which is not appropriate in all circumstances. The Boolean representation that is required by the unmanaged method should be determined and matched to the appropriate System.Runtime.InteropServices.UnmanagedType. UnmanagedType.Bool is the Win32 BOOL type, which is always 4 bytes. UnmanagedType.U1 should be used for C++ bool or other 1-byte types. For more information, see Default Marshaling for Boolean Types.",
      "hotToFix": "To fix a violation of this rule, apply MarshalAsAttribute to the Boolean parameter or return value. Set the value of the attribute to the appropriate UnmanagedType.",
      "whenToSuppress": "Do not suppress a warning from this rule. Even if the default marshaling behavior is appropriate, the code is more easily maintained when the behavior is explicitly specified.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182206.aspx"
    }
  },
  {
    "id": "CA1415",
    "message": "Declare P/Invokes correctly",
    "description": "This rule looks for operating system invoke method declarations that target Win32 functions that have a pointer to an OVERLAPPED structure parameter and the corresponding managed parameter is not a pointer to a System.Threading.NativeOverlapped structure.",
    "details": {
      "typeName": "DeclarePInvokesCorrectly",
      "category": "Microsoft.Interoperability",
      "breakingChange": "Non-breaking - If the P/Invoke that declares the parameter cannot be seen outside the assembly. Breaking - If the P/Invoke that declares the parameter can be seen outside the assembly.",
      "cause": "A platform invoke method is incorrectly declared.",
      "description": "A platform invoke method accesses unmanaged code and is defined by using the Declare keyword in Visual Basic or the System.Runtime.InteropServices.DllImportAttribute. Currently, this rule looks for platform invoke method declarations that target Win32 functions that have a pointer to an OVERLAPPED structure parameter and the corresponding managed parameter is not a pointer to a System.Threading.NativeOverlapped structure.",
      "hotToFix": "To fix a violation of this rule, correctly declare the platform invoke method.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182204.aspx"
    }
  },
  {
    "id": "CA1500",
    "message": "Variable names should not match field names",
    "description": "An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type, leading to errors.",
    "details": {
      "typeName": "VariableNamesShouldNotMatchFieldNames",
      "category": "Microsoft.Maintainability",
      "breakingChange": "When fired on a parameter that has the same name as a field: Non-breaking - If both the field and method that declares the parameter cannot be seen outside the assembly, regardless of the change you make. Breaking - If you change the name of the field and can be seen outside the assembly. Breaking - If you change the name of the parameter and the method that declares it can be seen outside the assembly. When fired on a local variable that has the same name as a field: Non-breaking - If the field cannot be seen outside the assembly, regardless of the change you make. Non-breaking - If you change the name of the local variable and do not change the name of the field. Breaking - If you change the name of the field and it can be seen outside the assembly.",
      "cause": "An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type. To catch local variables that violate the rule, the tested assembly must be built by using debugging information and the associated program database (.pdb) file must be available.",
      "description": "When the name of an instance field matches a parameter or a local variable name, the instance field is accessed by using the this (Me in Visual Basic) keyword when inside the method body. When maintaining code, it is easy to forget this difference and assume that the parameter/local variable refers to the instance field, which leads to errors. This is true especially for lengthy method bodies.",
      "hotToFix": "To fix a violation of this rule, rename either the parameter/variable or the field.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182216.aspx"
    }
  },
  {
    "id": "CA1501",
    "message": "Avoid excessive inheritance",
    "description": "A type is more than four levels deep in its inheritance hierarchy. Deeply nested type hierarchies can be difficult to follow, understand, and maintain.",
    "details": {
      "typeName": "AvoidExcessiveInheritance",
      "category": "Microsoft.Maintainability",
      "breakingChange": "Breaking",
      "cause": "A type is more than four levels deep in its inheritance hierarchy.",
      "description": "Deeply nested type hierarchies can be difficult to follow, understand, and maintain. This rule limits analysis to hierarchies in the same module.",
      "hotToFix": "To fix a violation of this rule, derive the type from a base type that is less deep in the inheritance hierarchy or eliminate some of the intermediate base types.",
      "whenToSuppress": "It is safe to suppress a warning from this rule. However, the code might be more difficult to maintain. Note that, depending on the visibility of base types, resolving violations of this rule might create breaking changes. For example, removing public base types is a breaking change.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182213.aspx"
    }
  },
  {
    "id": "CA1502",
    "message": "Avoid excessive complexity",
    "description": "This rule measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches.",
    "details": {
      "typeName": "AvoidExcessiveComplexity",
      "category": "Microsoft.Maintainability",
      "breakingChange": "Non-breaking",
      "cause": "A method has an excessive cyclomatic complexity.",
      "description": "Cyclomatic complexity measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches. A low cyclomatic complexity generally indicates a method that is easy to understand, test, and maintain. The cyclomatic complexity is calculated from a control flow graph of the method and is given as follows:\ncyclomatic complexity \u003d the number of edges - the number of nodes + 1\nwhere a node represents a logic branch point and an edge represents a line between nodes.\nThe rule reports a violation when the cyclomatic complexity is more than 25.\nYou can learn more about code metrics at Measuring Complexity and Maintainability of Managed Code,",
      "hotToFix": "To fix a violation of this rule, refactor the method to reduce its cyclomatic complexity.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the complexity cannot easily be reduced and the method is easy to understand, test, and maintain. In particular, a method that contains a large switch (Select in Visual Basic) statement is a candidate for exclusion. The risk of destabilizing the code base late in the development cycle or introducing an unexpected change in runtime behavior in previously shipped code might outweigh the maintainability benefits of refactoring the code.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182212.aspx"
    }
  },
  {
    "id": "CA1504",
    "message": "Review misleading field names",
    "description": "The name of an instance field starts with \"s_\", or the name of a static (Shared in Visual Basic) field starts with \"m_\".",
    "details": {
      "typeName": "ReviewMisleadingFieldNames",
      "category": "Microsoft.Maintainability",
      "breakingChange": "Non-breaking",
      "cause": "The name of an instance field starts with \"s_\" or the name of a static (Shared in Visual Basic) field starts with \"m_\".",
      "description": "Field names that start with \"s_\" are associated with static data by many users. Similarly, field names that start with \"m_\" are associated with instance (member) data. For more easily maintained code, names should follow generally used conventions.",
      "hotToFix": "To fix a violation of this rule, rename the field by using the appropriate prefix. Alternatively, make the field agree with the current suffix by adding or removing the static modifier.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb164506.aspx"
    }
  },
  {
    "id": "CA1505",
    "message": "Avoid unmaintainable code",
    "description": "A type or method has a low maintainability index value. A low maintainability index indicates that a type or method is probably difficult to maintain and would be a good candidate for redesign.",
    "details": {
      "typeName": "AvoidUnmantainableCode",
      "category": "Microsoft.Maintainability",
      "breakingChange": "Non-breaking",
      "cause": "A type or method has a low maintainability index value.",
      "description": "The maintainability index is calculated by using the following metrics: lines of code, program volume, and cyclomatic complexity. Program volume is a measure of the difficulty of understanding of a type or method that is based on the number of operators and operands in the code. Cyclomatic complexity is a measure of the structural complexity of the type or method. You can learn more about code metrics at Measuring Complexity and Maintainability of Managed Code.\nA low maintainability index indicates that a type or method is probably difficult to maintain and would be a good candidate to redesign.",
      "hotToFix": "To fix this violation, redesign the type or method and try to split it into smaller and more focused types or methods.",
      "whenToSuppress": "Exclude this warning when a type or method is still considered maintainable despite its large size or when the type or method cannot be split.",
      "url": "http://msdn.microsoft.com/en-us/library/bb386043.aspx"
    }
  },
  {
    "id": "CA1506",
    "message": "Avoid excessive class coupling",
    "description": "This rule measures class coupling by counting the number of unique type references that a type or method contains.",
    "details": {
      "typeName": "AvoidExcessiveClassCoupling",
      "category": "Microsoft.Maintainability",
      "breakingChange": "Breaking",
      "cause": "A type or method is coupled with many other types.",
      "description": "This rule measures class coupling by counting the number of unique type references that a type or method contains.\nTypes and methods that have a high degree of class coupling can be difficult to maintain. It is a good practice to have types and methods that exhibit low coupling and high cohesion.",
      "hotToFix": "To fix this violation, try to redesign the type or method to reduce the number of types to which it is coupled.",
      "whenToSuppress": "Exclude this warning when the type or method is still considered maintainable despite its large number of dependencies on other types.",
      "url": "http://msdn.microsoft.com/en-us/library/bb397994.aspx"
    }
  },
  {
    "id": "CA1600",
    "message": "Do not use idle process priority",
    "description": "Do not set process priority to Idle. Processes that have System.Diagnostics.ProcessPriorityClass.Idle will occupy the CPU when it would otherwise be idle, and will therefore block standby.",
    "details": {
      "typeName": "DoNotUseIdleProcessPriority",
      "category": "Microsoft.Mobility",
      "breakingChange": "Breaking",
      "cause": "This rule occurs when processes are set to ProcessPriorityClass.Idle.",
      "description": "Do not set process priority to Idle. Processes that have System.Diagnostics.ProcessPriorityClass.Idle will occupy the CPU when it would otherwise be idle, and will therefore block standby.",
      "hotToFix": "Set processes to ProcessPriorityClass.BelowNormal.",
      "whenToSuppress": "This rule should be suppressed only when Idle process priority is required and mobility considerations can be ignored safely.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182219.aspx"
    }
  },
  {
    "id": "CA1601",
    "message": "Do not use timers that prevent power state changes",
    "description": "Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.",
    "details": {
      "typeName": "DoNotUseTimersThatPreventPowerStateChanges",
      "category": "Microsoft.Mobility",
      "breakingChange": "Breaking",
      "cause": "A timer has an interval set to occur more than one time per second.",
      "description": "Do not poll more often than one time per second or use timers that occur more frequently than one time per second. Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.",
      "hotToFix": "Set timer intervals to occur less than one time per second.",
      "whenToSuppress": "This rule should be suppressed only if firing the timer more than one time per second is required and mobility considerations can safely be ignored.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182230.aspx"
    }
  },
  {
    "id": "CA1700",
    "message": "Do not name enum values \u0027Reserved\u0027",
    "description": "This rule assumes that an enumeration member that has a name that contains \"reserved\" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change.",
    "details": {
      "typeName": "DoNotNameEnumValuesReserved",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of an enumeration member contains the word \"reserved\".",
      "description": "This rule assumes that an enumeration member that has a name that contains \"reserved\" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change. You should not expect users to ignore a member just because its name contains \"reserved\", nor can you rely on users to read or abide by documentation. Furthermore, because reserved members appear in object browsers and smart integrated development environments, they can cause confusion about which members are actually being used.\nInstead of using a reserved member, add a new member to the enumeration in the future version. In most cases the addition of the new member is not a breaking change, as long as the addition does not cause the values of the original members to change.\nIn a limited number of cases the addition of a member is a breaking change even when the original members retain their original values. Primarily, the new member cannot be returned from existing code paths without breaking callers that use a switch (Select in Visual Basic) statement on the return value that encompasses the whole member list and that throw an exception in the default case. A secondary concern is that client code might not handle the change in behavior from reflection methods such as Enum.IsDefined. Accordingly, if the new member has to be returned from existing methods or a known application incompatibility occurs because of poor reflection usage, the only nonbreaking solution is to:\nAdd a new enumeration that contains the original and new members. Mark the original enumeration with the System.ObsoleteAttribute attribute.\nFollow the same procedure for any externally visible types or members that expose the original enumeration.",
      "hotToFix": "To fix a violation of this rule, remove or rename the member.",
      "whenToSuppress": "It is safe to suppress a warning from this rule for a member that is currently used or for libraries that have previously shipped.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182236.aspx"
    }
  },
  {
    "id": "CA1701",
    "message": "Resource string compound words should be cased correctly",
    "description": "Each word in the resource string is split into tokens based on the casing. Each contiguous two-token combination is checked by the Microsoft spelling checker library. If recognized, the word produces a violation of the rule.",
    "details": {
      "typeName": "ResourceStringCompoundWordsShouldBeCasedCorrectly",
      "category": "Microsoft.Naming",
      "breakingChange": "Non-breaking",
      "cause": "A resource string contains a compound word that does not appear to be cased correctly.",
      "description": "Each word in the resource string is split into tokens that are based on the casing. Each contiguous two-token combination is checked by the Microsoft spelling checker library. If recognized, the word produces a violation of the rule. Examples of compound words that cause a violation are \"CheckSum\" and \"MultiPart\", which should be cased as \"Checksum\" and \"Multipart\", respectively. Due to previous common usage, several exceptions are built into the rule, and several single words are flagged, such as \"Toolbar\" and \"Filename\", that should be cased as two distinct words. In this example, \"ToolBar\" and \"FileName\" would be flagged.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Change the word so that it is cased correctly.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if both parts of the compound word are recognized by the spelling dictionary and the intent is to use two words.\nYou can also add compound words to a custom dictionary for the spelling checker. Words in the custom dictionary do not cause violations. For more information, see How to: Customize the Code Analysis Dictionary.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264481.aspx"
    }
  },
  {
    "id": "CA1702",
    "message": "Compound words should be cased correctly",
    "description": "The name of an identifier contains multiple words, and at least one of the words appears to be a compound word that is not cased correctly.",
    "details": {
      "typeName": "CompoundWordsShouldBeCasedCorrectly",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking- when fired on assemblies. Non-breaking - when fired on type parameters.",
      "cause": "The name of an identifier contains multiple words and at least one of the words appears to be a compound word that is not cased correctly.",
      "description": "The name of the identifier is split into words that are based on the casing. Each contiguous two-word combination is checked by the Microsoft spelling checker library. If it is recognized, the identifier produces a violation of the rule. Examples of compound words that cause a violation are \"CheckSum\" and \"MultiPart\", which should be cased as \"Checksum\" and \"Multipart\", respectively. Due to previous common usage, several exceptions are built into the rule, and several single words are flagged, such as \"Toolbar\" and \"Filename\", that should be cased as two distinct words (in this case, \"ToolBar\" and \"FileName\").\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Change the name so that it is cased correctly.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if both parts of the compound word are recognized by the spelling dictionary and the intent is to use two words.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264474.aspx"
    }
  },
  {
    "id": "CA1703",
    "message": "Resource strings should be spelled correctly",
    "description": "A resource string contains one or more words that are not recognized by the Microsoft spelling checker library.",
    "details": {
      "typeName": "ResourceStringsShouldBeSpelledCorrectly",
      "category": "Microsoft.Naming",
      "breakingChange": "Non-breaking",
      "cause": "A resource string contains one or more words that are not recognized by the Microsoft spelling checker library.",
      "description": "This rule parses the resource string into words (tokenizing compound words) and checks the spelling of each word/token. For information about the parsing algorithm, see CA1704: Identifiers should be spelled correctly.\nBy default, the English (en) version of the spelling checker is used.",
      "hotToFix": "To fix a violation of this rule, use complete words that are correctly spelled or add the words to a custom dictionary. For information about how to use custom dictionaries, see CA1704: Identifiers should be spelled correctly.",
      "whenToSuppress": "Do not suppress a warning from this rule. Correctly spelled words reduce the time that is required to learn new software libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264483.aspx"
    }
  },
  {
    "id": "CA1704",
    "message": "Identifiers should be spelled correctly",
    "description": "The name of an externally visible identifier contains one or more words that are not recognized by the Microsoft spelling checker library.",
    "details": {
      "typeName": "IdentifiersShouldBeSpelledCorrectly",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of an identifier contains one or more words that are not recognized by the Microsoft spelling checker library. This rule does not check constructors or special-named members such as get and set property accessors.",
      "description": "This rule parses the identifier into tokens and checks the spelling of each token. The parsing algorithm performs the following transformations:\nUppercase letters start a new token. For example, MyNameIsJoe tokenizes to \"My\", \"Name\", \"Is\", \"Joe\". For multiple uppercase letters, the last uppercase letter starts a new token. For example, GUIEditor tokenizes to \"GUI\", \"Editor\". Leading and trailing apostrophes are removed. For example, \u0027sender\u0027 tokenizes to \"sender\". Underscores signify the end of a token and are removed. For example, Hello_world tokenizes to \"Hello\", \"world\". Embedded ampersands are removed. For example, for\u0026mat tokenizes to \"format\".\nBy default, the English (en) version of the spelling checker is used. No other language dictionaries are currently available.",
      "hotToFix": "To fix a violation of this rule, correct the spelling of the word or add the word to a custom dictionary that is named CustomDictionary.xml. Place the dictionary in the installation directory of the tool, the project directory, or in the directory that is associated with the tool under the profile of the user (%USERPROFILE%\\Application Data\\...). To learn how to add the custom dictionary to a project in Visual Studio, see How to: Customize the Code Analysis Dictionary\nAdd words that should not cause a violation under the Dictionary/Words/Recognized path. Add words that should cause a violation under the Dictionary/Words/Unrecognized path. Add words that should be flagged as obsolete under the Dictionary/Words/Deprecated path. See the related rule topic CA1726: Use preferred termsfor more information. Add exceptions to the acronym casing rules to the Dictionary/Acronyms/CasingExceptions path.\nThe following is an example of the structure of a custom dictionary file.",
      "whenToSuppress": "Suppress a warning from this rule only if the word is intentionally misspelled and the word applies to a limited set of the library. Correctly spelled words reduce the learning curve that is required for new software libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264492.aspx"
    }
  },
  {
    "id": "CA1707",
    "message": "Identifiers should not contain underscores",
    "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
    "details": {
      "typeName": "IdentifiersShouldNotContainUnderscores",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking - when raised on assemblies Non-breaking - when raised on type parameters",
      "cause": "The name of an identifier contains the underscore (_) character.",
      "description": "By convention, identifier names do not contain the underscore (_) character. The rule checks namespaces, types, members, and parameters.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Remove all underscore characters from the name.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182245.aspx"
    }
  },
  {
    "id": "CA1708",
    "message": "Identifiers should differ by more than case",
    "description": "Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive.",
    "details": {
      "typeName": "IdentifiersShouldDifferByMoreThanCase",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The names of two types, members, parameters, or fully qualified namespaces are identical when they are converted to lowercase.",
      "description": "Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive. For example, Visual Basic is a widely used case-insensitive language.\nThis rule fires on publicly visible members only.",
      "hotToFix": "Select a name that is unique when it is compared to other identifiers in a case-insensitive manner.",
      "whenToSuppress": "Do not suppress a warning from this rule. The library might not be usable in all available languages in the .NET Framework.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182242.aspx"
    }
  },
  {
    "id": "CA1709",
    "message": "Identifiers should be cased correctly",
    "description": "By convention, parameter names use camel casing and namespace, type, and member names use Pascal casing.",
    "details": {
      "typeName": "IdentifiersShouldBeCasedCorrectly",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking - when raised on assemblies, namespaces, types, members and parameters. Non-breaking - when fired on generic type parameters.",
      "cause": "The name of an identifier is not cased correctly.\n- or -\nThe name of an identifier contains a two-letter acronym and the second letter is lowercase.\n- or -\nThe name of an identifier contains an acronym of three or more uppercase letters.",
      "description": "Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\nBy convention, parameter names use camel casing; namespace, type, and member names use Pascal casing. In a camel-cased name, the first letter is lowercase, and the first letter of any remaining words in the name is in uppercase. Examples of camel-cased names are \"packetSniffer\", \"ioFile\", and \"fatalErrorCode\". In a Pascal-cased name, the first letter is uppercase, and the first letter of any remaining words in the name is in uppercase. Examples of Pascal-cased names are \"PacketSniffer\", \"IOFile\", and \"FatalErrorCode\".\nThis rule splits the name into words based on the casing and checks any two-letter words against a list of common two-letter words, such as \"In\" or \"My\". If a match is not found, the word is assumed to be an acronym. In addition, this rule assumes it has found an acronym when the name contains either four uppercase letters in a row or three uppercase letters in a row at the end of the name.\nBy convention, two-letter acronyms use all uppercase letters, and acronyms of three or more characters use Pascal casing. The following examples use this naming convention: \u0027DB\u0027, \u0027CR\u0027, \u0027Cpa\u0027, and \u0027Ecma\u0027. The following examples violate the convention: \u0027Io\u0027, \u0027XML\u0027, and \u0027DoD\u0027, and for nonparameter names, \u0027xp\u0027 and \u0027cpl\u0027.\n\u0027ID\u0027 is special-cased to cause a violation of this rule. \u0027Id\u0027 is not an acronym but is an abbreviation for \u0027identification\u0027.",
      "hotToFix": "Change the name so that it is cased correctly.",
      "whenToSuppress": "It is safe to suppress this warning if you have your own naming conventions, or if the identifier represents a proper name, for example, the name of a company or a technology.\nYou can also add specific terms, abbreviations, and acronyms that to a code analysis custom dictionary. Terms specified in the custom dictionary will not cause violations of this rule. For more information, see How to: Customize the Code Analysis Dictionary",
      "url": "http://msdn.microsoft.com/en-us/library/ms182240.aspx"
    }
  },
  {
    "id": "CA1710",
    "message": "Identifiers should have correct suffix",
    "description": "By convention, the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, have a suffix that is associated with the base type or interface.",
    "details": {
      "typeName": "IdentifiersShouldHaveCorrectSuffix",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "An identifier does not have the correct suffix.",
      "description": "By convention, the names of types that extend certain base types or that implement certain interfaces, or types derived from these types, have a suffix that is associated with the base type or interface.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\nThe following table lists the base types and interfaces that have associated suffixes.\nTypes that implement ICollection and are a generalized type of data structure, such as a dictionary, stack, or queue, are allowed names that provide meaningful information about the intended usage of the type.\nTypes that implement ICollection and are a collection of specific items have names that end with the word \u0027Collection\u0027. For example, a collection of Queue objects would have the name \u0027QueueCollection\u0027. The \u0027Collection\u0027 suffix signifies that the members of the collection can be enumerated by using the foreach (For Each in Visual Basic) statement.\nTypes that implement IDictionary have names that end with the word \u0027Dictionary\u0027 even if the type also implements IEnumerable or ICollection. The \u0027Collection\u0027 and \u0027Dictionary\u0027 suffix naming conventions enable users to distinguish between the following two enumeration patterns.\nTypes with the \u0027Collection\u0027 suffix follow this enumeration pattern.\nTypes with the \u0027Dictionary\u0027 suffix follow this enumeration pattern.\nA DataSet object consists of a collection of DataTable objects, which consist of collections of System.Data.DataColumn and System.Data.DataRow objects, among others. These collections implement ICollection through the base System.Data.InternalDataCollectionBase class.",
      "hotToFix": "Rename the type so that it is suffixed with the correct term.",
      "whenToSuppress": "It is safe to suppress a warning to use the \u0027Collection\u0027 suffix if the type is a generalized data structure that might be extended or that will hold an arbitrary set of diverse items. In this case, a name that provides meaningful information about the implementation, performance, or other characteristics of the data structure might make sense (for example, BinaryTree). In cases where the type represents a collection of a specific type (for example, StringCollection), do not suppress a warning from this rule because the suffix indicates that the type can be enumerated by using a foreach statement.\nFor other suffixes, do not suppress a warning from this rule. The suffix allows the intended usage to be evident from the type name.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182244.aspx"
    }
  },
  {
    "id": "CA1711",
    "message": "Identifiers should not have incorrect suffix",
    "description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.",
    "details": {
      "typeName": "IdentifiersShouldNotHaveIncorrectSuffix",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "An identifier has an incorrect suffix.",
      "description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.\nThe following table lists the reserved suffixes and the base types and interfaces with which they are associated.\nIn addition, the following suffixes should not be used:\nDelegate Enum Impl - use \u0027Core\u0027 instead Ex or similar suffix to distinguish it from an earlier version of the same type\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Remove the suffix from the type name.",
      "whenToSuppress": "Do not suppress a warning from this rule unless the suffix has an unambiguous meaning in the application domain.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182247.aspx"
    }
  },
  {
    "id": "CA1712",
    "message": "Do not prefix enum values with type name",
    "description": "Names of enumeration members are not prefixed by using the type name because development tools are expected to provide type information.",
    "details": {
      "typeName": "DoNotPrefixEnumValuesWithTypeName",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "An enumeration contains a member whose name starts with the type name of the enumeration.",
      "description": "Names of enumeration members are not prefixed with the type name because type information is expected to be provided by development tools.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required for to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "To fix a violation of this rule, remove the type name prefix from the enumeration member.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182237.aspx"
    }
  },
  {
    "id": "CA1713",
    "message": "Events should not have before or after prefix",
    "description": "The name of an event starts with \"Before\" or \"After\". To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions.",
    "details": {
      "typeName": "EventsShouldNotHaveBeforeOrAfterPrefix",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of an event starts with \u0027Before\u0027 or \u0027After\u0027.",
      "description": "Event names should describe the action that raises the event. To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions. For example, when naming a pair of events that is raised when closing a resource, you might name it \u0027Closing\u0027 and \u0027Closed\u0027, instead of \u0027BeforeClose\u0027 and \u0027AfterClose\u0027.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Remove the prefix from the event name, and consider changing the name to use the present or past tense of a verb.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182238.aspx"
    }
  },
  {
    "id": "CA1714",
    "message": "Flags enums should have plural names",
    "description": "A public enumeration has the System.FlagsAttribute attribute, and its name does not end in \"s\". Types that are marked by using FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified.",
    "details": {
      "typeName": "FlagsEnumsShouldHavePluralNames",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "A public enumeration has the System.FlagsAttribute and its name does not end in \u0027s\u0027.",
      "description": "Types that are marked with FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified. For example, an enumeration that defines the days of the week might be intended for use in an application where you can specify multiple days. This enumeration should have the FlagsAttribute and could be called \u0027Days\u0027. A similar enumeration that allows only a single day to be specified would not have the attribute, and could be called \u0027Day\u0027.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Make the name of the enumeration a plural word, or remove the FlagsAttribute attribute if multiple enumeration values should not be specified simultaneously.",
      "whenToSuppress": "It is safe to suppress a violation if the name is a plural word but does not end in \u0027s\u0027. For example, if the multiple-day enumeration that was described previously were named \u0027DaysOfTheWeek\u0027, this would violate the logic of the rule but not its intent. Such violations should be suppressd.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264486.aspx"
    }
  },
  {
    "id": "CA1715",
    "message": "Identifiers should have correct prefix",
    "description": "The name of an externally visible interface does not start with an uppercase \"I\". The name of a generic type parameter on an externally visible type or method does not start with an uppercase \"T\".",
    "details": {
      "typeName": "IdentifiersShouldHaveCorrectPrefix",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking - when fired on interfaces. Non-breaking - when raised on generic type parameters.",
      "cause": "The name of an externally visible interface does not start with an uppercase \u0027I\u0027.\n-or-\nThe name of a generic type parameter on an externally visible type or method does not start with an uppercase \u0027T\u0027.",
      "description": "By convention, the names of certain programming elements start with a specific prefix.\nInterface names should start with an uppercase \u0027I\u0027 followed by another uppercase letter. This rule reports violations for interface names such as \u0027MyInterface\u0027 and \u0027IsolatedInterface\u0027.\nGeneric type parameter names should start with an uppercase \u0027T\u0027 and optionally may be followed by another uppercase letter. This rule reports violations for generic type parameter names such as \u0027V\u0027 and \u0027Type\u0027.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Rename the identifier so that it is correctly prefixed.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182243.aspx"
    }
  },
  {
    "id": "CA1716",
    "message": "Identifiers should not match keywords",
    "description": "A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.",
    "details": {
      "typeName": "IdentifiersShouldNotMatchKeywords",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "A name of a namespace, a type, or a viritual or interface member matches a reserved keyword in a programming language.",
      "description": "Identifiers for namespaces, types, and virtual and interface members should not match keywords that are defined by languages that target the common language runtime. Depending on the language that is used and the keyword, compiler errors and ambiguities can make the library difficult to use.\nThis rule checks against keywords in the following languages:\nVisual Basic C# C++/CLI\nCase-insensitive comparison is used for Visual Basic keywords, and case-sensitive comparison is used for the other languages.",
      "hotToFix": "Select a name that does not appear in the list of keywords.",
      "whenToSuppress": "You can suppress a warning from this rule if you are convinced that the identifier will not confuse users of the API, and that the library is usable in all available languages in the .NET Framework.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182248.aspx"
    }
  },
  {
    "id": "CA1717",
    "message": "Only FlagsAttribute enums should have plural names",
    "description": "Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified at the same time.",
    "details": {
      "typeName": "OnlyFlagsEnumsShouldHavePluralNames",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of an externally visible enumeration ends in a plural word and the enumeration is not marked with the System.FlagsAttribute attribute.",
      "description": "Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified simultaneously. The FlagsAttribute tells compilers that the enumeration should be treated as a bit field that enables bitwise operations on the enumeration.\nIf only one value of an enumeration can be specified at a time, the name of the enumeration should be a singular word. For example, an enumeration that defines the days of the week might be intended for use in an application where you can specify multiple days. This enumeration should have the FlagsAttribute and could be called \u0027Days\u0027. A similar enumeration that allows only a single day to be specified would not have the attribute, and could be called \u0027Day\u0027.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Make the name of the enumeration a singular word or add the FlagsAttribute.",
      "whenToSuppress": "It is safe to suppress a warning from the rule if the name ends in a singular word.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264487.aspx"
    }
  },
  {
    "id": "CA1719",
    "message": "Parameter names should not match member names",
    "description": "A parameter name should communicate the meaning of a parameter and a member name should communicate the meaning of a member. It would be a rare design where these were the same. Naming a parameter the same as its member name is unintuitive and makes the library difficult to use.",
    "details": {
      "typeName": "ParameterNamesShouldNotMatchMemberNames",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of an externally visible member matches, in a case-insensitive comparison, the name of one of its parameters.",
      "description": "A parameter name should communicate the meaning of a parameter and a member name should communicate the meaning of a member. It would be a rare design where these were the same. Naming a parameter the same as its member name is unintuitive and makes the library difficult to use.",
      "hotToFix": "Select a parameter name that does not match the member name.",
      "whenToSuppress": "For new development, no known scenarios occur where you must suppress a warning from this rule. For shipping libraries, you might have to suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182252.aspx"
    }
  },
  {
    "id": "CA1720",
    "message": "Identifiers should not contain type names",
    "description": "The name of a parameter in an externally visible member contains a data type name, or the name of an externally visible member contains a language-specific data type name.",
    "details": {
      "typeName": "IdentifiersShouldNotContainTypeNames",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of a parameter in an externally visible member contains a data type name.\n-or-\nThe name of an externally visible member contains a language-specific data type name.",
      "description": "Names of parameters and members are better used to communicate their meaning than to describe their type, which is expected to be provided by development tools. For names of members, if a data type name must be used, use a language-independent name instead of a language-specific one. For example, instead of the C# type name \u0027int\u0027, use the language-independent data type name, Int32.\nEach discrete token in the name of the parameter or member is checked against the following language-specific data type names, in a case-insensitive manner:\nBool WChar Int8 UInt8 Short UShort Int UInt Integer UInteger Long ULong Unsigned Signed Float Float32 Float64\nIn addition, the names of a parameter are also checked against the following language-independent data type names, in a case-insensitive manner:\nObject Obj Boolean Char String SByte Byte UByte Int16 UInt16 Int32 UInt32 Int64 UInt64 IntPtr Ptr Pointer UInptr UPtr UPointer Single Double Decimal Guid",
      "hotToFix": "If fired against a parameter:\nReplace the data type identifier in the name of the parameter with either a term that better describes its meaning or a more generic term, such as \u0027value\u0027.\nIf fired against a member:\nReplace the language-specific data type identifier in the name of the member with a term that better describes its meaning, a language-independent equivalent, or a more generic term, such as \u0027value\u0027.",
      "whenToSuppress": "Occasional use of type-based parameter and member names might be appropriate. However, for new development, no known scenarios occur where you should suppress a warning from this rule. For libraries that have previous shipped, you might have to suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb531486.aspx"
    }
  },
  {
    "id": "CA1721",
    "message": "Property names should not match get methods",
    "description": "The name of a public or protected member starts with \"Get\" and otherwise matches the name of a public or protected property. \"Get\" methods and properties should have names that clearly distinguish their function.",
    "details": {
      "typeName": "PropertyNamesShouldNotMatchGetMethods",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of a public or protected member starts with \u0027Get\u0027 and otherwise matches the name of a public or protected property. For example, a type that contains a method that is named \u0027GetColor\u0027 and a property that is named \u0027Color\u0027 violates this rule.",
      "description": "Get methods and properties should have names that clearly distinguish their function.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Change the name so that it does not match the name of a method that is prefixed with \u0027Get\u0027.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182253.aspx"
    }
  },
  {
    "id": "CA1722",
    "message": "Identifiers should not have incorrect prefix",
    "description": "By convention, only certain programming elements have names that begin with a specific prefix.",
    "details": {
      "typeName": "IdentifiersShouldNotHaveIncorrectPrefix",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "An identifier has an incorrect prefix.",
      "description": "By convention, only certain programming elements have names that begin with a specific prefix.\nType names do not have a specific prefix and should not be prefixed with a \u0027C\u0027. This rule reports violations for type names such as \u0027CMyClass\u0027 and does not report violations for type names such as \u0027Cache\u0027.\nNaming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.",
      "hotToFix": "Remove the prefix from the identifier.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182246.aspx"
    }
  },
  {
    "id": "CA1724",
    "message": "Type Names Should Not Match Namespaces",
    "description": "Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.",
    "details": {
      "typeName": "TypeNamesShouldNotMatchNamespaces",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "A type name matches a .NET Framework namespace names in a case-insensitive comparison.",
      "description": "Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.",
      "hotToFix": "Select a type name that does not match the name of a .NET Framework class library namespace.",
      "whenToSuppress": "For new development, no known scenarios occur where you must suppress a warning from this rule. Before you suppress the warning, carefully consider how the users of your library might be confused by the matching name. For shipping libraries, you might have to suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182257.aspx"
    }
  },
  {
    "id": "CA1725",
    "message": "Parameter names should match base declaration",
    "description": "Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.",
    "details": {
      "typeName": "ParameterNamesShouldMatchBaseDeclaration",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking",
      "cause": "The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method.",
      "description": "Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.",
      "hotToFix": "To fix a violation of this rule, rename the parameter to match the base declaration. The fix is a breaking change for COM visible methods.",
      "whenToSuppress": "Do not suppress a warning from this rule except for COM visible methods in libraries that have previously shipped.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182251.aspx"
    }
  },
  {
    "id": "CA1726",
    "message": "Use preferred terms",
    "description": "The name of an externally visible identifier includes a term for which an alternative, preferred term exists. Alternatively, the name includes the term \"Flag\" or \"Flags\".",
    "details": {
      "typeName": "UsePreferredTerms",
      "category": "Microsoft.Naming",
      "breakingChange": "Breaking - when fired on assemblies Non-breaking - when fired on type parameters",
      "cause": "The name of an externally visible identifier includes a term for which an alternative, preferred term exists. Alternatively, the name includes the term Flag or Flags.",
      "description": "This rule parses an identifier into tokens. Each single token and each contiguous dual token combination is compared to terms that are built into the rule and in the Deprecated section of any custom dictionaries. The following table shows the terms that are built into the rule and their preferred alternatives.",
      "hotToFix": "To fix a violation of this rule, replace the term with the preferred alternative term.",
      "whenToSuppress": "Suppress a warning from this rule only if the name of the identifier is intentional and relates specifically to the original term instead of the preferred term.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182258.aspx"
    }
  },
  {
    "id": "CA1800",
    "message": "Do not cast unnecessarily",
    "description": "Duplicate casts decrease performance, especially when the casts are performed in compact iteration statements.",
    "details": {
      "typeName": "DoNotCastUnnecessarily",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A method performs duplicate casts on one of its arguments or local variables. For complete analysis by this rule, the tested assembly must be built by using debugging information and the associated program database (.pdb) file must be available.",
      "description": "Duplicate casts decrease performance, especially when the casts are performed in compact iteration statements. For explicit duplicate cast operations, store the result of the cast in a local variable and use the local variable instead of the duplicate cast operations.\nIf the C# is operator is used to test whether the cast will succeed before the actual cast is performed, consider testing the result of the as operator instead. This provides the same functionality without the implicit cast operation that is performed by the is operator.",
      "hotToFix": "To fix a violation of this rule, modify the method implementation to minimize the number of cast operations.",
      "whenToSuppress": "It is safe to suppress a warning from this rule, or to ignore the rule completely, if performance is not a concern.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182271.aspx"
    }
  },
  {
    "id": "CA1801",
    "message": "Review unused parameters",
    "description": "A method signature includes a parameter that is not used in the method body.",
    "details": {
      "typeName": "ReviewUnusedParameters",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking - If the member is not visible outside the assembly, regardless of the change you make. Non Breaking - If you change the member to use the parameter within its body. Breaking - If you remove the parameter and it is visible outside the assembly.",
      "cause": "A method signature includes a parameter that is not used in the method body. This rule does not examine the following methods:\nMethods referenced by a delegate. Methods used as event handlers. Methods declared with the abstract (MustOverride in Visual Basic) modifier. Methods declared with the virtual (Overridable in Visual Basic) modifier. Methods declared with the override (Overrides in Visual Basic) modifier. Methods declared with the extern (Declare statement in Visual Basic) modifier.",
      "description": "Review parameters in non-virtual methods that are not used in the method body to make sure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs.\nSometimes a violation of this rule can point to an implementation bug in the method. For example, the parameter should have been used in the method body. Suppress warnings of this rule if the parameter has to exist because of backward compatibility.",
      "hotToFix": "To fix a violation of this rule, remove the unused parameter (a breaking change) or use the parameter in the method body (a non-breaking change).",
      "whenToSuppress": "It is safe to suppress a warning from this rule for previously shipped code for which the fix would be a breaking change.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182268.aspx"
    }
  },
  {
    "id": "CA1802",
    "message": "Use Literals Where Appropriate",
    "description": "A field is declared static and read-only (Shared and ReadOnly in Visual Basic), and is initialized by using a value that is computable at compile time. Because the value that is assigned to the targeted field is computable at compile time, change the declaration to a const (Const in Visual Basic) field so that the value is computed at compile time instead of at run time.",
    "details": {
      "typeName": "UseLiteralsWhereAppropriate",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A field is declared static and readonly (Shared and ReadOnly in Visual Basic), and is initialized with a value that is computable at compile time.",
      "description": "The value of a static readonly field is computed at runtime when the static constructor for the declaring type is called. If the static readonly field is initialized when it is declared and a static constructor is not declared explicitly, the compiler emits a static constructor to initialize the field.\nThe value of a const field is computed at compile time and stored in the metadata, which increases runtime performance when it is compared to a static readonly field.\nBecause the value assigned to the targeted field is computable at compile time, change the declaration to a const field so that the value is computed at compile time instead of at runtime.",
      "hotToFix": "To fix a violation of this rule, replace the static and readonly modifiers with the const modifier.",
      "whenToSuppress": "It is safe to suppress a warning from this rule, or disable the rule, if performance is not of concern.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182280.aspx"
    }
  },
  {
    "id": "CA1804",
    "message": "Remove unused locals",
    "description": "Unused local variables and unnecessary assignments increase the size of an assembly and decrease performance.",
    "details": {
      "typeName": "RemoveUnusedLocals",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A method declares a local variable but does not use the variable except possibly as the recipient of an assignment statement. For analysis by this rule, the tested assembly must be built with debugging information and the associated program database (.pdb) file must be available.",
      "description": "Unused local variables and unnecessary assignments increase the size of an assembly and decrease performance.",
      "hotToFix": "To fix a violation of this rule, remove or use the local variable. Note that the C# compiler that is included with .NET Framework 2.0 removes unused local variables when the optimize option is enabled.",
      "whenToSuppress": "Suppress a warning from this rule if the variable was compiler emitted. It is also safe to suppress a warning from this rule, or to disable the rule, if performance and code maintenance are not primary concerns.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182278.aspx"
    }
  },
  {
    "id": "CA1806",
    "message": "Do not ignore method results",
    "description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
    "details": {
      "typeName": "DoNotIgnoreMethodResults",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "There are several possible reasons for this warning:\nA new object is created but never used. A method that creates and returns a new string is called and the new string is never used. A COM or P/Invoke method that returns a HRESULT or error code that is never used. Rule Description\nUnnecessary object creation and the associated garbage collection of the unused object degrade performance.\nStrings are immutable and methods such as String.ToUpper returns a new instance of a string instead of modifying the instance of the string in the calling method.\nIgnoring HRESULT or error code can lead to unexpected behavior in error conditions or to low-resource conditions.",
      "description": null,
      "hotToFix": "If method A creates a new instance of B object that is never used, pass the instance as an argument to another method or assign the instance to a variable. If the object creation is unnecessary, remove the it.-or-\nIf method A calls method B, but does not use the new string instance that the method B returns. Pass the instance as an argument to another method, assign the instance to a variable. Or remove the call if it is unnecessary.\n-or-\nIf method A calls method B, but does not use the HRESULT or error code that the method returns. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.",
      "whenToSuppress": "Do not suppress a warning from this rule unless the act of creating the object serves some purpose.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182273.aspx"
    }
  },
  {
    "id": "CA1809",
    "message": "Avoid excessive locals",
    "description": "A common performance optimization is to store a value in a processor register instead of memory, which is referred to as \"enregistering the value\". To increase the chance that all local variables are enregistered, limit the number of local variables to 64.",
    "details": {
      "typeName": "AvoidExcessiveLocals",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A member contains more than 64 local variables, some of which might be compiler-generated.",
      "description": "A common performance optimization is to store a value in a processor register instead of in memory, which is referred to as enregistering the value. The common language runtime considers up to 64 local variables for enregistration. Variables that are not enregistered are put on the stack and must be moved to a register before manipulation. To allow the chance that all local variables get enregistered, limit the number of local variables to 64.",
      "hotToFix": "To fix a violation of this rule, refactor the implementation to use no more than 64 local variables.",
      "whenToSuppress": "It is safe to suppress a warning from this rule, or to disable the rule, if performance is not an issue.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182263.aspx"
    }
  },
  {
    "id": "CA1810",
    "message": "Initialize reference type static fields inline",
    "description": "When a type declares an explicit static constructor, the just-in-time (JIT) compiler adds a check to each static method and instance constructor of the type to make sure that the static constructor was previously called. Static constructor checks can decrease performance.",
    "details": {
      "typeName": "InitializeReferenceTypeStaticFieldsInline",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A reference type declares an explicit static constructor.",
      "description": "When a type declares an explicit static constructor, the just-in-time (JIT) compiler adds a check to each static method and instance constructor of the type to make sure that the static constructor was previously called. Static initialization is triggered when any static member is accessed or when an instance of the type is created. However, static initialization is not triggered if you declare a variable of the type but do not use it, which can be important if the initialization changes global state.\nWhen all static data is initialized inline and an explicit static constructor is not declared, Microsoft intermediate language (MSIL) compilers add the beforefieldinit flag and an implicit static constructor, which initializes the static data, to the MSIL type definition. When the JIT compiler encounters the beforefieldinit flag, most of the time the static constructor checks are not added. Static initialization is guaranteed to occur at some time before any static fields are accessed but not before a static method or instance constructor is invoked. Note that static initialization can occur at any time after a variable of the type is declared.\nStatic constructor checks can decrease performance. Often a static constructor is used only to initialize static fields, in which case you must only make sure that static initialization occurs before the first access of a static field. The beforefieldinit behavior is appropriate for these and most other types. It is only inappropriate when static initialization affects global state and one of the following is true:\nThe effect on global state is expensive and is not required if the type is not used. The global state effects can be accessed without accessing any static fields of the type.",
      "hotToFix": "To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if performance is not a concern; or if global state changes that are caused by static initialization are expensive or must be guaranteed to occur before a static method of the type is called or an instance of the type is created.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182275.aspx"
    }
  },
  {
    "id": "CA1811",
    "message": "Avoid uncalled private code",
    "description": "A private or internal (assembly-level) member does not have callers in the assembly; it is not invoked by the common language runtime; and it is not invoked by a delegate.",
    "details": {
      "typeName": "AvoidUncalledPrivateCode",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A private or internal (assembly-level) member does not have callers in the assembly, is not invoked by the common language runtime, and is not invoked by a delegate. The following members are not checked by this rule:\nExplicit interface members. Static constructors. Serialization constructors. Methods marked with System.Runtime.InteropServices.ComRegisterFunctionAttribute or System.Runtime.InteropServices.ComUnregisterFunctionAttribute. Members that are overrides.",
      "description": "This rule can report false positives if entry points occur that are not currently identified by the rule logic. Also, a compiler may emit noncallable code into an assembly.",
      "hotToFix": "To fix a violation of this rule, remove the noncallable code or add code that calls it.",
      "whenToSuppress": "It is safe to suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182264.aspx"
    }
  },
  {
    "id": "CA1812",
    "message": "Avoid uninstantiated internal classes",
    "description": "An instance of an assembly-level type is not created by code in the assembly.",
    "details": {
      "typeName": "AvoidUninstantiatedInternalClasses",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "An instance of an assembly-level type is not created by code in the assembly.",
      "description": "This rule tries to locate a call to one of the constructors of the type, and reports a violation if no call is found.\nThe following types are not examined by this rule:\nValue types Abstract types Enumerations Delegates Compiler-emitted array types Types that cannot be instantiated and that define static (Shared in Visual Basic) methods only.\nIf you apply System.Runtime.CompilerServices.InternalsVisibleToAttribute to the assembly that is being analyzed, this rule will not occur on any constructors that are marked as internal because you cannot tell whether a field is being used by another friend assembly.\nEven though you cannot work around this limitation in Visual Studio Code Analysis, the external stand-alone FxCop will occur on internal constructors if every friend assembly is present in the analysis.",
      "hotToFix": "To fix a violation of this rule, remove the type or add the code that uses it. If the type contains only static methods, add one of the following to the type to prevent the compiler from emitting a default public instance constructor:\nA private constructor for types that target .NET Framework versions 1.0 and 1.1. The static (Shared in Visual Basic) modifier for types that target .NET Framework 2.0.",
      "whenToSuppress": "It is safe to suppress a warning from this rule. We recommend that you suppress this warning in the following situations:\nThe class is created through late-bound reflection methods such as CreateInstance. The class is created automatically by the runtime or ASP.NET. For example, classes that implement System.Configuration.IConfigurationSectionHandler or System.Web.IHttpHandler. The class is passed as a generic type parameter that has a new constraint. For example, the following example will raise this rule. C# Copy \ninternal class MyClass\n{   \n    public DoSomething()   \n    {\n    }\n} \npublic class MyGeneric\u003cT\u003e where T : new()\n{\n    public T Create()\n    {\n        return new T();   \n    }\n}\n// [...] \nMyGeneric\u003cMyClass\u003e mc \u003d new MyGeneric\u003cMyClass\u003e();\nmc.Create();\nIn these situations, we recommended you suppress this warning.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182265.aspx"
    }
  },
  {
    "id": "CA1813",
    "message": "Avoid unsealed attributes",
    "description": "The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance.",
    "details": {
      "typeName": "AvoidUnsealedAttributes",
      "category": "Microsoft.Performance",
      "breakingChange": "Breaking",
      "cause": "A public type inherits from System.Attribute, is not abstract, and is not sealed (NotInheritable in Visual Basic).",
      "description": "The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy; for example Attribute.GetCustomAttribute searches for the specified attribute type, or any attribute type that extends the specified attribute type. Sealing the attribute eliminates the search through the inheritance hierarchy, and can improve performance.",
      "hotToFix": "To fix a violation of this rule, seal the attribute type or make it abstract.",
      "whenToSuppress": "It is safe to suppress a warning from this rule. You should do this only if you are defining an attribute hierarchy and cannot seal the attribute or make it abstract.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182267.aspx"
    }
  },
  {
    "id": "CA1814",
    "message": "Prefer jagged arrays over multidimensional",
    "description": "A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.",
    "details": {
      "typeName": "PreferJaggedArraysOverMultidimensional",
      "category": "Microsoft.Performance",
      "breakingChange": "Breaking",
      "cause": "A member is declared as a multidimensional array.",
      "description": "A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.",
      "hotToFix": "To fix a violation of this rule, change the multidimensional array to a jagged array.",
      "whenToSuppress": "Suppress a warning from this rule if the multidimensional array does not waste space.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182277.aspx"
    }
  },
  {
    "id": "CA1815",
    "message": "Override equals and operator equals on value types",
    "description": "For value types, the inherited implementation of Equals uses the Reflection library and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or to use instances as hash table keys, your value type should implement Equals.",
    "details": {
      "typeName": "OverrideEqualsAndOperatorEqualsOnValueTypes",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A public value type does not override Object.Equals, or does not implement the equality operator (\u003d\u003d). This rule does not check enumerations.",
      "description": "For value types, the inherited implementation of Equals uses the Reflection library, and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or use them as hash table keys, your value type should implement Equals. If your programming language supports operator overloading, you should also provide an implementation of the equality and inequality operators.",
      "hotToFix": "To fix a violation of this rule, provide an implementation of Equals. If you can, implement the equality operator.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if instances of the value type will not be compared to each other.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182276.aspx"
    }
  },
  {
    "id": "CA1816",
    "message": "Call GC.SuppressFinalize correctly",
    "description": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
    "details": {
      "typeName": "CallGCSuppressFinalizeCorrectly",
      "category": "Microsoft. Usage",
      "breakingChange": "Non Breaking",
      "cause": "A method that is an implementation of IDisposable.Dispose does not call GC.SuppressFinalize. A method that is not an implementation of IDisposable.Dispose calls GC.SuppressFinalize. A method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
      "description": "The IDisposable.Dispose method lets users release resources at any time before the object becoming available for garbage collection. If the IDisposable.Dispose method is called, it frees resources of the object. This makes finalization unnecessary. IDisposable.Dispose should call GC.SuppressFinalize so the garbage collector does not call the finalizer of the object.\n \nTo prevent derived types with finalizers from having to re-implement [System.IDisposable] and to call it, unsealed types without finalizers should still call GC.SuppressFinalize.",
      "hotToFix": "To fix a violation of this rule:\nIf the method is an implementation of Dispose, add a call to GC.SuppressFinalize.\nIf the method is not an implementation of Dispose, either remove the call to GC.SuppressFinalize or move it to the type\u0027s Dispose implementation.\nChange all calls to GC.SuppressFinalize to pass this (Me in Visual Basic).",
      "whenToSuppress": "Only suppress a warning from this rule if you are deliberating using GC.SuppressFinalize to control the lifetime of other objects. Do not suppress a warning from this rule if an implementation of Dispose does not call GC.SuppressFinalize. In this situation, failing to suppress finalization degrades performance and provide no benefits.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182269.aspx"
    }
  },
  {
    "id": "CA1819",
    "message": "Properties should not return arrays",
    "description": "Arrays that are returned by properties are not write-protected, even when the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property.",
    "details": {
      "typeName": "PropertiesShouldNotReturnArrays",
      "category": "Microsoft.Performance",
      "breakingChange": "Breaking",
      "cause": "A public or protected property in a public type returns an array.",
      "description": "Arrays returned by properties are not write-protected, even if the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property. Specifically, they might use the property as an indexed property.",
      "hotToFix": "To fix a violation of this rule, either make the property a method or change the property to return a collection.",
      "whenToSuppress": "Attributes can contain properties that return arrays, but cannot contain properties that return collections. You can suppress a warning that is raised for a property of an attribute that is derived from the [System.Attribute] class. Otherwise, do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/0fss9skc.aspx"
    }
  },
  {
    "id": "CA1820",
    "message": "Test for empty strings using string length",
    "description": "Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals.",
    "details": {
      "typeName": "TestForEmptyStringsUsingStringLength",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A string is compared to the empty string by using Object.Equals.",
      "description": "Comparing strings using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals. This is because Equals executes significantly more MSIL instructions than either IsNullOrEmpty or the number of instructions executed to retrieve the Length property value and compare it to zero.\nYou should be aware that Equals and Length \u003d\u003d 0 behave differently for null strings. If you try to get the value of the Length property on a null string, the common language runtime throws a System.NullReferenceException. If you perform a comparison between a null string and the empty string, the common language runtime does not throw an exception; the comparison returns false. Testing for null does not significantly affect the relative performance of these two approaches. When targeting .NET Framework 2.0, use the IsNullOrEmpty method. Otherwise, use the Length \u003d\u003d comparison whenever possible.",
      "hotToFix": "To fix a violation of this rule, change the comparison to use the Length property and test for the null string. If targeting .NET Framework 2.0, use the IsNullOrEmpty method.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if performance is not an issue.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182279.aspx"
    }
  },
  {
    "id": "CA1821",
    "message": "Remove empty finalizers",
    "description": "Whenever you can, avoid finalizers because of the additional performance overhead that is involved in tracking object lifetime. An empty finalizer incurs added overhead and delivers no benefit.",
    "details": {
      "typeName": "RemoveEmptyFinalizers",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "A type implements a finalizer that is empty, calls only the base type finalizer, or calls only conditionally emitted methods.",
      "description": "Whenever you can, avoid finalizers because of the additional performance overhead that is involved in tracking object lifetime. The garbage collector will run the finalizer before it collects the object. This means that two collections will be required to collect the object. An empty finalizer incurs this added overhead without any benefit.",
      "hotToFix": "Remove the empty finalizer. If a finalizer is required for debugging, enclose the whole finalizer in #if DEBUG / #endif directives.",
      "whenToSuppress": "Do not suppress a message from this rule. Failure to suppress finalization decreases performance and provides no benefits.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264476.aspx"
    }
  },
  {
    "id": "CA1822",
    "message": "Mark members as static",
    "description": "Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.",
    "details": {
      "typeName": "MarkMembersAsStatic",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking - If the member is not visible outside the assembly, regardless of the change you make. Non Breaking - If you just change the member to an instance member with the this keyword. Breaking - If you change the member from an instance member to a static member and it is visible outside the assembly.",
      "cause": "A member that does not access instance data is not marked as static (Shared in Visual Basic).",
      "description": "Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. Emitting nonvirtual call sites will prevent a check at runtime for each call that makes sure that the current object pointer is non-null. This can achieve a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.",
      "hotToFix": "Mark the member as static (or Shared in Visual Basic) or use \u0027this\u0027/\u0027Me\u0027 in the method body, if appropriate.",
      "whenToSuppress": "It is safe to suppress a warning from this rule for previously shipped code for which the fix would be a breaking change.",
      "url": "http://msdn.microsoft.com/en-us/library/ms245046.aspx"
    }
  },
  {
    "id": "CA1823",
    "message": "Avoid unused private fields",
    "description": "Private fields were detected that do not appear to be accessed in the assembly.",
    "details": {
      "typeName": "AvoidUnusedPrivateFields",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "This rule is reported when a private field in your code exists but is not used by any code path.",
      "description": "Private fields were detected that do not appear to be accessed in the assembly.",
      "hotToFix": "To fix a violation of this rule, remove the field or add code that uses it.",
      "whenToSuppress": "It is safe to suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms245042.aspx"
    }
  },
  {
    "id": "CA1824",
    "message": "Mark assemblies with NeutralResourcesLanguageAttribute",
    "description": "The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set.",
    "details": {
      "typeName": "MarkAssembliesWithNeutralResourcesLanguage",
      "category": "Microsoft.Performance",
      "breakingChange": "Non-breaking",
      "cause": "An assembly contains a ResX-based resource but does not have the System.Resources.NeutralResourcesLanguageAttribute applied to it.",
      "description": "The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of the neutral culture for an assembly. When it looks up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources that are located in the main assembly. It does this instead of searching for a satellite assembly that has the current user interface culture for the current thread. This improves lookup performance for the first resource that you load and can reduce your working set.",
      "hotToFix": null,
      "whenToSuppress": "It is permissible to suppress a warning from this rule. However, startup performance might decrease.",
      "url": "http://msdn.microsoft.com/en-us/library/bb385967.aspx"
    }
  },
  {
    "id": "CA1900",
    "message": "Value type fields should be portable",
    "description": "This rule checks that structures that are declared by using explicit layout will align correctly when marshaled to unmanaged code on 64-bit operating systems.",
    "details": {
      "typeName": "ValueTypeFieldsShouldBePortable",
      "category": "Microsoft.Portability",
      "breakingChange": "Breaking - If the field can be seen outside the assembly. Non-breaking - If the field is not visible outside the assembly.",
      "cause": "This rule checks that structures that are declared with explicit layout will align correctly when marshaled to unmanaged code on 64-bit operating systems. IA-64 does not allow unaligned memory accesses and the process will crash if this violation is not fixed.",
      "description": "Structures that have explicit layout that contains misaligned fields cause crashes on 64-bit operating systems.",
      "hotToFix": "All fields that are smaller than 8 bytes must have offsets that are a multiple of their size, and fields that are 8 bytes or more must have offsets that are a multiple of 8. Another solution is to use LayoutKind.Sequential instead of LayoutKind.Explicit, if reasonable.",
      "whenToSuppress": "This warning should be suppressed only if it occurs in error.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182285.aspx"
    }
  },
  {
    "id": "CA1901",
    "message": "P/Invoke declarations should be portable",
    "description": "This rule evaluates the size of each parameter and the return value of a P/Invoke, and verifies that the size of the parameter is correct when marshaled to unmanaged code on 32-bit and 64-bit operating systems.",
    "details": {
      "typeName": "PInvokeDeclarationsShouldBePortable",
      "category": "Microsoft.Portability",
      "breakingChange": "Breaking - If the P/Invoke is visible outside the assembly. Non Breaking - If the P/Invoke is not visible outside the assembly.",
      "cause": "This rule evaluates the size of each parameter and the return value of a P/Invoke and verifies that their size, when marshaled to unmanaged code on 32-bit and 64-bit platforms, is correct. The most common violation of this rule is to pass a fixed-sized integer where a platform-dependent, pointer-sized variable is required.",
      "description": "Either of the following scenarios violates this rule occurs:\nThe return value or parameter is typed as a fixed-size integer when it should be typed as an IntPtr. The return value or parameter is typed as an IntPtr when it should be typed as a fixed-size integer.",
      "hotToFix": "You can fix this violation by using IntPtr or UIntPtr to represent handles instead of Int32 or UInt32.",
      "whenToSuppress": "You should not suppress this warning.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182284.aspx"
    }
  },
  {
    "id": "CA1903",
    "message": "Use only API from targeted framework",
    "description": "A member or type is using a member or type that was introduced in a service pack that was not included together with the targeted framework of the project.",
    "details": {
      "typeName": "UseOnlyApiFromTargetedFramework",
      "category": "Microsoft.Portability",
      "breakingChange": "Breaking - when fired against the signature of an externally visible member or type. Non breaking - when fired in the body of a method.",
      "cause": "A member or type is using a member or type that was introduced in a service pack that was not included with the project\u0027s targeted framework.",
      "description": "New members and types were included in .NET Framework 2.0 Service Pack 1 and 2, .NET Framework 3.0 Service Pack 1 and 2, and .NET Framework 3.5 Service Pack 1. Projects that target the major versions of the .NET Framework can unintentionally take dependencies on these new APIs. To prevent this dependency, this rule fires on usages of any new members and types that were not included by default with the project\u0027s target framework.\nTarget Framework and Service Pack Dependencies\nTo change a project\u0027s target framework, see Targeting a Specific .NET Framework Version or Profile.",
      "hotToFix": "To remove the dependency on the service pack, remove all usages of the new member or type. If this is a deliberate dependency, either suppress the warning or turn this rule off.",
      "whenToSuppress": "Do not suppress a warning from this rule if this was not a deliberate dependency on the specified service pack. In this situation, your application might fail to run on systems without this service pack installed. Suppress the warning or turn this rule off if this was a deliberate dependency.",
      "url": "http://msdn.microsoft.com/en-us/library/cc667408.aspx"
    }
  },
  {
    "id": "CA2000",
    "message": "Dispose objects before losing scope",
    "description": "Because an exceptional event might occur that will prevent the finalizer of an object from running, the object should be explicitly disposed before all references to it are out of scope.",
    "details": {
      "typeName": "DisposeObjectsBeforeLosingScope",
      "category": "Microsoft.Reliability",
      "breakingChange": "Non-breaking",
      "cause": "A local object of a IDisposable type is created but the object is not disposed before all references to the object are out of scope.",
      "description": "If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.",
      "hotToFix": "To fix a violation of this rule, call Dispose on the object before all references to it are out of scope.\nNote that you can use the using statement (Using in Visual Basic) to wrap objects that implement IDisposable. Objects that are wrapped in this manner will automatically be disposed at the close of the using block.\nThe following are some situations where the using statement is not enough to protect IDisposable objects and can cause CA2000 to occur.\nReturning a disposable object requires that the object is constructed in a try/finally block outside a using block. Initializing members of a disposable object should not be done in the constructor of a using statement. Nesting constructors that are protected only by one exception handler. For example, Copy \nusing (StreamReader sr \u003d new StreamReader(new FileStream(\"C:\\myfile.txt\", FileMode.Create)))\n{ ... }\n causes CA2000 to occur because a failure in the construction of the StreamReader object can result in the FileStream object never being closed. Dynamic objects should use a shadow object to implement the Dispose pattern of IDisposable objects.",
      "whenToSuppress": "Do not suppress a warning from this rule unless you have called a method on your object that calls Dispose, such as Close, or if the method that raised the warning returns an IDisposable object wraps your object.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182289.aspx"
    }
  },
  {
    "id": "CA2001",
    "message": "Avoid calling problematic methods",
    "description": "A member calls a potentially dangerous or problematic method.",
    "details": {
      "typeName": "AvoidCallingProblematicMethods",
      "category": "Microsoft.Reliability",
      "breakingChange": "Non-breaking",
      "cause": "A member calls a potentially dangerous or problematic method.",
      "description": "Avoid making unnecessary and potentially dangerous method calls.\nA violation of this rule occurs when a member calls one of the following methods.",
      "hotToFix": "To fix a violation of this rule, remove or replace the call to the dangerous or problematic method.",
      "whenToSuppress": "You should suppress messages from this rule only when no alternatives to the problematic method are available.",
      "url": "http://msdn.microsoft.com/en-us/library/bb385973.aspx"
    }
  },
  {
    "id": "CA2002",
    "message": "Do not lock on objects with weak identity",
    "description": "An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object.",
    "details": {
      "typeName": "DoNotLockOnObjectsWithWeakIdentity",
      "category": "Microsoft.Reliability",
      "breakingChange": "Non-breaking",
      "cause": "A thread attempts to acquire a lock on an object that has a weak identity.",
      "description": "An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object. The following types have a weak identity and are flagged by the rule:\nMarshalByRefObject ExecutionEngineException OutOfMemoryException StackOverflowException String MemberInfo ParameterInfo Thread",
      "hotToFix": "To fix a violation of this rule, use an object from a type that is not in the list in the Description section.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182290.aspx"
    }
  },
  {
    "id": "CA2003",
    "message": "Do not treat fibers as threads",
    "description": "A managed thread is being treated as a Win32 thread.",
    "details": {
      "typeName": "DoNotTreatFibersAsThreads",
      "category": "Microsoft.Reliability",
      "breakingChange": "Non-breaking",
      "cause": "A managed thread is being treated as a Win32 thread.",
      "description": "Do not assume a managed thread is a Win32 thread. It is a fiber. The common language runtime (CLR) will run managed threads as fibers in the context of real threads that are owned by SQL. These threads can be shared across AppDomains and even databases in the SQL Server process. Using managed thread local storage will work, but you may not use unmanaged thread local storage or assume that your code will run on the current OS thread again. Do not change settings such as the locale of the thread. Do not call CreateCriticalSection or CreateMutex via P/Invoke because they require that the thread that enters a lock must also exit the lock. Because this will not be the case when you use fibers, Win32 critical sections and mutexes will be useless in SQL. You may safely use most of the state on a managed System.Thread object. This includes managed thread local storage and the current user interface (UI) culture of the thread. However, for programming model reasons, you will not be able to change the current culture of a thread when you use SQL; this will be enforced through a new permission.",
      "hotToFix": "Examine your usage of threads and change your code accordingly.",
      "whenToSuppress": "You should not suppress this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182291.aspx"
    }
  },
  {
    "id": "CA2004",
    "message": "Remove calls to GC.KeepAlive",
    "description": "If you convert to SafeHandle usage, remove all calls to GC.KeepAlive (object). In this case, classes should not have to call GC.KeepAlive. This assumes they do not have a finalizer but rely on SafeHandle to finalize the OS handle for them.",
    "details": {
      "typeName": "RemoveCallsToGCKeepAlive",
      "category": "Microsoft.Reliability",
      "breakingChange": "Non-breaking",
      "cause": "Classes use SafeHandle but still contain calls to GC.KeepAlive.",
      "description": "If you are converting to SafeHandle usage, remove all calls to GC.KeepAlive (object). In this case, classes should not have to call GC.KeepAlive, assuming they do not have a finalizer but rely on SafeHandle to complete the OS handle for them. Although the cost of leaving in a call to GC.KeepAlive might be negligible as measured by performance, the perception that a call to GC.KeepAlive is either necessary or sufficient to solve a lifetime issue that might no longer exist makes the code harder to maintain.",
      "hotToFix": "Remove calls to GC.KeepAlive.",
      "whenToSuppress": "You can suppress this warning only if it is not technically correct to convert to SafeHandle usage in your class.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182293.aspx"
    }
  },
  {
    "id": "CA2006",
    "message": "Use SafeHandle to encapsulate native resources",
    "description": "Use of IntPtr in managed code might indicate a potential security and reliability problem. All uses of IntPtr must be reviewed to determine whether use of a SafeHandle, or similar technology, is required in its place.",
    "details": {
      "typeName": "UseSafeHandleToEncapsulateNativeResources",
      "category": "Microsoft.Reliability",
      "breakingChange": "Non-breaking",
      "cause": "Managed code uses IntPtr to access native resources.",
      "description": "Use of IntPtr in managed code might indicate a potential security and reliability problem. All uses of IntPtr must be reviewed to determine whether the use of a SafeHandle , or a similar technology, is required in its place. Problems will occur if the IntPtr represents some native resource, such as memory, a file handle, or a socket, that the managed code is considered to own. If the managed code owns the resource, it must also release the native resources associated with it, because a failure to do so would cause resource leakage.\nIn such scenarios, security or reliability problems will also exist if multithreaded access is allowed to the IntPtr and a way of releasing the resource that is represented by the IntPtr is provided. These problems involve recycling of the IntPtr value on resource release while simultaneous use of the resource is being made on another thread. This can cause race conditions where one thread can read or write data that is associated with the wrong resource. For example, if your type stores an OS handle as an IntPtr and allows users to call both Close and any other method that uses that handle simultaneously and without some kind of synchronization, your code has a handle recycling problem.\nThis handle recycling problem can cause data corruption and, frequently, a security vulnerability. SafeHandle and its sibling class CriticalHandle provide a mechanism to encapsulate a native handle to a resource so that such threading problems can be avoided. Additionally, you can use SafeHandle and its sibling class CriticalHandle for other threading issues, for example, to carefully control the lifetime of managed objects that contain a copy of the native handle over calls to native methods. In this situation, you can often remove calls to GC.KeepAlive. The performance overhead thay you incur when you use SafeHandle and, to a lesser degree, CriticalHandle, can frequently be reduced through careful design.",
      "hotToFix": "Convert IntPtr usage to SafeHandle to safely manage access to native resources. See the SafeHandle reference topic for examples.",
      "whenToSuppress": "You should not suppress this warning.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182294.aspx"
    }
  },
  {
    "id": "CA2100",
    "message": "Review SQL queries for security vulnerabilities",
    "description": "A method sets the System.Data.IDbCommand.CommandText property by using a string that is built from a string argument to the method. This rule assumes that the string argument contains user input. A SQL command string that is built from user input is vulnerable to SQL injection attacks.",
    "details": {
      "typeName": "ReviewSqlQueriesForSecurityVulnerabilities",
      "category": "Microsoft.Security",
      "breakingChange": "Non-breaking",
      "cause": "A method sets the IDbCommand.CommandText property by using a string that is built from a string argument to the method.",
      "description": "This rule assumes that the string argument contains user input. A SQL command string that is built from user input is vulnerable to SQL injection attacks. In a SQL injection attack, a malicious user supplies input that alters the design of a query in an attempt to damage or gain unauthorized access to the underlying database. Typical techniques include injection of a single quotation mark or apostrophe, which is the SQL literal string delimiter; two dashes, which signifies a SQL comment; and a semicolon, which indicates that a new command follows. If user input must be part of the query, use one of the following, listed in order of effectiveness, to reduce the risk of attack.\nUse a stored procedure. Use a parameterized command string. Validate the user input for both type and content before you build the command string.\nThe following .NET Framework types implement the CommandText property or provide constructors that set the property by using a string argument.\nSystem.Data.Odbc.OdbcCommand and System.Data.Odbc.OdbcDataAdapter System.Data.OleDb.OleDbCommand and System.Data.OleDb.OleDbDataAdapter System.Data.OracleClient.OracleCommand and System.Data.OracleClient.OracleDataAdapter [System.Data.SqlServerCe.SqlCeCommand] and [System.Data.SqlServerCe.SqlCeDataAdapter] System.Data.SqlClient.SqlCommand and System.Data.SqlClient.SqlDataAdapter\nNotice that this rule is violated when the ToString method of a type is used explicitly or implicitly to construct the query string. The following is an example.\nThe rule is violated because a malicious user can override the ToString() method.\nThe rule also is violated when ToString is used implicitly.",
      "hotToFix": "To fix a violation of this rule, use a parameterized query.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the command text does not contain any user input.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182310.aspx"
    }
  },
  {
    "id": "CA2101",
    "message": "Specify marshaling for P/Invoke string arguments",
    "description": "A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.",
    "details": {
      "typeName": "SpecifyMarshalingForPInvokeStringArguments",
      "category": "Microsoft.Globalization",
      "breakingChange": "Non-breaking",
      "cause": "A platform invoke member allows for partially trusted callers, has a string parameter, and does not explicitly marshal the string.",
      "description": "When you convert from Unicode to ANSI, it is possible that not all Unicode characters can be represented in a specific ANSI code page. Best-fit mapping tries to solve this problem by substituting a character for the character that cannot be represented. The use of this feature can cause a potential security vulnerability because you cannot control the character that is chosen. For example, malicious code could intentionally create a Unicode string that contains characters that are not found in a particular code page, which are converted to file system special characters such as \u0027..\u0027 or \u0027/\u0027. Note also that security checks for special characters frequently occur before the string is converted to ANSI.\nBest-fit mapping is the default for the unmanaged conversion, WChar to MByte. Unless you explicitly disable best-fit mapping, your code might contain an exploitable security vulnerability because of this issue.",
      "hotToFix": "To fix a violation of this rule, explicitly marshal string data types.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182319.aspx"
    }
  },
  {
    "id": "CA2102",
    "message": "Catch non-CLSCompliant exceptions in general handlers",
    "description": "A member in an assembly that is not marked by using the RuntimeCompatibilityAttribute or is marked RuntimeCompatibility(WrapNonExceptionThrows \u003d false) contains a catch block that handles System.Exception and does not contain an immediately following general catch block.",
    "details": {
      "typeName": "CatchNonClsCompliantExceptionsInGeneralHandlers",
      "category": "Microsoft.Security",
      "breakingChange": "Non-breaking",
      "cause": "A member in an assembly that is not marked with the RuntimeCompatibilityAttribute or is marked RuntimeCompatibility(WrapNonExceptionThrows \u003d false) contains a catch block that handles System.Exception and does not contain an immediately following general catch block. This rule ignores Visual Basic assemblies.",
      "description": "A catch block that handles Exception catches all Common Language Specification (CLS) compliant exceptions. However, it does not catch non-CLS compliant exceptions. Non-CLS compliant exceptions can be thrown from native code or from managed code that was generated by the Microsoft intermediate language (MSIL) Assembler. Notice that the C# and Visual Basic compilers do not allow non-CLS compliant exceptions to be thrown and Visual Basic does not catch non-CLS compliant exceptions. If the intent of the catch block is to handle all exceptions, use the following general catch block syntax.\nC#: catch {} C++: catch(...) {} or catch(Object^) {}\nAn unhandled non-CLS compliant exception becomes a security issue when previously allowed permissions are removed in the catch block. Because non-CLS compliant exceptions are not caught, a malicious method that throws a non-CLS compliant exception could run with elevated permissions.",
      "hotToFix": "To fix a violation of this rule when the intent is to catch all exceptions, substitute or add a general catch block or mark the assembly RuntimeCompatibility(WrapNonExceptionThrows \u003d true). If permissions are removed in the catch block, duplicate the functionality in the general catch block. If it is not the intent to handle all exceptions, replace the catch block that handles Exception with catch blocks that handle specific exception types.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the try block does not contain any statements that might generate a non-CLS compliant exception. Because any native or managed code might throw a non-CLS compliant exception, this requires knowledge of all code that can be executed in all code paths inside the try block. Notice that non-CLS compliant exceptions are not thrown by the common language runtime.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264489.aspx"
    }
  },
  {
    "id": "CA2103",
    "message": "Review imperative security",
    "description": "A method uses imperative security and might be constructing the permission by using state information or return values that can change as long as the demand is active. Use declarative security whenever possible.",
    "details": {
      "typeName": "ReviewImperativeSecurity",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A method uses imperative security and might be constructing the permission by using state information or return values that can change as long as the demand is active.",
      "description": "Imperative security uses managed objects to specify permissions and security actions during code execution, compared to declarative security, which uses attributes to store permissions and actions in metadata. Imperative security is very flexible because you can set the state of a permission object and select security actions by using information that is not available until run time. Together with that flexibility comes the risk that the runtime information that you use to determine the state of a permission does not remain unchanged as long as the action is in effect.\nUse declarative security whenever possible. Declarative demands are easier to understand.",
      "hotToFix": "Review the imperative security demands to make sure that the state of the permission does not rely on information that can change as long as the permission is being used.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the permission does not rely on changing data. However, it is better to change the imperative demand to its declarative equivalent.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182309.aspx"
    }
  },
  {
    "id": "CA2104",
    "message": "Do not declare read only mutable reference types",
    "description": "An externally visible type contains an externally visible read-only field that is a mutable reference type. A mutable type is a type whose instance data can be modified.",
    "details": {
      "typeName": "DoNotDeclareReadOnlyMutableReferenceTypes",
      "category": "Microsoft.Security",
      "breakingChange": "Non-breaking",
      "cause": "An externally visible type contains an externally visible read-only field that is a mutable reference type.",
      "description": "A mutable type is a type whose instance data can be modified. The System.Text.StringBuilder class is an example of a mutable reference type. It contains members that can change the value of an instance of the class. An example of an immutable reference type is the System.String class. After it has been instantiated, its value can never change.\nThe read-only modifier (readonly (C# Reference) in C#, ReadOnly (Visual Basic) in Visual Basic, and const (C++) in C++) on a reference type field (pointer in C++) prevents the field from being replaced by a different instance of the reference type. However, the modifier does not prevent the instance data of the field from being modified through the reference type.\nRead-only array fields are exempt from this rule but instead cause a violation of the CA2105: Array fields should not be read only rule.",
      "hotToFix": "To fix a violation of this rule, remove the read-only modifier or, if a breaking change is acceptable, replace the field with an immutable type.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the field type is immutable.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182302.aspx"
    }
  },
  {
    "id": "CA2105",
    "message": "Array fields should not be read only",
    "description": "When you apply the read-only (ReadOnly in Visual Basic) modifier to a field that contains an array, the field cannot be changed to reference a different array. However, the elements of the array that are stored in a read-only field can be changed.",
    "details": {
      "typeName": "ArrayFieldsShouldNotBeReadOnly",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected field that holds an array is declared read-only.",
      "description": "When you apply the readonly (ReadOnly in Visual Basic) modifier to a field that contains an array, the field cannot be changed to refer to a different array. However, the elements of the array that are stored in a read-only field can be changed. Code that makes decisions or performs operations that are based on the elements of a read-only array that can be publicly accessed might contain an exploitable security vulnerability.\nNote that having a public field also violates the design rule CA1051: Do not declare visible instance fields.",
      "hotToFix": "To fix the security vulnerability that is identified by this rule, do not rely on the contents of a read-only array that can be publicly accessed. It is strongly recommended that you use one of the following procedures:\nReplace the array with a strongly typed collection that cannot be changed. For more information, see System.Collections.ReadOnlyCollectionBase. Replace the public field with a method that returns a clone of a private array. Because your code does not rely on the clone, there is no danger if the elements are modified.\nIf you chose the second approach, do not replace the field with a property; properties that return arrays adversely affect performance. For more information, see CA1819: Properties should not return arrays.",
      "whenToSuppress": "Exclusion of a warning from this rule is strongly discouraged. Almost no scenarios occur where the contents of a read-only field are unimportant. If this is the case with your scenario, remove the readonly modifier instead of excluding the message.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182299.aspx"
    }
  },
  {
    "id": "CA2106",
    "message": "Secure asserts",
    "description": "A method asserts a permission and no security checks are performed on the caller. Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code.",
    "details": {
      "typeName": "SecureAsserts",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A method asserts a permission and no security checks are performed on the caller.",
      "description": "Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code. A security stack walk stops when a security permission is asserted. If you assert a permission without performing any checks on the caller, the caller could indirectly execute code by using your permissions. Asserts without security checks are permissible only when you are sure that the assert cannot be used in a harmful manner. An assert is harmless if the code you call is harmless, or users cannot pass arbitrary information to code that you call.",
      "hotToFix": "To fix a violation of this rule, add a security demand to the method or its declaring type.",
      "whenToSuppress": "Suppress a warning from this rule only after a careful security review.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182314.aspx"
    }
  },
  {
    "id": "CA2107",
    "message": "Review deny and permit only usage",
    "description": "The PermitOnly method and CodeAccessPermission.Deny security actions should be used only by those who have an advanced knowledge of .NET Framework security. Code that uses these security actions should undergo a security review.",
    "details": {
      "typeName": "ReviewDenyAndPermitOnlyUsage",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A method contains a security check that specifies the PermitOnly or Deny security action.",
      "description": "The Using the PermitOnly Method and CodeAccessPermission.Deny security actions should be used only by those who have an advanced knowledge of .NET Framework security. Code that uses these security actions should undergo a security review.\nDeny alters the default behavior of the stack walk that occurs in response to a security demand. It lets you specify permissions that must not be granted for the duration of the denying method, regardless of the actual permissions of the callers in the call stack. If the stack walk detects a method that is secured by Deny, and if the demanded permission is included in the denied permissions, the stack walk fails. PermitOnly also alters the default behavior of the stack walk. It allows code to specify only those permissions that can be granted, regardless of the permissions of the callers. If the stack walk detects a method that is secured by PermitOnly, and if the demanded permission is not included in the permissions that are specified by the PermitOnly, the stack walk fails.\nCode that relies on these actions should be carefully evaluated for security vulnerabilities because of their limited usefulness and subtle behavior. Consider the following:\nLink Demands are not affected by Deny or PermitOnly. If the Deny or PermitOnly occurs in the same stack frame as the demand that causes the stack walk, the security actions have no effect. Values that are used to construct path-based permissions can usually be specified in multiple ways. Denying access to one form of the path does not deny access to all forms. For example, if a file share \\\\Server\\Share is mapped to a network drive X:, to deny access to a file on the share, you must deny \\\\Server\\Share\\File, X:\\File and every other path that accesses the file. An CodeAccessPermission.Assert can terminate a stack walk before the Deny or PermitOnly is reached. If a Deny has any effect, namely, when a caller has a permission that is blocked by the Deny, the caller can access the protected resource directly, bypassing the Deny. Similarly, if the caller does not have the denied permission, the stack walk would fail without the Deny.",
      "hotToFix": "Any use of these security actions will cause a violation. To fix a violation, do not use these security actions.",
      "whenToSuppress": "Suppress a warning from this rule only after you complete a security review.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182308.aspx"
    }
  },
  {
    "id": "CA2108",
    "message": "Review declarative security on value types",
    "description": "A public or protected value type is secured by Data Access or Link Demands.",
    "details": {
      "typeName": "ReviewDeclarativeSecurityOnValueTypes",
      "category": "Microsoft.Security",
      "breakingChange": "Non Breaking",
      "cause": "A public or protected value type is secured by a Data and Modeling in the .NET Framework or Link Demands.",
      "description": "Value types are allocated and initialized by their default constructors before other constructors execute. If a value type is secured by a Demand or LinkDemand, and the caller does not have permissions that satisfy the security check, any constructor other than the default will fail, and a security exception will be thrown. The value type is not deallocated; it is left in the state set by its default constructor. Do not assume that a caller that passes an instance of the value type has permission to create or access the instance.",
      "hotToFix": "You cannot fix a violation of this rule unless you remove the security check from the type, and use method level security checks in its place. Note that fixing the violation in this manner will not prevent callers with inadequate permissions from obtaining instances of the value type. You must ensure that an instance of the value type, in its default state, does not expose sensitive information, and cannot be used in a harmful manner.",
      "whenToSuppress": "You can suppress a warning from this rule if any caller can obtain instances of the value type in its default state without posing a threat to security.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182307.aspx"
    }
  },
  {
    "id": "CA2109",
    "message": "Review visible event handlers",
    "description": "A public or protected event-handling method was detected. Event-handling methods should not be exposed unless absolutely necessary.",
    "details": {
      "typeName": "ReviewVisibleEventHandlers",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected event-handling method was detected.",
      "description": "An externally visible event-handling method presents a security issue that requires review.\nEvent-handling methods should not be exposed unless absolutely necessary. An event handler, a delegate type, that invokes the exposed method can be added to any event as long as the handler and event signatures match. Events can potentially be raised by any code, and are frequently raised by highly trusted system code in response to user actions such as clicking a button. Adding a security check to an event-handling method does not prevent code from registering an event handler that invokes the method.\nA demand cannot reliably protect a method invoked by an event handler. Security demands help protect code from untrusted callers by examining the callers on the call stack. Code that adds an event handler to an event is not necessarily present on the call stack when the event handler\u0027s methods run. Therefore, the call stack might have only highly trusted callers when the event handler method is invoked. This causes demands made by the event handler method to succeed. Also, the demanded permission might be asserted when the method is invoked. For these reasons, the risk of not fixing a violation of this rule can only be assessed after reviewing the event-handling method. When you review your code, consider the following issues:\nDoes your event handler perform any operations that are dangerous or exploitable, such as asserting permissions or suppressing unmanaged code permission? What are the security threats to and from your code because it can run at any time with only highly trusted callers on the stack?",
      "hotToFix": "To fix a violation of this rule, review the method and evaluate the following:\nCan you make the event-handling method non-public? Can you move all dangerous functionality out of the event handler? If a security demand is imposed, can this be accomplished in some other manner?",
      "whenToSuppress": "Suppress a warning from this rule only after a careful security review to make sure that your code does not pose a security threat.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182312.aspx"
    }
  },
  {
    "id": "CA2111",
    "message": "Pointers should not be visible",
    "description": "A pointer is not private, internal, or read-only. Malicious code can change the value of the pointer, which potentially gives access to arbitrary locations in memory or causes application or system failures.",
    "details": {
      "typeName": "PointersShouldNotBeVisible",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected System.IntPtr or System.UIntPtr field is not read-only.",
      "description": "IntPtr and UIntPtr are pointer types that are used to access unmanaged memory. If a pointer is not private, internal, or read-only, malicious code can change the value of the pointer, potentially allowing access to arbitrary locations in memory or causing application or system failures.\nIf you intend to secure access to the type that contains the pointer field, see CA2112: Secured types should not expose fields.",
      "hotToFix": "Secure the pointer by making it read-only, internal, or private.",
      "whenToSuppress": "Suppress a warning from this rule if you do not rely on the value of the pointer.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182306.aspx"
    }
  },
  {
    "id": "CA2112",
    "message": "Secured types should not expose fields",
    "description": "A public or protected type contains public fields and is secured by Link Demands. If code has access to an instance of a type that is secured by a link demand, the code does not have to satisfy the link demand to access the fields of the type.",
    "details": {
      "typeName": "SecuredTypesShouldNotExposeFields",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected type contains public fields and is secured by a Link Demands.",
      "description": "If code has access to an instance of a type that is secured by a link demand, the code does not have to satisfy the link demand to access the type\u0027s fields.",
      "hotToFix": "To fix a violation of this rule, make the fields nonpublic and add public properties or methods that return the field data. LinkDemand security checks on types protect access to the type\u0027s properties and methods. However, code access security does not apply to fields.",
      "whenToSuppress": "Both for security issues and for good design, you should fix violations by making the public fields nonpublic. You can suppress a warning from this rule if the field does not hold information that should remain secured, and you do not rely on the contents of the field.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182318.aspx"
    }
  },
  {
    "id": "CA2114",
    "message": "Method security should be a superset of type",
    "description": "A method should not have both method-level and type-level declarative security for the same action.",
    "details": {
      "typeName": "MethodSecurityShouldBeASupersetOfType",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A type has declarative security and one of its methods has declarative security for the same security action, and the security action is not Link Demands or Inheritance Demands, and the permissions checked by the type are not a subset of the permissions checked by the method.",
      "description": "A method should not have both a method-level and type-level declarative security for the same action. The two checks are not combined; only the method-level demand is applied. For example, if a type demands permission X, and one of its methods demands permission Y, code does not have to have permission X to execute the method.",
      "hotToFix": "Review your code to make sure that both actions are required. If both actions are required, make sure that the method-level action includes the security specified at the type level. For example, if your type demands permission X, and its method must also demand permission Y, the method should explicitly demand X and Y.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the method does not require the security specified by the type. However, this is not an ordinary scenario and might indicate a need for a careful design review.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182304.aspx"
    }
  },
  {
    "id": "CA2115",
    "message": "Call GC.KeepAlive when using native resources",
    "description": "This rule detects errors that might occur because an unmanaged resource is being finalized while it is still being used in unmanaged code.",
    "details": {
      "typeName": "CallGCKeepAliveWhenUsingNativeResources",
      "category": "Microsoft.Security",
      "breakingChange": "Non Breaking",
      "cause": "A method declared in a type with a finalizer references a System.IntPtr or System.UIntPtr field, but does not call GC.KeepAlive.",
      "description": "Garbage collection finalizes an object if there are no more references to it in managed code. Unmanaged references to objects do not prevent garbage collection. This rule detects errors that might occur because an unmanaged resource is being finalized while it is still being used in unmanaged code.\nThis rule assumes that IntPtr and UIntPtr fields store pointers to unmanaged resources. Because the purpose of a finalizer is to free unmanaged resources, the rule assumes that the finalizer will free the unmanaged resource pointed to by the pointer fields. This rule also assumes that the method is referencing the pointer field to pass the unmanaged resource to unmanaged code.",
      "hotToFix": "To fix a violation of this rule, add a call to KeepAlive to the method, passing the current instance (this in C# and C++) as the argument. Position the call after the last line of code where the object must be protected from garbage collection. Immediately after the call to KeepAlive, the object is again considered ready for garbage collection assuming that there are no managed references to it.",
      "whenToSuppress": "This rule makes some assumptions that can lead to false positives. You can safely suppress a warning from this rule if:\nThe finalizer does not free the contents of the IntPtr or UIntPtr field referenced by the method. The method does not pass the IntPtr or UIntPtr field to unmanaged code.\nCarefully review other messages before excluding them. This rule detects errors that are difficult to reproduce and debug.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182300.aspx"
    }
  },
  {
    "id": "CA2116",
    "message": "APTCA methods should only call APTCA methods",
    "description": "When the APTCA (AllowPartiallyTrustedCallersAttribute) is present on a fully trusted assembly, and the assembly executes code in another assembly that does not allow for partially trusted callers, a security exploit is possible.",
    "details": {
      "typeName": "AptcaMethodsShouldOnlyCallAptcaMethods",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A method in an assembly with the System.Security.AllowPartiallyTrustedCallersAttribute attribute calls a method in an assembly that does not have the attribute.",
      "description": "By default, public or protected methods in assemblies with strong names are implicitly protected by a Link Demands for full trust; only fully trusted callers can access a strong-named assembly. Strong-named assemblies marked with the AllowPartiallyTrustedCallersAttribute (APTCA) attribute do not have this protection. The attribute disables the link demand, making the assembly accessible to callers that do not have full trust, such as code executing from an intranet or the Internet.\nWhen the APTCA attribute is present on a fully trusted assembly, and the assembly executes code in another assembly that does not allow partially trusted callers, a security exploit is possible. If two methods M1 and M2 meet the following conditions, malicious callers can use the method M1 to bypass the implicit full trust link demand that protects M2:\nM1 is a public method declared in a fully trusted assembly that has the APTCA attribute. M1 calls a method M2 outside M1\u0027s assembly. M2\u0027s assembly does not have the APTCA attribute and, therefore, should not be executed by or on behalf of callers that are partially trusted.\nA partially trusted caller X can call method M1, causing M1 to call M2. Because M2 does not have the APTCA attribute, its immediate caller (M1) must satisfy a link demand for full trust; M1 has full trust and therefore satisfies this check. The security risk is because X does not participate in satisfying the link demand that protects M2 from untrusted callers. Therefore, methods with the APTCA attribute must not call methods that do not have the attribute.",
      "hotToFix": "If the APCTA attribute is required, use a demand to protect the method that calls into the full trust assembly. The exact permissions you demand will depend on the functionality exposed by your method. If it is possible, protect the method with a demand for full trust to ensure that the underlying functionality is not exposed to partially trusted callers. If this is not possible, select a set of permissions that effectively protects the exposed functionality. For more information about demands, see Demands.",
      "whenToSuppress": "To safely suppress a warning from this rule, you must ensure that the functionality exposed by your method does not directly or indirectly allow callers to access sensitive information, operations, or resources that can be used in a destructive manner.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182297.aspx"
    }
  },
  {
    "id": "CA2117",
    "message": "APTCA types should only extend APTCA base types",
    "description": "When the APTCA is present on a fully trusted assembly, and a type in the assembly inherits from a type that does not allow for partially trusted callers, a security exploit is possible.",
    "details": {
      "typeName": "AptcaTypesShouldOnlyExtendAptcaBaseTypes",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected type in an assembly with the System.Security.AllowPartiallyTrustedCallersAttribute attribute inherits from a type declared in an assembly that does not have the attribute.",
      "description": "By default, public or protected types in assemblies with strong names are implicitly protected by an Inheritance Demands for full trust. Strong-named assemblies marked with the AllowPartiallyTrustedCallersAttribute (APTCA) attribute do not have this protection. The attribute disables the inheritance demand. This makes exposed types declared in the assembly inheritable by types that do not have full trust.\nWhen the APTCA attribute is present on a fully trusted assembly, and a type in the assembly inherits from a type that does not allow partially trusted callers, a security exploit is possible. If two types T1 and T2 meet the following conditions, malicious callers can use the type T1 to bypass the implicit full trust inheritance demand that protects T2:\nT1 is a public type declared in a fully trusted assembly that has the APTCA attribute. T1 inherits from a type T2 outside its assembly. T2\u0027s assembly does not have the APTCA attribute and, therefore, should not be inheritable by types in partially trusted assemblies.\nA partially trusted type X can inherit from T1, which gives it access to inherited members declared in T2. Because T2 does not have the APTCA attribute, its immediate derived type (T1) must satisfy an inheritance demand for full trust; T1 has full trust and therefore satisfies this check. The security risk is because X does not participate in satisfying the inheritance demand that protects T2 from untrusted subclassing. For this reason, types with the APTCA attribute must not extend types that do not have the attribute.\nAnother security issue, and perhaps a more common one, is that the derived type (T1) can, through programmer error, expose protected members from the type that requires full trust (T2). When this occurs, untrusted callers gain access to information that should be available only to fully trusted types.",
      "hotToFix": "If the type reported by the violation is in an assembly that does not require the APTCA attribute, remove it.\nIf the APTCA attribute is required, add an inheritance demand for full trust to the type. This protects against inheritance by untrusted types.\nIt is possible to fix a violation by adding the APTCA attribute to the assemblies of the base types reported by the violation. Do not do this without first conducting an intensive security review of all code in the assemblies and all code that depends on the assemblies.",
      "whenToSuppress": "To safely suppress a warning from this rule, you must ensure that protected members exposed by your type do not directly or indirectly allow untrusted callers to access sensitive information, operations, or resources that can be used in a destructive manner.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182298.aspx"
    }
  },
  {
    "id": "CA2118",
    "message": "Review SuppressUnmanagedCodeSecurityAttribute usage",
    "description": "SuppressUnmanagedCodeSecurityAttribute changes the default security system behavior for members that execute unmanaged code that uses COM interop or operating system invocation. This attribute is primarily used to increase performance; however, the performance gains come together with significant security risks.",
    "details": {
      "typeName": "ReviewSuppressUnmanagedCodeSecurityUsage",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected type or member has the System.Security.SuppressUnmanagedCodeSecurityAttribute attribute.",
      "description": "SuppressUnmanagedCodeSecurityAttribute changes the default security system behavior for members that execute unmanaged code using COM interop or platform invocation. Generally, the system makes a Data and Modeling in the .NET Framework for unmanaged code permission. This demand occurs at run time for every invocation of the member, and checks every caller in the call stack for permission. When the attribute is present, the system makes a Link Demands for the permission: the permissions of the immediate caller are checked when the caller is JIT-compiled.\nThis attribute is primarily used to increase performance; however, the performance gains come with significant security risks. If you place the attribute on public members that call native methods, the callers in the call stack (other than the immediate caller) do not need unmanaged code permission to execute unmanaged code. Depending on the public member\u0027s actions and input handling, it might allow untrustworthy callers to access functionality normally restricted to trustworthy code.\nThe .NET Framework relies on security checks to prevent callers from gaining direct access to the current process\u0027s address space. Because this attribute bypasses normal security, your code poses a serious threat if it can be used to read or write to the process\u0027s memory. Note that the risk is not limited to methods that intentionally provide access to process memory; it is also present in any scenario where malicious code can achieve access by any means, for example, by providing surprising, malformed, or invalid input.\nThe default security policy does not grant unmanaged code permission to an assembly unless it is executing from the local computer or is a member of one of the following groups:\nMy Computer Zone Code Group Microsoft Strong Name Code Group ECMA Strong Name Code Group",
      "hotToFix": "Carefully review your code to ensure that this attribute is absolutely necessary. If you are unfamiliar with managed code security, or do not understand the security implications of using this attribute, remove it from your code. If the attribute is required, you must ensure that callers cannot use your code maliciously. If your code does not have permission to execute unmanaged code, this attribute has no effect and should be removed.",
      "whenToSuppress": "To safely suppress a warning from this rule, you must ensure that your code does not provide callers access to native operations or resources that can be used in a destructive manner.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182311.aspx"
    }
  },
  {
    "id": "CA2119",
    "message": "Seal methods that satisfy private interfaces",
    "description": "An inheritable public type provides an overridable method implementation of an internal (Friend in Visual Basic) interface. To fix a violation of this rule, prevent the method from being overridden outside the assembly.",
    "details": {
      "typeName": "SealMethodsThatSatisfyPrivateInterfaces",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "An inheritable public type provides an overridable method implementation of an internal (Friend in Visual Basic) interface.",
      "description": "Interface methods have public accessibility, which cannot be changed by the implementing type. An internal interface creates a contract that is not intended to be implemented outside the assembly that defines the interface. A public type that implements a method of an internal interface using the virtual (Overridable in Visual Basic) modifier allows the method to be overridden by a derived type that is outside the assembly. If a second type in the defining assembly calls the method and expects an internal-only contract, behavior might be compromised when, instead, the overridden method in the outside assembly is executed. This creates a security vulnerability.",
      "hotToFix": "To fix a violation of this rule, prevent the method from being overridden outside the assembly by using one of the following:\nMake the declaring type sealed (NotInheritable in Visual Basic). Change the accessibility of the declaring type to internal (Friend in Visual Basic). Remove all public constructors from the declaring type. Implement the method without using the virtual modifier. Implement the method explicitly.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if, after careful review, no security issues exist that might be exploitable if the method is overridden outside the assembly.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182313.aspx"
    }
  },
  {
    "id": "CA2120",
    "message": "Secure serialization constructors",
    "description": "This type has a constructor that takes a System.Runtime.Serialization.SerializationInfo object and a System.Runtime.Serialization.StreamingContext object (the signature of the serialization constructor). This constructor is not secured by a security check, but one or more of the regular constructors in the type are secured.",
    "details": {
      "typeName": "SecureSerializationConstructors",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "The type implements the System.Runtime.Serialization.ISerializable interface, is not a delegate or interface, and is declared in an assembly that allows partially trusted callers. The type has a constructor that takes a System.Runtime.Serialization.SerializationInfo object and a System.Runtime.Serialization.StreamingContext object (the signature of the serialization constructor). This constructor is not secured by a security check, but one or more of the regular constructors in the type is secured.",
      "description": "This rule is relevant for types that support custom serialization. A type supports custom serialization if it implements the System.Runtime.Serialization.ISerializable interface. The serialization constructor is required and is used to de-serialize, or re-create objects that have been serialized using the ISerializable.GetObjectData method. Because the serialization constructor allocates and initializes objects, security checks that are present on regular constructors must also be present on the serialization constructor. If you violate this rule, callers that could not otherwise create an instance could use the serialization constructor to do this.",
      "hotToFix": "To fix a violation of this rule, protect the serialization constructor with security demands that are identical to those protecting other constructors.",
      "whenToSuppress": "Do not suppress a violation of the rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182317.aspx"
    }
  },
  {
    "id": "CA2121",
    "message": "Static constructors should be private",
    "description": "The system calls the static constructor before the first instance of the type is created or any static members are referenced. If a static constructor is not private, it can be called by code other than the system. Depending on the operations that are performed in the constructor, this can cause unexpected behavior.",
    "details": {
      "typeName": "StaticConstructorsShouldBePrivate",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A type has a static constructor that is not private.",
      "description": "A static constructor, also known as a class constructor, is used to initialize a type. The system calls the static constructor before the first instance of the type is created or any static members are referenced. The user has no control over when the static constructor is called. If a static constructor is not private, it can be called by code other than the system. Depending on the operations that are performed in the constructor, this can cause unexpected behavior.\nThis rule is enforced by the C# and Visual Basic .NET compilers.",
      "hotToFix": "Violations are typically caused by one of the following actions:\nYou defined a static constructor for your type and did not make it private. The programming language compiler added a default static constructor to your type and did not make it private.\nTo fix the first kind of violation, make your static constructor private. To fix the second kind, add a private static constructor to your type.",
      "whenToSuppress": "Do not suppress these violations. If your software design requires an explicit call to a static constructor, it is likely that the design contains serious flaws and should be reviewed.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182320.aspx"
    }
  },
  {
    "id": "CA2122",
    "message": "Do not indirectly expose methods with link demands",
    "description": "A public or protected member has Link Demands and is called by a member that does not perform any security checks. A link demand checks the permissions of the immediate caller only.",
    "details": {
      "typeName": "DoNotIndirectlyExposeMethodsWithLinkDemands",
      "category": "Microsoft.Security",
      "breakingChange": "Non Breaking",
      "cause": "A public or protected member has a Link Demands and is called by a member that does not perform any security checks.",
      "description": "A link demand checks the permissions of the immediate caller only. If a member X makes no security demands of its callers, and calls code protected by a link demand, a caller without the necessary permission can use X to access the protected member.",
      "hotToFix": "Add a security Data and Modeling in the .NET Framework or link demand to the member so that it no longer provides unsecured access to the link demand-protected member.",
      "whenToSuppress": "To safely suppress a warning from this rule, you must make sure that your code does not grant its callers access to operations or resources that can be used in a destructive manner.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182303.aspx"
    }
  },
  {
    "id": "CA2123",
    "message": "Override link demands should be identical to base",
    "description": "This rule matches a method to its base method, which is either an interface or a virtual method in another type, and then compares the link demands on each. If this rule is violated, a malicious caller can bypass the link demand just by calling the unsecured method.",
    "details": {
      "typeName": "OverrideLinkDemandsShouldBeIdenticalToBase",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public or protected method in a public type overrides a method or implements an interface, and does not have the same Link Demands as the interface or virtual method.",
      "description": "This rule matches a method to its base method, which is either an interface or a virtual method in another type, and then compares the link demands on each. A violation is reported if either the method or the base method has a link demand and the other does not.\nIf this rule is violated, a malicious caller can bypass the link demand merely by calling the unsecured method.",
      "hotToFix": "To fix a violation of this rule, apply the same link demand to the overide method or implementation. If this is not possible, mark the method with a full demand or remove the attribute altogether.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182305.aspx"
    }
  },
  {
    "id": "CA2124",
    "message": "Wrap vulnerable finally clauses in outer try",
    "description": "A public or protected method contains a try/finally block. The finally block appears to reset the security state and is not itself enclosed in a finally block.",
    "details": {
      "typeName": "WrapVulnerableFinallyClausesInOuterTry",
      "category": "Microsoft.Security",
      "breakingChange": "Non Breaking",
      "cause": "In versions 1.0 and 1.1 of the .NET Framework, a public or protected method contains a try/catch/finally block. The finally block appears to reset security state and is not enclosed in a finally block.",
      "description": "This rule locates try/finally blocks in code that targets versions 1.0 and 1.1 of the .NET Framework that might be vulnerable to malicious exception filters present in the call stack. If sensitive operations such as impersonation occur in the try block, and an exception is thrown, the filter can execute before the finally block. For the impersonation example, this means that the filter would execute as the impersonated user. Filters are currently implementable only in Visual Basic.",
      "hotToFix": "Place the unwrapped try/finally in an outer try block. See the second example that follows. This forces the finally to execute before filter code.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182322.aspx"
    }
  },
  {
    "id": "CA2126",
    "message": "Type link demands require inheritance demands",
    "description": "A public unsealed type is protected by using a link demand and has an overridable method. Neither the type nor the method is protected by using an inheritance demand.",
    "details": {
      "typeName": "TypeLinkDemandsRequireInheritanceDemands",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A public unsealed type is protected with a link demand, has an overridable method, and neither the type nor the method is protected with an inheritance demand.",
      "description": "A link demand on a method or its declaring type requires the immediate caller of the method to have the specified permission. An inheritance demand on a method requires an overriding method to have the specified permission. An inheritance demand on a type requires a deriving class to have the specified permission.",
      "hotToFix": "To fix a violation of this rule, secure the type or the method with an inheritance demand for the same permission as the link demand.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182321.aspx"
    }
  },
  {
    "id": "CA2127",
    "message": "Members should not have conflicting transparency annotations",
    "description": "Critical code cannot occur in a 100 percent−transparent assembly. This rule analyzes 100 percent−transparent assemblies for any SecurityCritical annotations at the type, field, and method levels.",
    "details": {
      "typeName": "TransparencyAnnotationsShouldNotConflict",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "This rule fires when a type member is marked with a System.Security security attribute that has a different transparency than the security attribute of a container of the member.",
      "description": "Transparency attributes are applied from code elements of larger scope to elements of smaller scope. The transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element. For example, a class that is marked with the SecurityCriticalAttribute attribute cannot contain a method that is marked with the SecuritySafeCriticalAttribute attribute.",
      "hotToFix": "To fix this violation, remove the security attribute from the code element that has lower scope, or change its attribute to be the same as the containing code element.",
      "whenToSuppress": "Do not suppress warnings from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264493.aspx"
    }
  },
  {
    "id": "CA2128",
    "message": "Transparent methods may not use security asserts",
    "description": "This rule analyzes all methods and types in an assembly that is either 100 percent−transparent or mixed transparent/critical, and flags any declarative or imperative use of Assert.",
    "details": {
      "typeName": "SecurityTransparentCodeShouldNotAssert",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "Code that is marked as SecurityTransparentAttribute is not granted sufficient permissions to assert.",
      "description": "This rule analyzes all methods and types in an assembly which is either 100% transparent or mixed transparent/critical, and flags any declarative or imperative usage of Assert.\nAt run time, any calls to Assert from transparent code will cause a InvalidOperationException to be thrown. This can occur in both 100% transparent assemblies, and also in mixed transparent/critical assemblies where a method or type is declared transparent, but includes a declarative or imperative Assert.\nThe .NET Framework 2.0 introduced a feature named transparency. Individual methods, fields, interfaces, classes, and types can be either transparent or critical.\nTransparent code is not allowed to elevate security privileges. Therefore, any permissions granted or demanded of it are automatically passed through the code to the caller or host application domain. Examples of elevations include Asserts, LinkDemands, SuppressUnmanagedCode, and unsafe code.",
      "hotToFix": "To resolve the issue, either mark the code which calls the Assert with the SecurityCriticalAttribute, or remove the Assert.",
      "whenToSuppress": "Do not suppress a message from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264482.aspx"
    }
  },
  {
    "id": "CA2129",
    "message": "Transparent code must not reference security critical items",
    "description": "Methods that are marked by SecurityTransparentAttribute call nonpublic members that are marked as SecurityCritical. This rule analyzes all methods and types in an assembly that is mixed transparent/critical, and flags any calls from transparent code to nonpublic critical code that are not marked as SecurityTreatAsSafe.",
    "details": {
      "typeName": "TransparentMethodsMustNotReferenceCriticalCode",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent method:\nhandles a security critical security exception type has a parameter that is marked as a security critical type has a generic parameter with a security critical constraints has a local variable of a security critical type references a type that is marked as security critical calls a method that is marked as security critical references a field that is marked as security critical returns a type that is marked as security critical",
      "description": "A code element that is marked with the SecurityCriticalAttribute attribute is security critical. A transparent method cannot use a security critical element. If a transparent type attempts to use a security critical type a TypeAccessException, MethodAccessException , or FieldAccessException is raised.",
      "hotToFix": "To fix a violation of this rule, do one of the following:\nMark the code element that uses the security critical code with the SecurityCriticalAttribute attribute - or - Remove the SecurityCriticalAttribute attribute from the code elements that are marked as security critical and instead mark them with the SecuritySafeCriticalAttribute or SecurityTransparentAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264475.aspx"
    }
  },
  {
    "id": "CA2130",
    "message": "Security critical constants should be transparent",
    "description": "Transparency enforcement is not enforced for constant values because compilers inline constant values so that no lookup is required at run time. Constant fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.",
    "details": {
      "typeName": "ConstantsShouldBeTransparent",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A constant field or an enumeration member is marked with the SecurityCriticalAttribute.",
      "description": "Transparency enforcement is not enforced for constant values because compilers inline constant values so that no lookup is required at run time. Constant fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.",
      "hotToFix": "To fix a violation of this rule, remove the SecurityCritical attribute from the field or value.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997446.aspx"
    }
  },
  {
    "id": "CA2131",
    "message": "Security critical types may not participate in type equivalence",
    "description": "A type participates in type equivalence and either the type itself, or a member or field of the type, is marked by using the SecurityCriticalAttribute attribute. This rule occurs on any critical types or types that contain critical methods or fields that are participating in type equivalence. When the CLR detects such a type, it does not load it with a TypeLoadException at run time. Typically, this rule is raised only when users implement type equivalence manually instead of in by relying on tlbimp and the compilers to do the type equivalence.",
    "details": {
      "typeName": "CriticalTypesMustNotParticipateInTypeEquivalence",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A type participates in type equivalence and a either the type itself, or a member or field of the type, is marked with the SecurityCriticalAttribute attribute.",
      "description": "This rule fires on any critical types or types that contain critical methods or fields that are participating in type equivalence. When the CLR detects such a type, it fails to load it with a TypeLoadException at run time. Typically, this rule fires only when users implement type equivalence manually rather than by relying on tlbimp and the compilers to do the type equivalence.",
      "hotToFix": "To fix a violation of this rule, remove the SecurityCritical attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997564.aspx"
    }
  },
  {
    "id": "CA2132",
    "message": "Default constructors must be at least as critical as base type default constructors",
    "description": "Types and members that have the SecurityCriticalAttribute cannot be used by Silverlight application code. Security-critical types and members can be used only by trusted code in the .NET Framework for Silverlight class library. Because a public or protected construction in a derived class must have the same or greater transparency than its base class, a class in an application cannot be derived from a class marked as SecurityCritical.",
    "details": {
      "typeName": "DefaultConstructorsMustHaveConsistentTransparency",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "The transparency attribute of the default constructor of a derived class is not as critical as the transparency of the base class.",
      "description": "Types and members that have the SecurityCriticalAttribute cannot be used by Silverlight application code. Security-critical types and members can be used only by trusted code in the .NET Framework for Silverlight class library. Because a public or protected construction in a derived class must have the same or greater transparency than its base class, a class in an application cannot be derived from a class marked SecurityCritical.\nFor CoreCLR platform code, if a base type has a public or protected non-transparent default constructor then the derived type must obey the default constructor inheritance rules. The derived type must also have a default constructor and that constructor must be at least as critical default constructor of the base type.",
      "hotToFix": "To fix the violation, remove the type or do not derive from security non-transparent type.",
      "whenToSuppress": "Do not suppress warnings from this rule. Violations of this rule by application code will result in the CoreCLR refusing to load the type with a TypeLoadException.",
      "url": "http://msdn.microsoft.com/en-us/library/dd983956.aspx"
    }
  },
  {
    "id": "CA2133",
    "message": "Delegates must bind to methods with consistent transparency",
    "description": "This warning is raised on a method that binds a delegate that is marked by using the SecurityCriticalAttribute to a method that is transparent or that is marked by using the SecuritySafeCriticalAttribute. The warning also is raised on a method that binds a delegate that is transparent or safe-critical to a critical method.",
    "details": {
      "typeName": "DelegatesMustBindWithConsistentTransparency",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "This warning fires on a method that binds a delegate that is marked with the SecurityCriticalAttribute to a method that is transparent or that is marked with the SecuritySafeCriticalAttribute. The warning also fires a method that binds a delegate that is transparent or safe-critical to a critical method.",
      "description": "Delegate types and the methods that they bind to must have consistent transparency. Transparent and safe-critical delegates may only bind to other transparent or safe-critical methods. Similarly, critical delegates may only bind to critical methods. These binding rules ensure that the only code that can invoke a method via a delegate could have also invoked the same method directly. For example, binding rules prevent transparent code from calling critical code directly via a transparent delegate.",
      "hotToFix": "To fix a violation of this warning, change the transparency of the delegate or of the method that it binds so that the transparency of the two are equivalent.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997710.aspx"
    }
  },
  {
    "id": "CA2134",
    "message": "Methods must keep consistent transparency when overriding base methods",
    "description": "This rule is raised when a method marked by using the SecurityCriticalAttribute overrides a method that is transparent or marked by using the SecuritySafeCriticalAttribute. The rule also is raised when a method that is transparent or marked by using the SecuritySafeCriticalAttribute overrides a method that is marked by using a SecurityCriticalAttribute. The rule is applied when overriding a virtual method or implementing an interface.",
    "details": {
      "typeName": "MethodsMustOverrideWithConsistentTransparency",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "This rule fires when a method marked with the SecurityCriticalAttribute overrides a method that is transparent or marked with the SecuritySafeCriticalAttribute. The rule also fires when a method that is transparent or marked with the SecuritySafeCriticalAttribute overrides a method that is marked with a SecurityCriticalAttribute.\nThe rule is applied when overriding a virtual method or implementing an interface.",
      "description": "This rule fires on attempts to change the security accessibility of a method further up the inheritance chain. For example, if a virtual method in a base class is transparent or safe-critical, then the derived class must override it with a transparent or safe-critical method. Conversely, if the virtual is security critical, the derived class must override it with a security critical method. The same rule applies for implementing interface methods.\nTransparency rules are enforced when the code is JIT compiled instead of at runtime, so that the transparency calculation does not have dynamic type information. Therefore, the result of the transparency calculation must be able to be determined solely from the static types being JIT-compiled, regardless of the dynamic type.",
      "hotToFix": "To fix a violation of this rule, change the transparency of the method that is overriding a virtual method or implementing an interface to match the transparency of the virtual or interface method.",
      "whenToSuppress": "Do not suppress warnings from this rule. Violations of this rule will result in a runtime TypeLoadException for assemblies that use level 2 transparency.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997447.aspx"
    }
  },
  {
    "id": "CA2135",
    "message": "Level 2 assemblies should not contain LinkDemands",
    "description": "LinkDemands are deprecated in the level 2 security rule set. Instead of using LinkDemands to enforce security at JIT compilation time, mark the methods, types, and fields by using the SecurityCriticalAttribute attribute.",
    "details": {
      "typeName": "SecurityRuleSetLevel2MethodsShouldNotBeProtectedWithLinkDemands",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A class or class member is using a LinkDemand in an application that is using Level 2 security.",
      "description": "LinkDemands are deprecated in the level 2 security rule set. Instead of using LinkDemands to enforce security at just-in-time (JIT) compilation time, mark the methods, types, and fields with the SecurityCriticalAttribute attribute.",
      "hotToFix": "To fix a violation of this rule, remove the LinkDemand and mark the type or member with the SecurityCriticalAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997569.aspx"
    }
  },
  {
    "id": "CA2136",
    "message": "Members should not have conflicting transparency annotations",
    "description": "Transparency attributes are applied from code elements of larger scope to elements of smaller scope. The transparency attributes of code elements that have larger scope take precedence over transparency attributes of code elements that are contained in the first element. For example, a class that is marked by using the SecurityCriticalAttribute attribute cannot contain a method that is marked by using the SecuritySafeCriticalAttribute attribute.",
    "details": {
      "typeName": "TransparencyAnnotationsShouldNotConflict",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "This rule fires when a type member is marked with a System.Security security attribute that has a different transparency than the security attribute of a container of the member.",
      "description": "Transparency attributes are applied from code elements of larger scope to elements of smaller scope. The transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element. For example, a class that is marked with the SecurityCriticalAttribute attribute cannot contain a method that is marked with the SecuritySafeCriticalAttribute attribute.",
      "hotToFix": "To fix this violation, remove the security attribute from the code element that has lower scope, or change its attribute to be the same as the containing code element.",
      "whenToSuppress": "Do not suppress warnings from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264493.aspx"
    }
  },
  {
    "id": "CA2137",
    "message": "Transparent methods must contain only verifiable IL",
    "description": "A method contains unverifiable code or returns a type by reference. This rule is raised on attempts by security transparent code to execute unverifiable microsoft intermediate language (MISL). However, the rule does not contain a full IL verifier, and instead uses heuristics to catch most violations of MSIL verification.",
    "details": {
      "typeName": "TransparentMethodsMustBeVerifiable",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A method contains unverifiable code or returns a type by reference.",
      "description": "This rule fires on attempts by security transparent code to execute unverifiable MSIL (Microsoft Intermediate Language). However, the rule does not contain a full IL verifier, and instead uses heuristics to catch most violations of MSIL verification.\nTo be certain that your code contains only verifiable MSIL, run Peverify.exe (PEVerify Tool) on your assembly. Run PEVerify with the /transparent option which limits the output to only unverifiable transparent methods which would cause an error. If the /transparent option is not used, PEVerify also verifies critical methods that are allowed to contain unverifiable code.",
      "hotToFix": "To fix a violation of this rule, mark the method with the SecurityCriticalAttribute or SecuritySafeCriticalAttribute attribute, or remove the unverifiable code.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd983954.aspx"
    }
  },
  {
    "id": "CA2138",
    "message": "Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute",
    "description": "A security transparent method calls a method that is marked by using the SuppressUnmanagedCodeSecurityAttribute attribute.",
    "details": {
      "typeName": "TransparentMethodsMustNotCallSuppressUnmanagedCodeSecurityMethods",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A security transparent method calls a method that is marked with the SuppressUnmanagedCodeSecurityAttribute attribute.",
      "description": "This rule fires on any transparent method that calls directly into native code, for example, by using a via a P/Invoke (platform invoke) call. P/Invoke and COM interop methods that are marked with the SuppressUnmanagedCodeSecurityAttribute attribute result in a LinkDemand being done against the calling method. Because security transparent code cannot satisfy LinkDemands, the code also cannot call methods that are marked with the SuppressUnmanagedCodeSecurity attribute, or methods of class that is marked with SuppressUnmanagedCodeSecurity attribute. The method will fail, or the demand will be converted to a full demand.\nViolations of this rule lead to a MethodAccessException in the Level 2 security transparency model, and a full demand for UnmanagedCode in the Level 1 transparency model.",
      "hotToFix": "To fix a violation of this rule, remove the SuppressUnmanagedCodeSecurityAttribute attribute and mark the method with the SecurityCriticalAttribute or the SecuritySafeCriticalAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997711.aspx"
    }
  },
  {
    "id": "CA2139",
    "message": "Transparent methods may not use the HandleProcessCorruptingExceptions attribute",
    "description": "This rule is raised by any method that is transparent and attempts to handle a process corrupting exception by using the HandleProcessCorruptedStateExceptionsAttribute attribute. A process corrupting exception is a CLR version 4.0 exception classification of exceptions such as AccessViolationException. The HandleProcessCorruptedStateExceptionsAttribute attribute may be used only by security critical methods, and will be ignored if it is applied to a transparent method.",
    "details": {
      "typeName": "TransparentMethodsMustNotHandleProcessCorruptingExceptions",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent method is marked with the HandleProcessCorruptedStateExceptionsAttribute attribute.",
      "description": "This rule fires any method which is transparent and attempts to handle a process corrupting exception by using the HandleProcessCorruptedStateExceptionsAttribute attribute. A process corrupting exception is a CLR version 4.0 exception classification of exceptions such AccessViolationException. The HandleProcessCorruptedStateExceptionsAttribute attribute may only be used by security critical methods, and will be ignored if it is applied to a transparent method. To handle process corrupting exceptions, this method must become security critical or security safe-critical.",
      "hotToFix": "To fix a violation of this rule, remove the HandleProcessCorruptedStateExceptionsAttribute attribute, or mark the method with the SecurityCriticalAttribute or the SecuritySafeCriticalAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997565.aspx"
    }
  },
  {
    "id": "CA2140",
    "message": "Transparent code must not reference security critical items",
    "description": "A code element that is marked by using the SecurityCriticalAttribute attribute is security critical. A transparent method cannot use a security critical element. If a transparent type attempts to use a security critical type, a TypeAccessException, MethodAccessException, or FieldAccessException is raised.",
    "details": {
      "typeName": "TransparentMethodsMustNotReferenceCriticalCode",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent method:\nhandles a security critical security exception type has a parameter that is marked as a security critical type has a generic parameter with a security critical constraints has a local variable of a security critical type references a type that is marked as security critical calls a method that is marked as security critical references a field that is marked as security critical returns a type that is marked as security critical",
      "description": "A code element that is marked with the SecurityCriticalAttribute attribute is security critical. A transparent method cannot use a security critical element. If a transparent type attempts to use a security critical type a TypeAccessException, MethodAccessException , or FieldAccessException is raised.",
      "hotToFix": "To fix a violation of this rule, do one of the following:\nMark the code element that uses the security critical code with the SecurityCriticalAttribute attribute - or - Remove the SecurityCriticalAttribute attribute from the code elements that are marked as security critical and instead mark them with the SecuritySafeCriticalAttribute or SecurityTransparentAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264475.aspx"
    }
  },
  {
    "id": "CA2141",
    "message": "CA2141:Transparent methods must not satisfy LinkDemands",
    "description": "A security transparent method calls a method in an assembly that is not marked by using the APTCA, or a security transparent method satisfies a LinkDemand for a type or a method.",
    "details": {
      "typeName": "TransparentMethodsMustNotSatisfyLinkDemands",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A security transparent method calls a method in an assembly that is not marked with the AllowPartiallyTrustedCallersAttribute (APTCA) attribute, or a security transparent method satisfies a SecurityAction.LinkDemand for a type or a method.",
      "description": "Satisfying a LinkDemand is a security sensitive operation which can cause unintentional elevation of privilege. Security transparent code must not satisfy LinkDemands, because it is not subject to the same security audit requirements as security critical code. Transparent methods in security rule set level 1 assemblies will cause all LinkDemands they satisfy to be converted to full demands at run time, which can cause performance problems. In security rule set level 2 assemblies, transparent methods will fail to compile in the just-in-time (JIT) compiler if they attempt to satisfy a LinkDemand.\nIn assemblies that usee Level 2 security, attempts by a security transparent method to satisfy a LinkDemand or call a method in a non-APTCA assembly raises a MethodAccessException; in Level 1 assemblies the LinkDemand becomes a full Demand.",
      "hotToFix": "To fix a violation of this rule, mark the accessing method with the SecurityCriticalAttribute or SecuritySafeCriticalAttribute attribute, or remove the LinkDemand from the accessed method.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997445.aspx"
    }
  },
  {
    "id": "CA2142",
    "message": "Transparent code should not be protected with LinkDemands",
    "description": "This rule is raised on transparent methods that require LinkDemands to access them. Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions.",
    "details": {
      "typeName": "TransparentMethodsShouldNotBeProtectedWithLinkDemands",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent method requires a LinkDemand or other security demand.",
      "description": "This rule fires on transparent methods which require LinkDemands to access them. Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Because transparent methods are supposed to be security neutral, they should not be making any security decisions. Additionally, safe critical code, which does make security decisions, should not be relying on transparent code to have previously made such a decision.",
      "hotToFix": "To fix a violation of this rule, remove the link demand on the transparent method or mark the method with SecuritySafeCriticalAttribute attribute if it is performing security checks, such as security demands.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997567.aspx"
    }
  },
  {
    "id": "CA2143",
    "message": "Transparent methods should not use security demands",
    "description": "Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Security transparent code should use full demands to make security decisions and safe-critical code should not rely on transparent code to have made the full demand.",
    "details": {
      "typeName": "TransparentMethodsShouldNotDemand",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A tranparent type or method is declaratively marked with a System.Security.Permissions.SecurityAction.Demand demand or the method calls the CodeAccessPermission.Demand method.",
      "description": "Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Security transparent code should use full demands to make security decisions and safe-critical code should not rely on transparent code to have made the full demand. Any code that performs security checks, such as security demands, should be safe-critical instead.",
      "hotToFix": "In general, to fix a violation of this rule, mark the method with the SecuritySafeCriticalAttribute attribute. You can also remove the demand.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997566.aspx"
    }
  },
  {
    "id": "CA2144",
    "message": "Transparent code should not load assemblies from byte arrays",
    "description": "The security review for transparent code is not as complete as the security review for critical code because transparent code cannot perform security sensitive actions. Assemblies that are loaded from a byte array might not be noticed in transparent code, and that byte array might contain critical, or more important safe-critical code, that does have to be audited.",
    "details": {
      "typeName": "TransparentMethodsShouldNotLoadAssembliesFromByteArrays",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent method loads an assembly from a byte array using one of the following methods:\nLoad Load Load",
      "description": "The security review for transparent code is not as thorough as the security review for critical code, because transparent code cannot perform security sensitive actions. Assemblies loaded from a byte array might not be noticed in transparent code, and that byte array might contain critical, or more importantly safe-critical code, that does need to be audited. Therefore, transparent code should not load assemblies from a byte array.",
      "hotToFix": "To fix a violation of this rule, mark the method that is loading the assembly with the SecurityCriticalAttribute or the SecuritySafeCriticalAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997568.aspx"
    }
  },
  {
    "id": "CA2145",
    "message": "Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute",
    "description": "Methods that are decorated by the SuppressUnmanagedCodeSecurityAttribute attribute have an implicit LinkDemand put upon any method that calls it. This LinkDemand requires that the calling code be security critical. Marking the method that uses SuppressUnmanagedCodeSecurity by using the SecurityCriticalAttribute attribute makes this requirement more obvious for callers of the method.",
    "details": {
      "typeName": "TransparentMethodsShouldNotUseSuppressUnmanagedCodeSecurity",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent method, a method that is marked with the SecuritySafeCriticalAttribute method, or a type that contains a method is marked with the SuppressUnmanagedCodeSecurityAttribute attribute.",
      "description": "Methods decorated with the SuppressUnmanagedCodeSecurityAttribute attribute have an implicit LinkDemand placed upon any method that calls it. This LinkDemand requires that the calling code be security critical. Marking the method that uses SuppressUnmanagedCodeSecurity with the SecurityCriticalAttribute attribute makes this requirement more obvious for callers of the method.",
      "hotToFix": "To fix a violation of this rule, mark the method or type with the SecurityCriticalAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997570.aspx"
    }
  },
  {
    "id": "CA2146",
    "message": "Types must be at least as critical as their base types and interfaces",
    "description": "This rule is raised when a derived type has a security transparency attribute that is not as critical as its base type or implemented interface. Only critical types can derive from critical base types or implement critical interfaces, and only critical or safe-critical types can derive from safe-critical base types or implement safe-critical interfaces.",
    "details": {
      "typeName": "TypesMustBeAtLeastAsCriticalAsBaseTypes",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A transparent type is derived from a type that is marked with the SecuritySafeCriticalAttribute or the SecurityCriticalAttribute, or a type that is marked with the SecuritySafeCriticalAttribute attribute is derived from a type that is marked with the SecurityCriticalAttribute attribute.",
      "description": "This rule fires when a derived type has a security transparency attribute that is not as critical as its base type or implemented interface. Only critical types can derive from critical base types or implement critical interfaces, and only critical or safe-critical types can derive from safe-critical base types or implement safe-critical interfaces. Violations of this rule in level 2 transparency result in a TypeLoadException for the derived type.",
      "hotToFix": "To fix this violation, mark the derived or implementing type with a transparency attribute that is at least as critical as the base type or interface.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dd997443.aspx"
    }
  },
  {
    "id": "CA2147",
    "message": "Transparent methods may not use security asserts",
    "description": "Code that is marked as SecurityTransparentAttribute is not granted sufficient permissions to assert.",
    "details": {
      "typeName": "SecurityTransparentCodeShouldNotAssert",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "Code that is marked as SecurityTransparentAttribute is not granted sufficient permissions to assert.",
      "description": "This rule analyzes all methods and types in an assembly which is either 100% transparent or mixed transparent/critical, and flags any declarative or imperative usage of Assert.\nAt run time, any calls to Assert from transparent code will cause a InvalidOperationException to be thrown. This can occur in both 100% transparent assemblies, and also in mixed transparent/critical assemblies where a method or type is declared transparent, but includes a declarative or imperative Assert.\nThe .NET Framework 2.0 introduced a feature named transparency. Individual methods, fields, interfaces, classes, and types can be either transparent or critical.\nTransparent code is not allowed to elevate security privileges. Therefore, any permissions granted or demanded of it are automatically passed through the code to the caller or host application domain. Examples of elevations include Asserts, LinkDemands, SuppressUnmanagedCode, and unsafe code.",
      "hotToFix": "To resolve the issue, either mark the code which calls the Assert with the SecurityCriticalAttribute, or remove the Assert.",
      "whenToSuppress": "Do not suppress a message from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264482.aspx"
    }
  },
  {
    "id": "CA2149",
    "message": "Transparent methods must not call into native code",
    "description": "This rule is raised on any transparent method that calls directly into native code (for example, through a P/Invoke). Violations of this rule lead to a MethodAccessException in the level 2 transparency model and a full demand for UnmanagedCode in the level 1 transparency model.",
    "details": {
      "typeName": "TransparentMethodsMustNotCallNativeCode",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A method calls a native function through a method stub such as P/Invoke.",
      "description": "This rule fires on any transparent method which calls directly into native code, for example, through a P/Invoke. Violations of this rule lead to a MethodAccessException in the level 2 transparency model, and a full demand for UnmanagedCode in the level 1 transparency model.",
      "hotToFix": "To fix a violation of this rule, mark the method that calls the native code with the SecurityCriticalAttribute or SecuritySafeCriticalAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ee155709.aspx"
    }
  },
  {
    "id": "CA2151",
    "message": "Fields with critical types should be security critical",
    "description": "To use security critical types, the code that references the type must be either security critical or security safe critical. This is true even if the reference is indirect. Therefore, having a security transparent or security safe critical field is misleading because transparent code will still be unable to access the field.",
    "details": {
      "typeName": "",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A security transparent field or a safe critical field is declared. Its type is specified as security critical. For example:\nIn this example, m_field is a security transparent field of a type that is security critical.",
      "description": "To use security critical types, the code that references the type must be either security critical or security safe critical. This is true even if the reference is indirect. For example, when you reference a transparent field that has a critical type, your code must be either security critical or security safe. Therefore, having a security transparent or security safe critical field is misleading because transparent code will still be unable to access the field.",
      "hotToFix": "To fix a violation of this rule, mark the field with the SecurityCriticalAttribute attribute, or make the type that is referenced by the field eith security transparent or safe critical.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dn621098.aspx"
    }
  },
  {
    "id": "CA2200",
    "message": "Rethrow to preserve stack details",
    "description": "An exception is rethrown and the exception is explicitly specified in the throw statement. If an exception is rethrown by specifying the exception in the throw statement, the list of method calls between the original method that threw the exception and the current method is lost.",
    "details": {
      "typeName": "RethrowToPreserveStackDetails",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An exception is re-thrown and the exception is explicitly specified in the throw statement.",
      "description": "Once an exception is thrown, part of the information it carries is the stack trace. The stack trace is a list of the method call hierarchy that starts with the method that throws the exception and ends with the method that catches the exception. If an exception is re-thrown by specifying the exception in the throw statement, the stack trace is restarted at the current method and the list of method calls between the original method that threw the exception and the current method is lost. To keep the original stack trace information with the exception, use the throw statement without specifying the exception.",
      "hotToFix": "To fix a violation of this rule, re-throw the exception without specifying the exception explicitly.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182363.aspx"
    }
  },
  {
    "id": "CA2201",
    "message": "Do not raise reserved exception types",
    "description": "This makes the original error difficult to detect and debug.",
    "details": {
      "typeName": "DoNotRaiseReservedExceptionTypes",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking",
      "cause": "A method raises an exception type that is too general or that is reserved by the runtime.",
      "description": "The following exception types are too general to provide sufficient information to the user:\nSystem.Exception System.ApplicationException System.SystemException\nThe following exception types are reserved and should be thrown only by the common language runtime:\nSystem.ExecutionEngineException System.IndexOutOfRangeException System.NullReferenceException System.OutOfMemoryException\nDo Not Throw General Exceptions\nIf you throw a general exception type, such as Exception or SystemException in a library or framework, it forces consumers to catch all exceptions, including unknown exceptions that they do not know how to handle.\nInstead, either throw a more derived type that already exists in the framework, or create your own type that derives from Exception.\nThrow Specific Exceptions\nThe following table shows parameters and which exceptions to throw when you validate the parameter, including the value parameter in the set accessor of a property:\nWhen an operation is invalid for the current state of an object    throw System.InvalidOperationException\nWhen an operation is performed on an object that has been disposed    throw System.ObjectDisposedException\nWhen an operation is not supported (such as in an overridden Stream.Write in a Stream opened for reading)    throw System.NotSupportedException\nWhen a conversion would result in an overflow (such as in a explicit cast operator overload)    throw System.OverflowException\nFor all other situations, consider creating your own type that derives from Exception and throw that.",
      "hotToFix": "To fix a violation of this rule, change the type of the thrown exception to a specific type that is not one of the reserved types.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182338.aspx"
    }
  },
  {
    "id": "CA2202",
    "message": "Do not dispose objects multiple times",
    "description": "A method implementation contains code paths that could cause multiple calls to System.IDisposable.Dispose or a Dispose equivalent (such as a Close() method on some types) on the same object.",
    "details": {
      "typeName": "DoNotDisposeObjectsMultipleTimes",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A method implementation contains code paths that could cause multiple calls to IDisposable.Dispose or a Dispose equivalent, such as a Close() method on some types, on the same object.",
      "description": "A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.",
      "hotToFix": "To fix a violation of this rule, change the implementation so that regardless of the code path, Dispose is called only one time for the object.",
      "whenToSuppress": "Do not suppress a warning from this rule. Even if Dispose for the object is known to be safely callable multiple times, the implementation might change in the future.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182334.aspx"
    }
  },
  {
    "id": "CA2204",
    "message": "Literals should be spelled correctly",
    "description": "A literal string in a method body contains one or more words that are not recognized by the Microsoft spelling checker library.",
    "details": {
      "typeName": "LiteralsShouldBeSpelledCorrectly",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A method passes a literal string to that is used in a parameter or property that requires a localized string and the literal string contains one or more words that are not recognized by the Microsoft spelling checker library.",
      "description": "This rule checks a literal string that is passed as a value to a parameter or property when one or more of the following cases is true:\nThe LocalizableAttribute attribute of the parameter or property is set to true. The parameter or property name contains \"Text\", \"Message\", or \"Caption\". The name of the string parameter that is passed to a Console.Write or Console.WriteLine method is either \"value\" or \"format\".\nThis rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token. For information about the parsing algorithm, see CA1704: Identifiers should be spelled correctly.\nBy default, the English (en) version of the spelling checker is used.",
      "hotToFix": "To fix a violation of this rule, correct the spelling of the word or add the word to a custom dictionary. For information about how to use custom dictionaries, see How to: Customize the Code Analysis Dictionary.",
      "whenToSuppress": "Do not suppress a warning from this rule. Correctly spelled words reduce the learning curve required for new software libraries.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264488.aspx"
    }
  },
  {
    "id": "CA2205",
    "message": "Use managed equivalents of Win32 API",
    "description": "An operating system invoke method is defined and a method that has the equivalent functionality is located in the .NET Framework class library.",
    "details": {
      "typeName": "UseManagedEquivalentsOfWin32Api",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A platform invoke method is defined and a method with the equivalent functionality exists in the .NET Framework class library.",
      "description": "A platform invoke method is used to call an unmanaged DLL function and is defined using the System.Runtime.InteropServices.DllImportAttribute attribute, or the Declare keyword in Visual Basic. An incorrectly defined platform invoke method can lead to runtime exceptions because of issues such as a misnamed function, faulty mapping of parameter and return value data types, and incorrect field specifications, such as the calling convention and character set. If available, it is generally simpler and less error prone to call the equivalent managed method than to define and call the unmanaged method directly. Calling a platform invoke method can also lead to additional security issues that need to be addressed.",
      "hotToFix": "To fix a violation of this rule, replace the call to the unmanaged function with a call to its managed equivalent.",
      "whenToSuppress": "Suppress a warning from this rule if the suggested replacement method does not provide the needed functionality.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182365.aspx"
    }
  },
  {
    "id": "CA2207",
    "message": "Initialize value type static fields inline",
    "description": "A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.",
    "details": {
      "typeName": "InitializeValueTypeStaticFieldsInline",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A value-type declares an explicit static constructor.",
      "description": "When a value-type is declared, it undergoes a default initialization where all value-type fields are set to zero and all reference-type fields are set to null (Nothing in Visual Basic). An explicit static constructor is only guaranteed to run before an instance constructor or static member of the type is called. Therefore, if the type is created without calling an instance constructor, the static constructor is not guaranteed to run.\nIf all static data is initialized inline and no explicit static constructor is declared, the C# and Visual Basic compilers add the beforefieldinit flag to the MSIL class definition. The compilers also add a private static constructor that contains the static initialization code. This private static constructor is guaranteed to run before any static fields of the type are accessed.",
      "hotToFix": "To fix a violation of this rule initialize all static data when it is declared and remove the static constructor.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182346.aspx"
    }
  },
  {
    "id": "CA2208",
    "message": "Instantiate argument exceptions correctly",
    "description": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",
    "details": {
      "typeName": "InstantiateArgumentExceptionsCorrectly",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "Possible causes include the following situations:\nA call is made to the default (parameterless) constructor of an exception type that is, or derives from [System.ArgumentException]. An incorrect string argument is passed to a parameterized constructor of an exception type that is, or derives from [System.ArgumentException.]",
      "description": "Instead of calling the default constructor, call one of the constructor overloads that allows a more meaningful exception message to be provided. The exception message should target the developer and clearly explain the error condition and how to correct or avoid the exception.\nThe signatures of the one and two string constructors of ArgumentException and its derived types are not consistent with respect to the message and paramName parameters. Make sure these constructors are called with the correct string arguments. The signatures are as follows:\nArgumentException (string message)\nArgumentException (string message, string paramName)\nArgumentNullException (string paramName)\nArgumentNullException (string paramName, string message)\nArgumentOutOfRangeException (string paramName)\nArgumentOutOfRangeException (string paramName, string message)\nDuplicateWaitObjectException (string parameterName)\nDuplicateWaitObjectException (string parameterName, string message)",
      "hotToFix": "To fix a violation of this rule, call a constructor that takes a message, a parameter name, or both, and make sure the arguments are proper for the type of ArgumentException being called.",
      "whenToSuppress": "It is safe to suppress a warning from this rule only if a parameterized constructor is called with the correct string arguments.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182347.aspx"
    }
  },
  {
    "id": "CA2210",
    "message": "Assemblies should have valid strong names",
    "description": "The strong name protects clients from unknowingly loading an assembly that has been tampered with. Assemblies without strong names should not be deployed outside very limited scenarios. If you share or distribute assemblies that are not correctly signed, the assembly can be tampered with, the common language runtime might not load the assembly, or the user might have to disable verification on his or her computer.",
    "details": {
      "typeName": "AssembliesShouldHaveValidStrongNames",
      "category": "Microsoft.Design",
      "breakingChange": "Non Breaking",
      "cause": "An assembly is not signed with a strong name, the strong name could not be verified, or the strong name would not be valid without the current registry settings of the computer.",
      "description": "This rule retrieves and verifies the strong name of an assembly. A violation occurs if any of the following are true:\nThe assembly does not have a strong name. The assembly was altered after signing. The assembly is delay-signed. The assembly was incorrectly signed, or signing failed. The assembly requires registry settings to pass verification. For example, the Strong Name tool (Sn.exe) was used to skip verification for the assembly.\nThe strong name protects clients from unknowingly loading an assembly that has been tampered with. Assemblies without strong names should not be deployed outside very limited scenarios. If you share or distribute assemblies that are not correctly signed, the assembly can be tampered with, the common language runtime might not load the assembly, or the user might have to disable verification on his or her computer. An assembly without a strong name has from the following drawbacks:\nIts origins cannot be verified. The common language runtime cannot warn users if the contents of the assembly have been altered. It cannot be loaded into the global assembly cache.\nNote that to load and analyze a delay-signed assembly, you must disable verification for the assembly.",
      "hotToFix": "To create a key file\nUse one of the following procedures:\nUse the Assembly Linker tool (Al.exe) provided by the .NET Framework SDK. For the .NET Framework v1.0 or v1.1, use either the System.Reflection.AssemblyKeyFileAttribute or System.Reflection.AssemblyKeyNameAttribute attribute. For the .NET Framework 2.0, use either the /keyfile or /keycontainer compiler option /KEYFILE (Specify Key or Key Pair to Sign an Assembly) or /KEYCONTAINER (Specify a Key Container to Sign an Assembly) linker option in C++).\nTo sign your assembly with a strong name in Visual Studio\nIn Visual Studio, open your solution. In Solution Explorer, right-click your project and then click Properties. Click the Signing tab, and select the Sign the assembly check box. From Choose a strong name key file, select New. The Create Strong Name Key window will display. In Key file name, type a name for your strong name key. Choose whether to protect the key with a password, and then click OK. In Solution Explorer, right-click your project and then click Build.\nTo sign your assembly with a strong name outside Visual Studio\nUse the strong name tool (Sn.exe) that is provided by the .NET Framework SDK. For more information, see Sn.exe (Strong Name Tool).",
      "whenToSuppress": "Only suppress a warning from this rule if the assembly is used in an environment where tampering with the contents is not a concern.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182127.aspx"
    }
  },
  {
    "id": "CA2211",
    "message": "Non-constant fields should not be visible",
    "description": "Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques to synchronize access to the class object.",
    "details": {
      "typeName": "NonConstantFieldsShouldNotBeVisible",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking",
      "cause": "A public or protected static field is not constant nor is it read-only.",
      "description": "Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques for synchronizing access to the class object. Because these are difficult skills to learn and master, and testing such an object poses its own challenges, static fields are best used to store data that does not change. This rule applies to libraries; applications should not expose any fields.",
      "hotToFix": "To fix a violation of this rule, make the static field constant or read-only. If this is not possible, redesign the type to use an alternative mechanism such as a thread-safe property that manages thread-safe access to the underlying field. Realize that issues such as lock contention and deadlocks might affect the performance and behavior of the library.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if you are developing an application and therefore have full control over access to the type that contains the static field. Library designers should not suppress a warning from this rule; using non-constant static fields can make using the library difficult for developers to use correctly.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182353.aspx"
    }
  },
  {
    "id": "CA2212",
    "message": "Do not mark serviced components with WebMethod",
    "description": "A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked by using System.Web.Services.WebMethodAttribute. Because WebMethodAttribute and a ServicedComponent method have conflicting behavior and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.",
    "details": {
      "typeName": "DoNotMarkServicedComponentsWithWebMethod",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking",
      "cause": "A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked with System.Web.Services.WebMethodAttribute.",
      "description": "WebMethodAttribute applies to methods within an XML Web service that were created by using ASP.NET; it makes the method callable from remote Web clients. The method and class must be public and executing in an ASP.NET Web application. ServicedComponent types are hosted by COM+ applications and can use COM+ services. WebMethodAttribute is not applied to ServicedComponent types because they are not intended for the same scenarios. Specifically, adding the attribute to the ServicedComponent method does not make the method callable from remote Web clients. Because WebMethodAttribute and a ServicedComponent method have conflicting behaviors and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.",
      "hotToFix": "To fix a violation of this rule, remove the attribute from the ServicedComponent method.",
      "whenToSuppress": "Do not suppress a warning from this rule. There are no scenarios where combining these elements is correct.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182336.aspx"
    }
  },
  {
    "id": "CA2213",
    "message": "Disposable fields should be disposed",
    "description": "A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type.",
    "details": {
      "typeName": "DisposableFieldsShouldBeDisposed",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type.",
      "description": "A type is responsible for disposing of all its unmanaged resources; this is accomplished by implementing IDisposable. This rule checks to see whether a disposable type T declares a field F that is an instance of a disposable type FT. For each field F, the rule attempts to locate a call to FT.Dispose. The rule searches the methods called by T.Dispose, and one level lower (the methods called by the methods called by FT.Dispose).",
      "hotToFix": "To fix a violation of this rule, call Dispose on fields that are of types that implement IDisposable if you are responsible for allocating and releasing the unmanaged resources held by the field.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if you are not responsible for releasing the resource held by the field, or if the call to Dispose occurs at a deeper calling level than the rule checks.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182328.aspx"
    }
  },
  {
    "id": "CA2214",
    "message": "Do not call overridable methods in constructors",
    "description": "When a constructor calls a virtual method, the constructor for the instance that invokes the method may not have executed.",
    "details": {
      "typeName": "DoNotCallOverridableMethodsInConstructors",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "The constructor of an unsealed type calls a virtual method defined in its class.",
      "description": "When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed.",
      "hotToFix": "To fix a violation of this rule, do not call a type\u0027s virtual methods from within the type\u0027s constructors.",
      "whenToSuppress": "Do not suppress a warning from this rule. The constructor should be redesigned to eliminate the call to the virtual method.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182331.aspx"
    }
  },
  {
    "id": "CA2215",
    "message": "Dispose methods should call base class dispose",
    "description": "If a type inherits from a disposable type, it must call the Dispose method of the base type from its own Dispose method.",
    "details": {
      "typeName": "DisposeMethodsShouldCallBaseClassDispose",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type that implements System.IDisposable inherits from a type that also implements IDisposable. The Dispose method of the inheriting type does not call the Dispose method of the parent type.",
      "description": "If a type inherits from a disposable type, it must call the Dispose method of the base type from within its own Dispose method. Calling the base type method Dispose ensures that any resources created by the base type are released.",
      "hotToFix": "To fix a violation of this rule, call base.Dispose in your Dispose method.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the call to base.Dispose occurs at a deeper calling level than the rule checks.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182330.aspx"
    }
  },
  {
    "id": "CA2216",
    "message": "Disposable types should declare finalizer",
    "description": "A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize.",
    "details": {
      "typeName": "DisposableTypesShouldDeclareFinalizer",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type that implements System.IDisposable, and has fields that suggest the use of unmanaged resources, does not implement a finalizer as described by Object.Finalize.",
      "description": "A violation of this rule is reported if the disposable type contains fields of the following types:\nSystem.IntPtr System.UIntPtr System.Runtime.InteropServices.HandleRef",
      "hotToFix": "To fix a violation of this rule, implement a finalizer that calls your Dispose method.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the type does not implement IDisposable for the purpose of releasing unmanaged resources.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182329.aspx"
    }
  },
  {
    "id": "CA2217",
    "message": "Do not mark enums with FlagsAttribute",
    "description": "An externally visible enumeration is marked by using FlagsAttribute, and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.",
    "details": {
      "typeName": "DoNotMarkEnumsWithFlags",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An externally visible enumeration is marked with FlagsAttribute and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.",
      "description": "An enumeration should have FlagsAttribute present only if each value defined in the enumeration is a power of two, or a combination of defined values.",
      "hotToFix": "To fix a violation of this rule, remove FlagsAttribute from the enumeration.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182335.aspx"
    }
  },
  {
    "id": "CA2218",
    "message": "Override GetHashCode on overriding Equals",
    "description": "GetHashCode returns a value, based on the current instance, that is suited for hashing algorithms and data structures such as a hash table. Two objects that are the same type and are equal must return the same hash code.",
    "details": {
      "typeName": "OverrideGetHashCodeOnOverridingEquals",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A public type overrides Object.Equals but does not override Object.GetHashCode.",
      "description": "GetHashCode returns a value, based on the current instance, that is suited for hashing algorithms and data structures such as a hash table. Two objects that are the same type and are equal must return the same hash code to ensure that instances of the following types work correctly:\nHashTable System.Collections.SortedList Dictionary SortDictionary SortList HybredDictionary System.Collections.Specialized.ListDictionary System.Collections.Specialized.OrderedDictionary Types that implement IEqualityComparer",
      "hotToFix": "To fix a violation of this rule, provide an implementation of GetHashCode. For a pair of objects of the same type, you must ensure that the implementation returns the same value if your implementation of Equals returns true for the pair.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182358.aspx"
    }
  },
  {
    "id": "CA2219",
    "message": "Do not raise exceptions in exception clauses",
    "description": "When an exception is raised in a finally or fault clause, the new exception hides the active exception. When an exception is raised in a filter clause, the run time silently catches the exception. This makes the original error difficult to detect and debug.",
    "details": {
      "typeName": "DoNotRaiseExceptionsInExceptionClauses",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking, Breaking",
      "cause": "An exception is thrown from a finally, filter, or fault clause.",
      "description": "When an exception is raised in an exception clause, it greatly increases the difficulty of debugging.\nWhen an exception is raised in a finally or fault clause, the new exception hides the active exception, if present. This makes the original error hard to detect and debug.\nWhen an exception is raised in a filter clause, the runtime silently catches the exception, and causes the filter to evaluate to false. There is no way to tell the difference between the filter evaluating to false and an exception being throw from a filter. This makes it hard to detect and debug errors in the filter\u0027s logic.",
      "hotToFix": "To fix this violation of this rule, do not explicitly raise an exception from a finally, filter, or fault clause.",
      "whenToSuppress": "Do not suppress a warning for this rule. There are no scenarios under which an exception raised in an exception clause provides a benefit to the executing code.",
      "url": "http://msdn.microsoft.com/en-us/library/bb386041.aspx"
    }
  },
  {
    "id": "CA2220",
    "message": "Finalizers should call base class finalizer",
    "description": "Finalization must be propagated through the inheritance hierarchy. To guarantee this, types must call their base class Finalize method in their own Finalize method.",
    "details": {
      "typeName": "FinalizersShouldCallBaseClassFinalizer",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type that overrides Object.Finalize does not call the Finalize method in its base class.",
      "description": "Finalization must be propagated through the inheritance hierarchy. To ensure this, types must call their base class Finalize method from within their own Finalize method. The C# compiler adds the call to the base class finalizer automatically.",
      "hotToFix": "To fix a violation of this rule, call the base type\u0027s Finalize method from your Finalize method.",
      "whenToSuppress": "Do not suppress a warning from this rule. Some compilers that target the common language runtime insert a call to the base type\u0027s finalizer into the Microsoft intermediate language (MSIL). If a warning from this rule is reported, your compiler does not insert the call, and you must add it to your code.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182341.aspx"
    }
  },
  {
    "id": "CA2221",
    "message": "Finalizers should be protected",
    "description": "Finalizers must use the family access modifier.",
    "details": {
      "typeName": "FinalizersShouldBeProtected",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A public type implements a finalizer that does not specify family (protected) access.",
      "description": "Finalizers must use the family access modifier. This rule is enforced by the C#, Visual Basic, and Visual C++ compilers.",
      "hotToFix": "To fix a violation of this rule, change the finalizer to be family-accessible.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182340.aspx"
    }
  },
  {
    "id": "CA2222",
    "message": "Do not decrease inherited member visibility",
    "description": "You should not change the access modifier for inherited members. Changing an inherited member to private does not prevent callers from accessing the base class implementation of the method.",
    "details": {
      "typeName": "DoNotDecreaseInheritedMemberVisibility",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A private method in an unsealed type has a signature that is identical to a public method declared in a base type. The private method is not final.",
      "description": "You should not change the access modifier for inherited members. Changing an inherited member to private does not prevent callers from accessing the base class implementation of the method. If the member is made private and the type is unsealed, inheriting types can call the last public implementation of the method in the inheritance hierarchy. If you must change the access modifier, either the method should be marked final or its type should be sealed to prevent the method from being overridden.",
      "hotToFix": "To fix a violation of this rule, change the access to be non-private. Alternatively, if your programming language supports it, you can make the method final.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182332.aspx"
    }
  },
  {
    "id": "CA2223",
    "message": "Members should differ by more than return type",
    "description": "Although the common language runtime allows the use of return types to differentiate between otherwise identical members, this feature is not in the Common Language Specification, nor is it a common feature of .NET programming languages.",
    "details": {
      "typeName": "MembersShouldDifferByMoreThanReturnType",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking",
      "cause": "Two public or protected members have signatures that are identical except for return type.",
      "description": "Although the common language runtime permits the use of return types to differentiate between otherwise identical members, this feature is not in the Common Language Specification, nor is it a common feature of .NET programming languages. When members differ only by return type, developers and development tools might not correctly distinguish between them.",
      "hotToFix": "To fix a violation of this rule, change the design of the members so that they are unique based only on their names and parameter types, or do not expose the members.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182352.aspx"
    }
  },
  {
    "id": "CA2224",
    "message": "Override equals on overloading operator equals",
    "description": "A public type implements the equality operator but does not override Object.Equals.",
    "details": {
      "typeName": "OverrideEqualsOnOverloadingOperatorEquals",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A public type implements the equality operator, but does not override Object.Equals.",
      "description": "The equality operator is intended to be a syntactically convenient way to access the functionality of the Equals method. If you implement the equality operator, its logic must be identical to that of Equals.\nThe C# compiler issues a warning if your code violates this rule.",
      "hotToFix": "To fix a violation of this rule, you should either remove the implementation of the equality operator, or override Equals and have the two methods return the same values. If the equality operator does not introduce inconsistent behavior, you can fix the violation by providing an implementation of Equals that calls the Equals method in the base class.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the equality operator returns the same value as the inherited implementation of Equals. The Example section includes a type that could safely suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182357.aspx"
    }
  },
  {
    "id": "CA2225",
    "message": "Operator overloads have named alternates",
    "description": "An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.",
    "details": {
      "typeName": "OperatorOverloadsHaveNamedAlternates",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An operator overload was detected, and the expected named alternative method was not found.",
      "description": "Operator overloading allows the use of symbols to represent computations for a type. For example, a type that overloads the plus symbol (+) for addition would typically have an alternative member named \u0027Add\u0027. The named alternative member provides access to the same functionality as the operator, and is provided for developers who program in languages that do not support overloaded operators.\nThis rule examines the operators listed in the following table.\nN/A \u003d\u003d Cannot be overloaded in the selected language.\nThe rule also checks implicit and explicit cast operators in a type (SomeType) by checking for methods named ToSomeType and FromSomeType.\nIn C#, when a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.",
      "hotToFix": "To fix a violation of this rule, implement the alternative method for the operator; name it using the recommended alternative name.",
      "whenToSuppress": "Do not suppress a warning from this rule if you are implementing a shared library. Applications can ignore a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182355.aspx"
    }
  },
  {
    "id": "CA2226",
    "message": "Operators should have symmetrical overloads",
    "description": "A type implements the equality or inequality operator and does not implement the opposite operator.",
    "details": {
      "typeName": "OperatorsShouldHaveSymmetricalOverloads",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type implements the equality or inequality operator and does not implement the opposite operator.",
      "description": "There are no circumstances where either equality or inequality is applicable to instances of a type, and the opposite operator is undefined. Types typically implement the inequality operator by returning the negated value of the equality operator.\nThe C# compiler issues an error for violations of this rule.",
      "hotToFix": "To fix a violation of this rule, implement both the equality and inequality operators, or remove the one that is present.",
      "whenToSuppress": "Do not suppress a warning from this rule. Your type will not work in a manner that is consistent with the .NET Framework.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182356.aspx"
    }
  },
  {
    "id": "CA2227",
    "message": "Collection properties should be read only",
    "description": "A writable collection property allows a user to replace the collection with a different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set.",
    "details": {
      "typeName": "CollectionPropertiesShouldBeReadOnly",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking",
      "cause": "An externally visible writable property is a type that implements System.Collections.ICollection. Arrays, indexers (properties with the name \u0027Item\u0027), and permission sets are ignored by the rule.",
      "description": "A writable collection property allows a user to replace the collection with a completely different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set. If replacing the collection is a goal, the preferred design pattern is to include a method to remove all the elements from the collection and a method to re-populate the collection. See the Clear and AddRange methods of the System.Collections.ArrayList class for an example of this pattern.\nBoth binary and XML serialization support read-only properties that are collections. The System.Xml.Serialization.XmlSerializer class has specific requirements for types that implement ICollection and System.Collections.IEnumerable in order to be serializable.",
      "hotToFix": "To fix a violation of this rule, make the property read-only and, if the design requires it, add methods to clear and re-populate the collection.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182327.aspx"
    }
  },
  {
    "id": "CA2228",
    "message": "Do not ship unreleased resource formats",
    "description": "Resource files that were built by using prerelease versions of the .NET Framework might not be usable by supported versions of the .NET Framework.",
    "details": {
      "typeName": "DoNotShipUnreleasedResourceFormats",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A resource file was built using a version of the .NET Framework that is not currently supported.",
      "description": "Resource files that were built by using pre-release versions of the .NET Framework might not be usable by supported versions of the .NET Framework.",
      "hotToFix": "To fix a violation of this rule, build the resource using a supported version of the .NET Frameworkk.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182339.aspx"
    }
  },
  {
    "id": "CA2229",
    "message": "Implement serialization constructors",
    "description": "To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.",
    "details": {
      "typeName": "ImplementSerializationConstructors",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "The type implements the System.Runtime.Serialization.ISerializable interface, is not a delegate or interface, and one of the following conditions is true:\nThe type does not have a constructor that takes a System.Runtime.Serialization.SerializationInfo object and a System.Runtime.Serialization.StreamingContext object (the signature of the serialization constructor). The type is unsealed and the access modifier for its serialization constructor is not protected (family). The type is sealed and the access modifier for its serialization constructor is not private.",
      "description": "This rule is relevant for types that support custom serialization. A type supports custom serialization if it implements the ISerializable interface. The serialization constructor is required to deserialize, or re-create objects that have been serialized using the ISerializable.GetObjectData method.",
      "hotToFix": "To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.",
      "whenToSuppress": "Do not suppress a violation of the rule. The type will not be deserializable, and will not function in many scenarios.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182343.aspx"
    }
  },
  {
    "id": "CA2230",
    "message": "Use params for variable arguments",
    "description": "A public or protected type contains a public or protected method that uses the VarArgs calling convention instead of the params keyword.",
    "details": {
      "typeName": "UseParamsForVariableArguments",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking",
      "cause": "A public or protected type contains a public or protected method that uses the VarArgs calling convention.",
      "description": "The VarArgs calling convention is used with certain method definitions that take a variable number of parameters. A method using the VarArgs calling convention is not Common Language Specification (CLS) compliant and might not be accessible across programming languages.\nIn C#, the VarArgs calling convention is used when a method\u0027s parameter list ends with the __arglist keyword. Visual Basic does not support the VarArgs calling convention, and Visual C++ allows its use only in unmanaged code that uses the ellipse ... notation.",
      "hotToFix": "To fix a violation of this rule in C#, use the params (C# Reference) keyword instead of __arglist.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182366.aspx"
    }
  },
  {
    "id": "CA2231",
    "message": "Overload operator equals on overriding ValueType.Equals",
    "description": "A value type overrides Object.Equals but does not implement the equality operator.",
    "details": {
      "typeName": "OverloadOperatorEqualsOnOverridingValueTypeEquals",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A value type overrides Object.Equals but does not implement the equality operator.",
      "description": "In most programming languages there is no default implementation of the equality operator (\u003d\u003d) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of Equals.\nYou cannot use the default equality operator in an overloaded implementation of the equality operator. Doing so will cause a stack overflow. To implement the equality operator, use the Object.Equals method in your implementation. For example:",
      "hotToFix": "To fix a violation of this rule, implement the equality operator.",
      "whenToSuppress": "It is safe to suppress a warning from this rule; however, we recommend that you provide the equality operator if possible.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182359.aspx"
    }
  },
  {
    "id": "CA2232",
    "message": "Mark Windows Forms entry points with STAThread",
    "description": "STAThreadAttribute indicates that the COM threading model for the application is a single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly.",
    "details": {
      "typeName": "MarkWindowsFormsEntryPointsWithStaThread",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An assembly references the System.Windows.Forms namespace, and its entry point is not marked with the System.STAThreadAttribute attribute.",
      "description": "STAThreadAttribute indicates that the COM threading model for the application is single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly. If the attribute is not present, the application uses the multithreaded apartment model, which is not supported for Windows Forms.",
      "hotToFix": "To fix a violation of this rule, add the STAThreadAttribute attribute to the entry point. If the System.MTAThreadAttribute attribute is present, remove it.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if you are developing for the .NET Compact Framework, for which the STAThreadAttribute attribute is unnecessary and not supported.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182351.aspx"
    }
  },
  {
    "id": "CA2233",
    "message": "Operations should not overflow",
    "description": "You should not perform arithmetic operations without first validating the operands. This makes sure that the result of the operation is not outside the range of possible values for the data types that are involved.",
    "details": {
      "typeName": "OperationsShouldNotOverflow",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A method performs an arithmetic operation and does not validate the operands beforehand to prevent overflow.",
      "description": "Arithmetic operations should not be performed without first validating the operands to make sure that the result of the operation is not outside the range of possible values for the data types involved. Depending on the execution context and the data types involved, arithmetic overflow can result in either a System.OverflowException or the most significant bits of the result discarded.",
      "hotToFix": "To fix a violation of this rule, validate the operands before you perform the operation.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the possible values of the operands will never cause the arithmetic operation to overflow.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182354.aspx"
    }
  },
  {
    "id": "CA2234",
    "message": "Pass System.Uri objects instead of strings",
    "description": "A call is made to a method that has a string parameter whose name contains \"uri\", \"URI\", \"urn\", \"URN\", \"url\", or \"URL\". The declaring type of the method contains a corresponding method overload that has a System.Uri parameter.",
    "details": {
      "typeName": "PassSystemUriObjectsInsteadOfStrings",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A call is made to a method that has a string parameter whose name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\"; and the declaring type of the method contains a corresponding method overload that has a System.Uri parameter.",
      "description": "A parameter name is split into tokens based on the camel casing convention, and then each token is checked to see whether it equals \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\", or \"Url\". If there is a match, the parameter is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The Uri class provides these services in a safe and secure manner. When there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes a Uri argument.",
      "hotToFix": "To fix a violation of this rule, call the overload that takes the Uri argument.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the string parameter does not represent a URI.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182360.aspx"
    }
  },
  {
    "id": "CA2235",
    "message": "Mark all non-serializable fields",
    "description": "An instance field of a type that is not serializable is declared in a type that is serializable.",
    "details": {
      "typeName": "MarkAllNonSerializableFields",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An instance field of a type that is not serializable is declared in a type that is serializable.",
      "description": "A serializable type is one that is marked with the System.SerializableAttribute attribute. When the type is serialized, a System.Runtime.Serialization.SerializationException exception is thrown if a type contains an instance field of a type that is not serializable.",
      "hotToFix": "To fix a violation of this rule, apply the System.NonSerializedAttribute attribute to the field that is not serializable.",
      "whenToSuppress": "Only suppress a warning from this rule if a System.Runtime.Serialization.ISerializationSurrogate type is declared that allows instances of the field to be serialized and deserialized.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182349.aspx"
    }
  },
  {
    "id": "CA2236",
    "message": "Call base class methods on ISerializable types",
    "description": "To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor.",
    "details": {
      "typeName": "CallBaseClassMethodsOnISerializableTypes",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type derives from a type that implements the System.Runtime.Serialization.ISerializable interface, and one of the following conditions is true:\nThe type implements the serialization constructor, that is, a constructor with the System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext parameter signature, but does not call the serialization constructor of the base type. The type implements the ISerializable.GetObjectData method but does not call the GetObjectData method of the base type.",
      "description": "In a custom serialization process, a type implements the GetObjectData method to serialize its fields and the serialization constructor to de-serialize the fields. If the type derives from a type that implements the ISerializable interface, the base type GetObjectData method and serialization constructor should be called to serialize/de-serialize the fields of the base type. Otherwise, the type will not be serialized and de-serialized correctly. Note that if the derived type does not add any new fields, the type does not need to implement the GetObjectData method nor the serialization constructor or call the base type equivalents.",
      "hotToFix": "To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182326.aspx"
    }
  },
  {
    "id": "CA2237",
    "message": "Mark ISerializable types with SerializableAttribute",
    "description": "To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface.",
    "details": {
      "typeName": "MarkISerializableTypesWithSerializable",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An externally visible type implements the System.Runtime.Serialization.ISerializable interface and the type is not marked with the System.SerializableAttribute attribute. The rule ignores derived types whose base type is not serializable.",
      "description": "To be recognized by the common language runtime as serializable, types must be marked with the SerializableAttribute attribute even if the type uses a custom serialization routine through implementation of the ISerializable interface.",
      "hotToFix": "To fix a violation of this rule, apply the SerializableAttribute attribute to the type.",
      "whenToSuppress": "Do not suppress a warning from this rule for exception classes because they must be serializable to work correctly across application domains.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182350.aspx"
    }
  },
  {
    "id": "CA2238",
    "message": "Implement serialization methods correctly",
    "description": "A method that handles a serialization event does not have the correct signature, return type, or visibility.",
    "details": {
      "typeName": "ImplementSerializationMethodsCorrectly",
      "category": "Microsoft.Usage",
      "breakingChange": "Breaking - If the method is visible outside the assembly. Non Breaking - If the method is not visible outside the assembly.",
      "cause": "A method that handles a serialization event does not have the correct signature, return type, or visibility.",
      "description": "A method is designated a serialization event handler by applying one of the following serialization event attributes:\nSystem.Runtime.Serialization.OnSerializingAttribute System.Runtime.Serialization.OnSerializedAttribute System.Runtime.Serialization.OnDeserializingAttribute System.Runtime.Serialization.OnDeserializedAttribute\nSerialization event handlers take a single parameter of type System.Runtime.Serialization.StreamingContext, return void, and have private visibility.",
      "hotToFix": "To fix a violation of this rule, correct the signature, return type, or visibility of the serialization event handler.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182344.aspx"
    }
  },
  {
    "id": "CA2239",
    "message": "Provide deserialization methods for optional fields",
    "description": "A type has a field that is marked by using the System.Runtime.Serialization.OptionalFieldAttribute attribute, and the type does not provide deserialization event handling methods.",
    "details": {
      "typeName": "ProvideDeserializationMethodsForOptionalFields",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "A type has a field that is marked with the System.Runtime.Serialization.OptionalFieldAttribute attribute and the type does not provide de-serialization event handling methods.",
      "description": "The OptionalFieldAttribute attribute has no effect on serialization; a field marked with the attribute is serialized. However, the field is ignored on de-serialization and retains the default value associated with its type. De-serialization event handlers should be declared to set the field during the de-serialization process.",
      "hotToFix": "To fix a violation of this rule, add de-serialization event handling methods to the type.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the field should be ignored during the de-serialization process.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182362.aspx"
    }
  },
  {
    "id": "CA2240",
    "message": "Implement ISerializable correctly",
    "description": "To fix a violation of this rule, make the GetObjectData method visible and overridable, and make sure that all instance fields are included in the serialization process or explicitly marked by using the NonSerializedAttribute attribute.",
    "details": {
      "typeName": "ImplementISerializableCorrectly",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An externally visible type is assignable to the System.Runtime.Serialization.ISerializable interface and one of the following conditions is true:\nThe type inherits but does not override the ISerializable.GetObjectData method and the type declares instance fields that are not marked with the System.NonSerializedAttribute attribute. The type is not sealed and the type implements a GetObjectData method that is not externally visible and overridable.",
      "description": "Instance fields that are declared in a type that inherits the System.Runtime.Serialization.ISerializable interface are not automatically included in the serialization process. To include the fields, the type must implement the GetObjectData method and the serialization constructor. If the fields should not be serialized, apply the NonSerializedAttribute attribute to the fields to explicitly indicate the decision.\nIn types that are not sealed, implementations of the GetObjectData method should be externally visible. Therefore, the method can be called by derived types, and is overridable.",
      "hotToFix": "To fix a violation of this rule, make the GetObjectData method visible and overridable and make sure all instance fields are included in the serialization process or explicitly marked with the NonSerializedAttribute attribute.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182342.aspx"
    }
  },
  {
    "id": "CA2241",
    "message": "Provide correct arguments to formatting methods",
    "description": "The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa.",
    "details": {
      "typeName": "ProvideCorrectArgumentsToFormattingMethods",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "The format string argument passed to a method such as WriteLine, Write, or String.Format does not contain a format item that corresponds to each object argument, or vice versa.",
      "description": "The arguments to methods such as WriteLine, Write, and Format consist of a format string followed by several System.Object instances. The format string consists of text and embedded format items of the form, {index[,alignment][:formatString]}. \u0027index\u0027 is a zero-based integer that indicates which of the objects to format. If an object does not have a corresponding index in the format string, the object is ignored. If the object specified by \u0027index\u0027 does not exist, a System.FormatException is thrown at runtime.",
      "hotToFix": "To fix a violation of this rule, provide a format item for each object argument and provide an object argument for each format item.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/ms182361.aspx"
    }
  },
  {
    "id": "CA2242",
    "message": "Test for NaN correctly",
    "description": "This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value.",
    "details": {
      "typeName": "TestForNaNCorrectly",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An expression tests a value against Single.Nan or Double.Nan.",
      "description": "Double.NaN , which represents not-a-number, results when an arithmetic operation is undefined. Any expression that tests equality between a value and Double.NaN always returns false. Any expression that tests inequality between a value and Double.NaN always returns true.",
      "hotToFix": "To fix a violation of this rule and accurately determine whether a value represents Double.NaN, use Single.IsNan or Double.IsNan to test the value.",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264491.aspx"
    }
  },
  {
    "id": "CA2243",
    "message": "Attribute string literals should parse correctly",
    "description": "The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version.",
    "details": {
      "typeName": "AttributeStringLiteralsShouldParseCorrectly",
      "category": "Microsoft.Usage",
      "breakingChange": "Non Breaking",
      "cause": "An attribute\u0027s string literal parameter does not parse correctly for a URL, GUID, or Version.",
      "description": "Since attributes are derived from System.Attribute, and attributes are used at compile time, only constant values can be passed to their constructors. Attribute parameters that must represent URLs, GUIDs and Versions cannot be typed as System.Uri, System.Guid, and System.Version, because these types cannot be represented as constants. Instead, they must be represented by strings.\nBecause the parameter is typed as a string, it is possible that an incorrectly formatted parameter could be passed at compile time.\nThis rule uses a naming heuristic to find parameters that represent a uniform resource identifier (URI), a Globally Unique Identifier (GUID) or a Version and verifies that the passed value is correct.",
      "hotToFix": "Change the parameter string to a correctly formed URL, GUID, or Version.",
      "whenToSuppress": "It is safe to suppress a warning from this rule if the parameter does not represent a URL, GUID, or Version.",
      "url": "http://msdn.microsoft.com/en-us/library/bb264490.aspx"
    }
  },
  {
    "id": "CA5122",
    "message": "CA5122 P/Invoke declarations should not be safe critical",
    "description": "Methods are marked as SecuritySafeCritical when they perform a security sensitive operation, but are also safe to be used by transparent code. Transparent code may never directly call native code through a P/Invoke. Therefore, marking a P/Invoke as security safe critical will not enable transparent code to call it, and is misleading for security analysis.",
    "details": {
      "typeName": "PInvokesShouldNotBeSafeCriticalFxCopRule",
      "category": "Microsoft.Security",
      "breakingChange": "Breaking",
      "cause": "A P/Invoke declaration has been marked with a SecuritySafeCriticalAttribute:\nIn this example, C.Beep(...) has been marked as a security safe critical method.",
      "description": "Methods are marked as SecuritySafeCritical when they perform a security sensitive operation, but are also safe to be used by transparent code. One of the fundamental rules of the security transparency model is that transparent code may never directly call native code through a P/Invoke. Therefore, marking a P/Invoke as security safe critical will not enable transparent code to call it, and is misleading for security analysis.",
      "hotToFix": "To make a P/Invoke available to transparent code, expose a security safe critical wrapper method for it:",
      "whenToSuppress": "Do not suppress a warning from this rule.",
      "url": "http://msdn.microsoft.com/en-us/library/dn621099.aspx"
    }
  }
]